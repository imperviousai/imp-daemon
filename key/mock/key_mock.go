// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/key (interfaces: KeyManager)

// Package mock is a generated GoMock package.
package mock

import (
	ecdsa "crypto/ecdsa"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyManager is a mock of KeyManager interface.
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager.
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance.
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return m.recorder
}

// CreateNewED25519Key mocks base method.
func (m *MockKeyManager) CreateNewED25519Key(arg0 int64) ([]byte, []byte, int64, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewED25519Key", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(uint32)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// CreateNewED25519Key indicates an expected call of CreateNewED25519Key.
func (mr *MockKeyManagerMockRecorder) CreateNewED25519Key(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewED25519Key", reflect.TypeOf((*MockKeyManager)(nil).CreateNewED25519Key), arg0)
}

// CreateNewP384Key mocks base method.
func (m *MockKeyManager) CreateNewP384Key(arg0 int64) (*ecdsa.PrivateKey, int64, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewP384Key", arg0)
	ret0, _ := ret[0].(*ecdsa.PrivateKey)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateNewP384Key indicates an expected call of CreateNewP384Key.
func (mr *MockKeyManagerMockRecorder) CreateNewP384Key(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewP384Key", reflect.TypeOf((*MockKeyManager)(nil).CreateNewP384Key), arg0)
}

// CreateNewSECP256K1Key mocks base method.
func (m *MockKeyManager) CreateNewSECP256K1Key(arg0 int64) (*ecdsa.PrivateKey, int64, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSECP256K1Key", arg0)
	ret0, _ := ret[0].(*ecdsa.PrivateKey)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateNewSECP256K1Key indicates an expected call of CreateNewSECP256K1Key.
func (mr *MockKeyManagerMockRecorder) CreateNewSECP256K1Key(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSECP256K1Key", reflect.TypeOf((*MockKeyManager)(nil).CreateNewSECP256K1Key), arg0)
}

// Decrypt mocks base method.
func (m *MockKeyManager) Decrypt(arg0, arg1, arg2, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockKeyManagerMockRecorder) Decrypt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKeyManager)(nil).Decrypt), arg0, arg1, arg2, arg3)
}

// GetChildKey mocks base method.
func (m *MockKeyManager) GetChildKey(arg0 int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildKey indicates an expected call of GetChildKey.
func (mr *MockKeyManagerMockRecorder) GetChildKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildKey", reflect.TypeOf((*MockKeyManager)(nil).GetChildKey), arg0)
}

// GetChildrenKeys mocks base method.
func (m *MockKeyManager) GetChildrenKeys(arg0 int64) ([][]byte, []uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenKeys", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].([]uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChildrenKeys indicates an expected call of GetChildrenKeys.
func (mr *MockKeyManagerMockRecorder) GetChildrenKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenKeys", reflect.TypeOf((*MockKeyManager)(nil).GetChildrenKeys), arg0)
}

// GetIndex mocks base method.
func (m *MockKeyManager) GetIndex(arg0 int64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockKeyManagerMockRecorder) GetIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockKeyManager)(nil).GetIndex), arg0)
}

// GetSeed mocks base method.
func (m *MockKeyManager) GetSeed() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeed")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeed indicates an expected call of GetSeed.
func (mr *MockKeyManagerMockRecorder) GetSeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeed", reflect.TypeOf((*MockKeyManager)(nil).GetSeed))
}

// InitSeed mocks base method.
func (m *MockKeyManager) InitSeed(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSeed", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitSeed indicates an expected call of InitSeed.
func (mr *MockKeyManagerMockRecorder) InitSeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSeed", reflect.TypeOf((*MockKeyManager)(nil).InitSeed), arg0, arg1)
}

// IsLocked mocks base method.
func (m *MockKeyManager) IsLocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocked indicates an expected call of IsLocked.
func (mr *MockKeyManagerMockRecorder) IsLocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocked", reflect.TypeOf((*MockKeyManager)(nil).IsLocked))
}

// NewChild mocks base method.
func (m *MockKeyManager) NewChild(arg0 int64, arg1 uint32) (int64, []byte, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChild", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// NewChild indicates an expected call of NewChild.
func (mr *MockKeyManagerMockRecorder) NewChild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChild", reflect.TypeOf((*MockKeyManager)(nil).NewChild), arg0, arg1)
}

// UnlockSeed mocks base method.
func (m *MockKeyManager) UnlockSeed(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockSeed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockSeed indicates an expected call of UnlockSeed.
func (mr *MockKeyManagerMockRecorder) UnlockSeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockSeed", reflect.TypeOf((*MockKeyManager)(nil).UnlockSeed), arg0)
}
