// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/key/state (interfaces: KeyState)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/imperviousai/freeimp/key/state"
)

// MockKeyState is a mock of KeyState interface.
type MockKeyState struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStateMockRecorder
}

// MockKeyStateMockRecorder is the mock recorder for MockKeyState.
type MockKeyStateMockRecorder struct {
	mock *MockKeyState
}

// NewMockKeyState creates a new mock instance.
func NewMockKeyState(ctrl *gomock.Controller) *MockKeyState {
	mock := &MockKeyState{ctrl: ctrl}
	mock.recorder = &MockKeyStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyState) EXPECT() *MockKeyStateMockRecorder {
	return m.recorder
}

// AddChild mocks base method.
func (m *MockKeyState) AddChild(arg0 uint32, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChild", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChild indicates an expected call of AddChild.
func (mr *MockKeyStateMockRecorder) AddChild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChild", reflect.TypeOf((*MockKeyState)(nil).AddChild), arg0, arg1)
}

// GetAllParentRootKeys mocks base method.
func (m *MockKeyState) GetAllParentRootKeys() ([]state.KeyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllParentRootKeys")
	ret0, _ := ret[0].([]state.KeyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllParentRootKeys indicates an expected call of GetAllParentRootKeys.
func (mr *MockKeyStateMockRecorder) GetAllParentRootKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllParentRootKeys", reflect.TypeOf((*MockKeyState)(nil).GetAllParentRootKeys))
}

// GetChild mocks base method.
func (m *MockKeyState) GetChild(arg0 int64) (uint32, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChild", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetChild indicates an expected call of GetChild.
func (mr *MockKeyStateMockRecorder) GetChild(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChild", reflect.TypeOf((*MockKeyState)(nil).GetChild), arg0)
}

// GetChildrenKeys mocks base method.
func (m *MockKeyState) GetChildrenKeys(arg0 int64) ([]state.KeyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenKeys", arg0)
	ret0, _ := ret[0].([]state.KeyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildrenKeys indicates an expected call of GetChildrenKeys.
func (mr *MockKeyStateMockRecorder) GetChildrenKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenKeys", reflect.TypeOf((*MockKeyState)(nil).GetChildrenKeys), arg0)
}

// GetLastChildIndex mocks base method.
func (m *MockKeyState) GetLastChildIndex(arg0 int64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChildIndex", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastChildIndex indicates an expected call of GetLastChildIndex.
func (mr *MockKeyStateMockRecorder) GetLastChildIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChildIndex", reflect.TypeOf((*MockKeyState)(nil).GetLastChildIndex), arg0)
}

// GetLastSeedIndex mocks base method.
func (m *MockKeyState) GetLastSeedIndex(arg0 uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSeedIndex", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSeedIndex indicates an expected call of GetLastSeedIndex.
func (mr *MockKeyStateMockRecorder) GetLastSeedIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSeedIndex", reflect.TypeOf((*MockKeyState)(nil).GetLastSeedIndex), arg0)
}

// GetMnemonic mocks base method.
func (m *MockKeyState) GetMnemonic() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMnemonic")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMnemonic indicates an expected call of GetMnemonic.
func (mr *MockKeyStateMockRecorder) GetMnemonic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMnemonic", reflect.TypeOf((*MockKeyState)(nil).GetMnemonic))
}

// GetSeed mocks base method.
func (m *MockKeyState) GetSeed() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeed")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSeed indicates an expected call of GetSeed.
func (mr *MockKeyStateMockRecorder) GetSeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeed", reflect.TypeOf((*MockKeyState)(nil).GetSeed))
}

// SaveSeed mocks base method.
func (m *MockKeyState) SaveSeed(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSeed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSeed indicates an expected call of SaveSeed.
func (mr *MockKeyStateMockRecorder) SaveSeed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSeed", reflect.TypeOf((*MockKeyState)(nil).SaveSeed), arg0, arg1, arg2)
}
