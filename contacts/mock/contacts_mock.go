// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/contacts (interfaces: Contacts)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	contacts "github.com/imperviousai/imp-daemon/contacts"
)

// MockContacts is a mock of Contacts interface.
type MockContacts struct {
	ctrl     *gomock.Controller
	recorder *MockContactsMockRecorder
}

// MockContactsMockRecorder is the mock recorder for MockContacts.
type MockContactsMockRecorder struct {
	mock *MockContacts
}

// NewMockContacts creates a new mock instance.
func NewMockContacts(ctrl *gomock.Controller) *MockContacts {
	mock := &MockContacts{ctrl: ctrl}
	mock.recorder = &MockContactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContacts) EXPECT() *MockContactsMockRecorder {
	return m.recorder
}

// CreateContact mocks base method.
func (m *MockContacts) CreateContact(arg0 *contacts.ContactInfo) (*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0)
	ret0, _ := ret[0].(*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockContactsMockRecorder) CreateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockContacts)(nil).CreateContact), arg0)
}

// DeleteContact mocks base method.
func (m *MockContacts) DeleteContact(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockContactsMockRecorder) DeleteContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockContacts)(nil).DeleteContact), arg0)
}

// GetContact mocks base method.
func (m *MockContacts) GetContact(arg0 int64) (*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockContactsMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockContacts)(nil).GetContact), arg0)
}

// GetContacts mocks base method.
func (m *MockContacts) GetContacts() ([]*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts")
	ret0, _ := ret[0].([]*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockContactsMockRecorder) GetContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockContacts)(nil).GetContacts))
}

// UpdateContact mocks base method.
func (m *MockContacts) UpdateContact(arg0 *contacts.ContactUpdate) (*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0)
	ret0, _ := ret[0].(*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockContactsMockRecorder) UpdateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockContacts)(nil).UpdateContact), arg0)
}
