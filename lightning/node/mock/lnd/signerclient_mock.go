// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lightningnetwork/lnd/lnrpc/signrpc (interfaces: SignerClient)

// Package lnd_mock is a generated GoMock package.
package lnd_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	signrpc "github.com/lightningnetwork/lnd/lnrpc/signrpc"
	grpc "google.golang.org/grpc"
)

// MockSignerClient is a mock of SignerClient interface.
type MockSignerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSignerClientMockRecorder
}

// MockSignerClientMockRecorder is the mock recorder for MockSignerClient.
type MockSignerClientMockRecorder struct {
	mock *MockSignerClient
}

// NewMockSignerClient creates a new mock instance.
func NewMockSignerClient(ctrl *gomock.Controller) *MockSignerClient {
	mock := &MockSignerClient{ctrl: ctrl}
	mock.recorder = &MockSignerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerClient) EXPECT() *MockSignerClientMockRecorder {
	return m.recorder
}

// ComputeInputScript mocks base method.
func (m *MockSignerClient) ComputeInputScript(arg0 context.Context, arg1 *signrpc.SignReq, arg2 ...grpc.CallOption) (*signrpc.InputScriptResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComputeInputScript", varargs...)
	ret0, _ := ret[0].(*signrpc.InputScriptResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeInputScript indicates an expected call of ComputeInputScript.
func (mr *MockSignerClientMockRecorder) ComputeInputScript(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeInputScript", reflect.TypeOf((*MockSignerClient)(nil).ComputeInputScript), varargs...)
}

// DeriveSharedKey mocks base method.
func (m *MockSignerClient) DeriveSharedKey(arg0 context.Context, arg1 *signrpc.SharedKeyRequest, arg2 ...grpc.CallOption) (*signrpc.SharedKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeriveSharedKey", varargs...)
	ret0, _ := ret[0].(*signrpc.SharedKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveSharedKey indicates an expected call of DeriveSharedKey.
func (mr *MockSignerClientMockRecorder) DeriveSharedKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveSharedKey", reflect.TypeOf((*MockSignerClient)(nil).DeriveSharedKey), varargs...)
}

// SignMessage mocks base method.
func (m *MockSignerClient) SignMessage(arg0 context.Context, arg1 *signrpc.SignMessageReq, arg2 ...grpc.CallOption) (*signrpc.SignMessageResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignMessage", varargs...)
	ret0, _ := ret[0].(*signrpc.SignMessageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMessage indicates an expected call of SignMessage.
func (mr *MockSignerClientMockRecorder) SignMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockSignerClient)(nil).SignMessage), varargs...)
}

// SignOutputRaw mocks base method.
func (m *MockSignerClient) SignOutputRaw(arg0 context.Context, arg1 *signrpc.SignReq, arg2 ...grpc.CallOption) (*signrpc.SignResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignOutputRaw", varargs...)
	ret0, _ := ret[0].(*signrpc.SignResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOutputRaw indicates an expected call of SignOutputRaw.
func (mr *MockSignerClientMockRecorder) SignOutputRaw(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOutputRaw", reflect.TypeOf((*MockSignerClient)(nil).SignOutputRaw), varargs...)
}

// VerifyMessage mocks base method.
func (m *MockSignerClient) VerifyMessage(arg0 context.Context, arg1 *signrpc.VerifyMessageReq, arg2 ...grpc.CallOption) (*signrpc.VerifyMessageResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyMessage", varargs...)
	ret0, _ := ret[0].(*signrpc.VerifyMessageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMessage indicates an expected call of VerifyMessage.
func (mr *MockSignerClientMockRecorder) VerifyMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessage", reflect.TypeOf((*MockSignerClient)(nil).VerifyMessage), varargs...)
}
