/// Allows for Config actions for Impervious nodes
syntax = 'proto3';

package configs;

option go_package = "github.com/imperviousai/freeimp/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Config Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* Config service allows Config actions from the Impervious node.
*/
service Config {
	/**
	* GetLightningConfig gets the lightning configs for the daemon.
	*/
	rpc GetLightningConfig(GetLightningConfigRequest) returns (GetLightningConfigResponse) {
		option (google.api.http) = {
			get: "/v1/config/lightning"
		};
	}

	/**
	* SaveLightningConfig save the lightning config and restart the daemon.
	*/
	rpc SaveLightningConfig(SaveLightningConfigRequest) returns (SaveLightningConfigResponse) {
		option (google.api.http) = {
			post: "/v1/config/lightning"
			body: "*"
		};
	}

	/**
	* GetIONConfig gets the ion configs for the daemon.
	*/
	rpc GetIONConfig(GetIONConfigRequest) returns (GetIONConfigResponse) {
		option (google.api.http) = {
			get: "/v1/config/ion"
		};
	}

	/**
	* SaveIONConfig will save the ion config and restart the daemon.
	*/
	rpc SaveIONConfig(SaveIONConfigRequest) returns (SaveIONConfigResponse) {
		option (google.api.http) = {
			post: "/v1/config/ion"
			body: "*"
		};
	}
}


message LightningConfig {
	string ip = 1; // the lightning IP address
	string port = 2; // the lightning IP port
	string pubkey = 3; // the lightning pubkey
	string tls_cert = 4; // the lightning tls cert
	string admin_macaroon = 5; // the lightning admin macaroon file
	bool listening = 6; // the lightning admin macaroon file
	string tls_cert_hex = 7; // the lightning tls cert hex instead of file
	string admin_macaroon_hex = 8; // the lightning admin macaroon hex instead of file
}

/**
 * Represents a request to get the lightning config.
 */
message GetLightningConfigRequest {
}

/**
 * Represents a response containing the lightning config.
 */
message GetLightningConfigResponse {
	LightningConfig lightning_config = 1; // The lightning config
}

/**
 * Represents a request to save the lightning config.
 */
message SaveLightningConfigRequest {
	LightningConfig lightning_config = 1; // The lightning config
}

/**
 * Represents a response containing the lightning save config results.
 */
message SaveLightningConfigResponse {
}

message IONConfig {
	string url = 1; // the lightning IP address
	bool active = 2; // the lightning admin macaroon
}

/**
 * Represents a request to get the ion config.
 */
message GetIONConfigRequest {
}

/**
 * Represents a response containing the ion config.
 */
message GetIONConfigResponse {
	IONConfig ion_config = 1; // The ion config
}

/**
 * Represents a request to save the ion config.
 */
message SaveIONConfigRequest {
	IONConfig ion_config = 1; // The ion config
}

/**
 * Represents a response containing the ion save config results.
 */
message SaveIONConfigResponse {
}
