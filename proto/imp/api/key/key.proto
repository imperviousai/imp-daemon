/// Allows for p2p messaging between Impervious nodes
syntax = 'proto3';

package key;

option go_package = "github.com/imperviousai/freeimp/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Key Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* Key service allows key manager actions on the Impervious daemon.
*/
service Key {
	/**
	* InitSeed initializes the master seed for the daemon, and encrypts using the passphrase.
	*/
	rpc InitSeed(InitSeedRequest) returns (InitSeedResponse) {
		option (google.api.http) = {
			post: "/v1/key/initSeed"
			body: "*"
		};
	}

	/**
	* UnlockSeed unlocks the master seed for the daemon, and decrypts using the passphrase.
	*/
	rpc UnlockSeed(UnlockSeedRequest) returns (UnlockSeedResponse) {
		option (google.api.http) = {
			post: "/v1/key/unlockSeed"
			body: "*"
		};
	}

	/**
	* Status gives the status of the daemon db/key.
	*/
	rpc Status(StatusRequest) returns (StatusResponse) {
		option (google.api.http) = {
			get: "/v1/key/status"
		};
	}
}

/**
 * Represents an init seed request to initialize the master seed.
 */
message InitSeedRequest {
	string mnenomic = 1; // The optional mnenomic to set if you already have a seed you want to use with this daemon
	string passphrase = 2; // The passphrase to encrypt the mnenomic, necessary for unlocking the daemon on restarts
}

/**
 * Represents a response back from an init seed request.
 */
message InitSeedResponse {
	string mnenomic = 1; // The mnenomic that the seed was generated from, should be the same if one was passed in
	string api_key = 2; // The api key for the user to send authenticated requests
}

/**
 * Represents an unlock seed request to unlock the master seed.
 */
message UnlockSeedRequest {
	string passphrase = 1; // The passphrase to decrypt the seed, necessary for unlocking the daemon on restarts
}

/**
 * Represents a response back from an unlock seed request.
 */
message UnlockSeedResponse {
}

/**
 * Represents an status request message.
 */
message StatusRequest {
}

/**
 * Represents a response back from a status request.
 */
message StatusResponse {
	string status = 1; // The status of the daemon db/key. NOT_INITIALIZED means an InitSeed() is needed. LOCKED means an UnlockSeed() is needed. READY means the daemon is ready.
}
