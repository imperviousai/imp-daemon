/// Allows for Auth actions for Impervious nodes
syntax = 'proto3';

package auth;

option go_package = "github.com/imperviousai/freeimp/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Auth Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* Auth service allows Auth actions from the Impervious node.
*/
service Auth {
	/**
	* GetAuthKeys gets a list of auth api keys for the daemon.
	*/
	rpc GetAuthKeys(GetAuthKeysRequest) returns (GetAuthKeysResponse) {
		option (google.api.http) = {
			get: "/v1/auth"
		};
	}

	/**
	* CreateAuthKey creates a new api key for authentication into the daemon.
	*/
	rpc CreateAuthKey(CreateAuthKeyRequest) returns (CreateAuthKeyResponse) {
		option (google.api.http) = {
			post: "/v1/auth"
			body: "*"
		};
	}

	/**
	* UpdateAuthKey updates api key details.
	*/
	rpc UpdateAuthKey(UpdateAuthKeyRequest) returns (UpdateAuthKeyResponse) {
		option (google.api.http) = {
			put: "/v1/auth/{id}"
			body: "*"
		};
	}

	/**
	* DeleteAuthKey will delete a specific api key.
	*/
	rpc DeleteAuthKey(DeleteAuthKeyRequest) returns (DeleteAuthKeyResponse) {
		option (google.api.http) = {
			delete: "/v1/auth/{id}"
		};
	}
}


message AuthAPIKey {
	int64 id = 1; // the ID of the API key
	string name = 2; // the name of the API key
	string description = 3; // the description of the API key
}

/**
 * Represents a request to get a list of the auth API keys.
 */
message GetAuthKeysRequest {
}

/**
 * Represents a response the list of auth API keys.
 */
message GetAuthKeysResponse {
	repeated AuthAPIKey keys = 1; // the list of API keys
}

/**
 * Represents a request to create a new auth API key.
 */
message CreateAuthKeyRequest {
	string name = 1; // the name of the API key
	string description = 2; // the description of the API key
}

/**
 * Represents a response containing the new auth API key.
 */
message CreateAuthKeyResponse {
	string key = 1; // the API key itself in UUID string formation
}

/**
 * Represents a request to update an auth API key.
 */
message UpdateAuthKeyRequest {
	int64 id = 1; // the id of the API key to update
	string name = 2; // the name of the API key
	string description = 3; // the description of the API key
}

/**
 * Represents a response containing the update results.
 */
message UpdateAuthKeyResponse {
}

/**
 * Represents a request to delete an auth API key.
 */
message DeleteAuthKeyRequest {
	int64 id = 1; // the id of the API key to delete
}

/**
 * Represents a response containing the deletion results.
 */
message DeleteAuthKeyResponse {
}
