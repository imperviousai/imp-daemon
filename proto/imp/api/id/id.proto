/// Allows for ID actions for Impervious nodes
syntax = 'proto3';

package id;

option go_package = "github.com/imperviousai/imp-daemon/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "ID Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* ID service allows ID actions from the Impervious node.
*/
service ID {
	/**
	* ResolveDID resolves a DID URI and returns a DID document representing the identity.
	*/
	rpc ResolveDID(ResolveDIDRequest) returns (ResolveDIDResponse) {
		option (google.api.http) = {
			post: "/v1/id/resolveDID"
			body: "*"
		};
	}

	/**
	* ListDID lists all of the DIDs stored locally.
	*/
	rpc ListDID(ListDIDRequest) returns (ListDIDResponse) {
		option (google.api.http) = {
			get: "/v1/id/listDID"
		};
	}

	/**
	* CreateDID creates a DID for the user with the given information.
	*/
	rpc CreateDID(CreateDIDRequest) returns (CreateDIDResponse) {
		option (google.api.http) = {
			post: "/v1/id/createDID"
			body: "*"
		};
	}

	/**
	* ImportDID imports a DID document which belongs to the user.
	*/
	rpc ImportDID(ImportDIDRequest) returns (ImportDIDResponse) {
		option (google.api.http) = {
			post: "/v1/id/importDID"
			body: "*"
		};
	}

	/**
	* UpdateDID updates a DID document with a patch document.
	*/
	rpc UpdateDID(UpdateDIDRequest) returns (UpdateDIDResponse) {
		option (google.api.http) = {
			post: "/v1/id/updateDID"
			body: "*"
		};
	}

	/**
	* DeleteDID will delete a specific did.
	*/
	rpc DeleteDID(DeleteDIDRequest) returns (DeleteDIDResponse) {
		option (google.api.http) = {
			delete: "/v1/id/{id}"
		};
	}

	rpc BackupDID(BackupDIDRequest) returns (BackupDIDResponse) {
		option (google.api.http) = {
			post: "/v1/id/{id}/backup"
			body: "*"
		};
	}

	rpc RecoverDID(RecoverDIDRequest) returns (RecoverDIDResponse) {
		option (google.api.http) = {
			post: "/v1/id/recover"
			body: "*"
		};
	}
}

/**
 * Represents a DID recovery kit to back up and restore from later.
 */
message RecoveryKit {
	string did = 1; // The DID this recovery kit is for
	optional string long_form_did = 2; // The long form DID with the document/patches encoded into the DID. Only necessary for PEER.
	uint32 did_derivation_path = 3; // The parent derivation path for the DID
	repeated uint32 key_derivations = 4; // Each key derivation path created under a DID
	string seed = 5; // The seed words backing the identity
}

/**
 * Represents a request to resolve a DID into a DID document.
 */
message ResolveDIDRequest {
	string did = 1; // The DID URI to resolve
}

/**
 * Represents a response containing the resolved DID document of the passed in DID URI.
 */
message ResolveDIDResponse {
	string document = 1; // The resolved DID document
	string long_form_did = 2; // The long form DID string with `initialState` and/or `signedIetfJsonPatch` query parameters encoded inline.
}

/**
 * Represents a request to store a DID document.
 */
message StoreDIDRequest {
	string document = 1; // The DID document to store
}

/**
 * Represents a response containing the resolved ID of the passed in DID document.
 */
message StoreDIDResponse {
	string id = 1; // The resolved DID document ID.
}

/**
 * Represents a request to list DIDs stored locally.
 */
message ListDIDRequest {
}

/**
 * Represents a response containing a list of the stored DIDs.
 */
message ListDIDResponse {
	repeated string documents = 1; // The stored DID documents
}

message ServiceEndpoint {
	string id = 1; // The ID of the service endpoint
	string type = 2; // The type of the service endpoint
	string serviceEndpoint = 3; // The serviceEndpoint URI
}

/**
 * Represents a request to create a DID document.
 */
message CreateDIDRequest {
	string type = 1; // The DID type to create
	repeated ServiceEndpoint serviceEndpoints = 2; // A list of service endpoints to create the DID with
}

/**
 * Represents a response the document for the created DID.
 */
message CreateDIDResponse {
	string document = 1; // The created DID document ID.
	string long_form_did = 2; // The long form DID string with `initialState` and/or `signedIetfJsonPatch` query parameters encoded inline.
	RecoveryKit recovery_kit = 3; // The recovery kit of the created DID
}

/**
 * Represents a request to import a user's DID document.
 */
message ImportDIDRequest {
	string document = 1; // The DID document to import, optional if `long_form_did` is present.
	string long_form_did = 2; // The long form DID string with `initialState` and/or `signedIetfJsonPatch` query parameters encoded inline.
}

/**
 * Represents a response after importing a user's DID document.
 */
message ImportDIDResponse {

}

/**
 * Represents a request to update a DID document.
 */
message UpdateDIDRequest {
	string document = 1; // The DID document patch to use as the update
}

/**
 * Represents a response after updating a DID document.
 */
message UpdateDIDResponse {
	string document = 1; // The updated DID document ID.
	string long_form_did = 2; // The long form DID string with `initialState` and/or `signedIetfJsonPatch` query parameters encoded inline.
	optional RecoveryKit recovery_kit = 3; // The recovery kit of the updated DID. Only needed on Peer DIDs.
}

/**
 * Represents a request to delete a did.
 */
message DeleteDIDRequest {
	string id = 1; // The ID of the did to delete
}

/**
 * Represents a response containing the did deletion event.
 */
message DeleteDIDResponse {
}

/**
 * Represents a request to backup a did.
 */
message BackupDIDRequest {
	string id = 1; // The ID of the did to back up
}

/**
 * Represents a response containing the did backup recovery kit.
 */
message BackupDIDResponse {
	RecoveryKit recovery_kit = 1; // The recovery kit of the DID.
}

/**
 * Represents a request to recover a did with the recovery kit.
 */
message RecoverDIDRequest {
	RecoveryKit recovery_kit = 1; // The DID to recover.
	optional string passphrase = 2; // If using the recovery kit to also init the seed with the passed in mnenomic, provide a passphrase to encrypt DB/seed with. Not needed if `id.InitSeed` has already ran before.
}

/**
 * Represents a response containing the did recovery result.
 */
message RecoverDIDResponse {

}
