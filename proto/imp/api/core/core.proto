/// Allows for p2p messaging between Impervious nodes
syntax = 'proto3';

package core;

option go_package = "github.com/imperviousai/imp-daemon/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Core Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* Core service allows general core actions on the Impervious daemon.
*/
service Core {
	/**
	* Status gives the status of various services the daemon is running.
	*/
	rpc Status(StatusRequest) returns (StatusResponse) {
		option (google.api.http) = {
			get: "/v1/core/status"
		};
	}
}

/**
 * Represents a status request message.
 */
message StatusRequest {
}

message KeyStatus {
	string status = 1; // The status of the daemon db/key. NOT_INITIALIZED means an InitSeed() is needed. LOCKED means an UnlockSeed() is needed. READY means the daemon is ready.
}

message NodeStatus {
	string pubkey = 1; // The pubkey of the node the status is meant for
	bool active = 2; // The active status of this node.
}

message LightningStatus {
	repeated NodeStatus node_status_list = 1;
}

/**
 * Represents a response back from a status request.
 */
message StatusResponse {
	KeyStatus key_status = 1; // KeyStatus information
	LightningStatus lightning_status = 2; // LightningStatus information
}
