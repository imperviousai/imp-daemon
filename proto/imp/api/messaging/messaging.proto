/// Allows for p2p messaging between Impervious nodes
syntax = 'proto3';

package messaging;

option go_package = "github.com/imperviousai/freeimp/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Messaging Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* Messaging service allows for p2p messaging between Impervious nodes.
*/
service Messaging {
	/**
	* SendMessage sends a text message to another node.
	*/
	rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
		option (google.api.http) = {
			post: "/v1/message/send"
			body: "*"
		};
	}

	/**
	* SendMessageV2 sends a byte-encoded json DIDComm message to another DID.
	*/
	rpc SendMessageV2(SendMessageV2Request) returns (SendMessageV2Response) {
		option (google.api.http) = {
			post: "/v2/message/send"
			body: "*"
		};
	}

	/**
	* SaveMessageV2 saves a byte-encoded json DIDComm message locally.
	*/
	rpc SaveMessageV2(SaveMessageV2Request) returns (SaveMessageV2Response) {
		option (google.api.http) = {
			post: "/v2/message/save"
			body: "*"
		};
	}

	/**
	* GetMessageList gets messages from the daemon.
	*/
	rpc GetMessageList(GetMessageListRequest) returns (GetMessageListResponse) {
		option (google.api.http) = {
			get: "/v1/message"
		};
	}

	/**
	* DeleteMessage will delete a specific message.
	*/
	rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
		option (google.api.http) = {
			delete: "/v1/message/{id}"
		};
	}

	/**
	* DeleteGroupMessage will delete all messages from the same group.
	*/
	rpc DeleteGroupMessage(DeleteGroupMessageRequest) returns (DeleteGroupMessageResponse) {
		option (google.api.http) = {
			delete: "/v1/message_group/{group_id}"
		};
	}
}

/**
 * Represents a message send to another DID
 */
message SendMessageRequest {
	string msg = 1; // the simple string message to be sent
	string did = 2; // The other DID
	int64 amount = 3; // Optional satoshi amount to send along with the message, defaults to 1 sat.
	string reply_to_id = 4; // Optional ID of the message that this message is replying to.
}

/**
 * Represents a response back from a sent message
 */
message SendMessageResponse {
	string id = 1; // returned message ID
}

/**
 * Represents the preferences for sending messages
 */
message MessageSettings {
	repeated string protocol_preferences = 1; // ordered list of protocol preferences to send messages down
}


/**
 * Represents a message send to another DID
 */
message SendMessageV2Request {
	string body = 1; // the body of the DIDcomm message, json structure depends on `type` field.
	string type = 2; // the type of the DIDcomm message, will determine body json structure
	string did = 3; // The other DID to send the message to. Deprecated for `recipient_list` / `group_id`.
	int64 amount = 4; // Optional satoshi amount to send along with the message, defaults to 1 sat.
	string reply_to_id = 5; // Optional ID of the message that this message is replying to.
	MessageSettings message_settings = 6; // Optional message settings when sending
	repeated string recipient_list = 7; // The list of recipient dids to send the message to. Cannot use with `group_id` / `did` parameters.
	string group_id = 8; // The `group_id` to send the message to, instead of a list of recipient dids. Cannot use with `recipient_list` or `did` parameters.
}

/**
 * Represents a response back from a sent message
 */
message SendMessageV2Response {
	string id = 1; // returned message ID.
}

/**
 * Represents a message to save locally. Useful if it was sent out of band.
 */
message SaveMessageV2Request {
	string body = 1; // the body of the DIDcomm message, json structure depends on `type` field.
	string type = 2; // the type of the DIDcomm message, will determine body json structure
	string did = 3; // The DID this message sent to. It may be the user's if it was received (instead of sent) out of band. Deprecated for `recipient_list` / `group_id`.
	string from = 4; // The DID this sent from. It may be the other DID if it was received out of band.
	string reply_to_id = 5; // Optional ID of the message that this message is replying to.
	repeated string recipient_list = 7; // The list of recipient dids the message sent from. Cannot use with `group_id` / `did` parameters.
	string group_id = 8; // The `group_id` the message sent from. Cannot use with `recipient_list` or `did` parameters.
}

/**
 * Represents a response back from a saved message
 */
message SaveMessageV2Response {
	string id = 1; // returned message ID.
}

message Message {
	string id = 1; // The ID of the message
	string type = 2; // The DIDComm type of message
	repeated string recipients = 3; // The recipients the message is for
	string data = 4; // The JSON encoded DIDComm data message
	string transport = 5; // The transport type (https/lightning)
	string group_id = 6; // The group id for the recipients
	repeated MessageEvent events = 7; // The events for the message
}

message MessageEvent {
	string id = 1; // The ID of the message event
	string MessageId = 2; // The ID of the message this event represents
	string DID = 3; // The ID of the message this event represents
	string Type = 4; // The ID of the message this event represents
	google.protobuf.Timestamp EventTime = 5; // The time the event took place
}

/**
 * Represents a message get a message list
 */
message GetMessageListRequest {
	string id = 1; // The ID of the message
	string type = 2; // The type of the message
}

/**
 * Represents a response back containing a message list
 */
message GetMessageListResponse {
	repeated Message messages = 1; // The message list
}

/**
 * Represents a request to delete a message.
 */
message DeleteMessageRequest {
	string id = 1; // The ID of the message to delete
}

/**
 * Represents a response containing the message deletion event.
 */
message DeleteMessageResponse {
}

/**
 * Represents a request to delete a group message.
 */
message DeleteGroupMessageRequest {
	string group_id = 1; // The group ID of the messages to delete
}

/**
 * Represents a response containing the message deletion event.
 */
message DeleteGroupMessageResponse {
}
