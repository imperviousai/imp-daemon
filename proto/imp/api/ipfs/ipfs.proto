/// Allows for IPFS actions for Impervious nodes
syntax = 'proto3';

package ipfs;

option go_package = "github.com/imperviousai/freeimp/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "IPFS Services";
		version: "1.0";
		contact: {
			name: "Impervious AI";
			url: "https://impervious.ai";
		};
	};
	external_docs: {
		url: "https://docs.impervious.ai";
		description: "Documentation on IMP";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "api_key";
			value: {
				type: 2;
				description: "An API key generated by the daemon for authentication";
				name: "Grpc-Metadata-X-API-KEY";
				in: 3;
			}
		}
	}
	security: {
		security_requirement: {
			key: "api_key";
		}
	}
};

/**
* IPFS service allows IPFS actions from the Impervious node.
*/
service IPFS {
	/**
	* AddFile will add data to a file and pin to IPFS to return it's CID.
	*/
	rpc AddFile(AddFileRequest) returns (AddFileResponse) {
		option (google.api.http) = {
			post: "/v1/ipfs/add"
			body: "*"
		};
	}

	/**
	* RetrieveFile will retrieve a file from the IPFS network.
	*/
	rpc GetFile(GetFileRequest) returns (GetFileResponse) {
		option (google.api.http) = {
			get: "/v1/ipfs/{protocol}/{cid}"
			additional_bindings {
				get: "/v1/ipfs/{cid}"
			}
		};
	}

	/**
	* ListFiles lists all of the files pinned locally.
	*/
	rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
		option (google.api.http) = {
			get: "/v1/ipfs/list"
		};
	}
}

/**
 * Represents a request to add a file to IPFS.
 */
message AddFileRequest {
	string name = 1; // The name of the file to add
	bytes data = 2; // The data content of the file to add
	bool updatable = 3; // Whether or not the file should be updatable
}

/**
 * Represents a response containing the content ID of the added IPFS file.
 */
message AddFileResponse {
	string cid = 1; // The content ID of the added file
}

/**
 * Represents a request to get a file from IPFS.
 */
message GetFileRequest {
	string protocol = 1; // The optional ipfs protocol to use (ex ipns or ipfs, default ipfs)
	string cid = 2; // The cid of the file to get
}

/**
 * Represents a response containing the contents of the retrieved file.
 */
message GetFileResponse {
	bytes data = 1; // The contents of the file
}

/**
 * Represents a request to list files stored locally.
 */
message ListFilesRequest {
}

/**
 * Represents a response containing a list of the files.
 */
message ListFilesResponse {
	repeated string files = 1; // The stored files
}
