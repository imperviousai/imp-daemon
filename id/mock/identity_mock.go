// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/id (interfaces: Identity)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	did "github.com/hyperledger/aries-framework-go/pkg/doc/did"
	id "github.com/imperviousai/imp-daemon/id"
)

// MockIdentity is a mock of Identity interface.
type MockIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityMockRecorder
}

// MockIdentityMockRecorder is the mock recorder for MockIdentity.
type MockIdentityMockRecorder struct {
	mock *MockIdentity
}

// NewMockIdentity creates a new mock instance.
func NewMockIdentity(ctrl *gomock.Controller) *MockIdentity {
	mock := &MockIdentity{ctrl: ctrl}
	mock.recorder = &MockIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentity) EXPECT() *MockIdentityMockRecorder {
	return m.recorder
}

// BackupDID mocks base method.
func (m *MockIdentity) BackupDID(arg0 string) (*id.DIDUpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupDID", arg0)
	ret0, _ := ret[0].(*id.DIDUpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupDID indicates an expected call of BackupDID.
func (mr *MockIdentityMockRecorder) BackupDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupDID", reflect.TypeOf((*MockIdentity)(nil).BackupDID), arg0)
}

// CreateDID mocks base method.
func (m *MockIdentity) CreateDID(arg0 string, arg1 []id.Service) (*id.DIDUpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDID", arg0, arg1)
	ret0, _ := ret[0].(*id.DIDUpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDID indicates an expected call of CreateDID.
func (mr *MockIdentityMockRecorder) CreateDID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDID", reflect.TypeOf((*MockIdentity)(nil).CreateDID), arg0, arg1)
}

// DeleteDID mocks base method.
func (m *MockIdentity) DeleteDID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDID indicates an expected call of DeleteDID.
func (mr *MockIdentityMockRecorder) DeleteDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDID", reflect.TypeOf((*MockIdentity)(nil).DeleteDID), arg0)
}

// GetLastUserDID mocks base method.
func (m *MockIdentity) GetLastUserDID() (*did.Doc, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUserDID")
	ret0, _ := ret[0].(*did.Doc)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLastUserDID indicates an expected call of GetLastUserDID.
func (mr *MockIdentityMockRecorder) GetLastUserDID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUserDID", reflect.TypeOf((*MockIdentity)(nil).GetLastUserDID))
}

// GetUserDIDs mocks base method.
func (m *MockIdentity) GetUserDIDs() ([]did.Doc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDIDs")
	ret0, _ := ret[0].([]did.Doc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDIDs indicates an expected call of GetUserDIDs.
func (mr *MockIdentityMockRecorder) GetUserDIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDIDs", reflect.TypeOf((*MockIdentity)(nil).GetUserDIDs))
}

// ImportDID mocks base method.
func (m *MockIdentity) ImportDID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportDID indicates an expected call of ImportDID.
func (mr *MockIdentityMockRecorder) ImportDID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDID", reflect.TypeOf((*MockIdentity)(nil).ImportDID), arg0, arg1)
}

// ListDIDs mocks base method.
func (m *MockIdentity) ListDIDs() ([]*did.Doc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDIDs")
	ret0, _ := ret[0].([]*did.Doc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDIDs indicates an expected call of ListDIDs.
func (mr *MockIdentityMockRecorder) ListDIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDIDs", reflect.TypeOf((*MockIdentity)(nil).ListDIDs))
}

// RecoverDID mocks base method.
func (m *MockIdentity) RecoverDID(arg0 *id.DIDUpdateInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverDID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverDID indicates an expected call of RecoverDID.
func (mr *MockIdentityMockRecorder) RecoverDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverDID", reflect.TypeOf((*MockIdentity)(nil).RecoverDID), arg0)
}

// ResolveDID mocks base method.
func (m *MockIdentity) ResolveDID(arg0 string) (*did.Doc, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDID", arg0)
	ret0, _ := ret[0].(*did.Doc)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveDID indicates an expected call of ResolveDID.
func (mr *MockIdentityMockRecorder) ResolveDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDID", reflect.TypeOf((*MockIdentity)(nil).ResolveDID), arg0)
}

// SignWithDID mocks base method.
func (m *MockIdentity) SignWithDID(arg0 string, arg1 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWithDID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignWithDID indicates an expected call of SignWithDID.
func (mr *MockIdentityMockRecorder) SignWithDID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWithDID", reflect.TypeOf((*MockIdentity)(nil).SignWithDID), arg0, arg1)
}

// UpdateDID mocks base method.
func (m *MockIdentity) UpdateDID(arg0 string) (*id.DIDUpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDID", arg0)
	ret0, _ := ret[0].(*id.DIDUpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDID indicates an expected call of UpdateDID.
func (mr *MockIdentityMockRecorder) UpdateDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDID", reflect.TypeOf((*MockIdentity)(nil).UpdateDID), arg0)
}

// VerifyFromDID mocks base method.
func (m *MockIdentity) VerifyFromDID(arg0, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyFromDID", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyFromDID indicates an expected call of VerifyFromDID.
func (mr *MockIdentityMockRecorder) VerifyFromDID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyFromDID", reflect.TypeOf((*MockIdentity)(nil).VerifyFromDID), arg0, arg1)
}
