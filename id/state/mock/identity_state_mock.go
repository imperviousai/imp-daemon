// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/id/state (interfaces: IdentityState)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/imperviousai/imp-daemon/id/state"
)

// MockIdentityState is a mock of IdentityState interface.
type MockIdentityState struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityStateMockRecorder
}

// MockIdentityStateMockRecorder is the mock recorder for MockIdentityState.
type MockIdentityStateMockRecorder struct {
	mock *MockIdentityState
}

// NewMockIdentityState creates a new mock instance.
func NewMockIdentityState(ctrl *gomock.Controller) *MockIdentityState {
	mock := &MockIdentityState{ctrl: ctrl}
	mock.recorder = &MockIdentityStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityState) EXPECT() *MockIdentityStateMockRecorder {
	return m.recorder
}

// DeleteID mocks base method.
func (m *MockIdentityState) DeleteID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteID indicates an expected call of DeleteID.
func (mr *MockIdentityStateMockRecorder) DeleteID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteID", reflect.TypeOf((*MockIdentityState)(nil).DeleteID), arg0)
}

// FindID mocks base method.
func (m *MockIdentityState) FindID(arg0 string) (*state.IdState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindID", arg0)
	ret0, _ := ret[0].(*state.IdState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindID indicates an expected call of FindID.
func (mr *MockIdentityStateMockRecorder) FindID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindID", reflect.TypeOf((*MockIdentityState)(nil).FindID), arg0)
}

// FindOwnDID mocks base method.
func (m *MockIdentityState) FindOwnDID() ([]*state.IdState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOwnDID")
	ret0, _ := ret[0].([]*state.IdState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOwnDID indicates an expected call of FindOwnDID.
func (mr *MockIdentityStateMockRecorder) FindOwnDID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOwnDID", reflect.TypeOf((*MockIdentityState)(nil).FindOwnDID))
}

// GetDIDKeyId mocks base method.
func (m *MockIdentityState) GetDIDKeyId(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDIDKeyId", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDIDKeyId indicates an expected call of GetDIDKeyId.
func (mr *MockIdentityStateMockRecorder) GetDIDKeyId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDIDKeyId", reflect.TypeOf((*MockIdentityState)(nil).GetDIDKeyId), arg0)
}

// ListIDs mocks base method.
func (m *MockIdentityState) ListIDs() ([]*state.IdState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDs")
	ret0, _ := ret[0].([]*state.IdState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIDs indicates an expected call of ListIDs.
func (mr *MockIdentityStateMockRecorder) ListIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDs", reflect.TypeOf((*MockIdentityState)(nil).ListIDs))
}

// SaveID mocks base method.
func (m *MockIdentityState) SaveID(arg0, arg1 string, arg2 bool, arg3 int64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveID indicates an expected call of SaveID.
func (mr *MockIdentityStateMockRecorder) SaveID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveID", reflect.TypeOf((*MockIdentityState)(nil).SaveID), arg0, arg1, arg2, arg3, arg4)
}

// UpdateID mocks base method.
func (m *MockIdentityState) UpdateID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateID indicates an expected call of UpdateID.
func (mr *MockIdentityStateMockRecorder) UpdateID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateID", reflect.TypeOf((*MockIdentityState)(nil).UpdateID), arg0, arg1)
}
