// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/ipfs (interfaces: IPFS)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPFS is a mock of IPFS interface.
type MockIPFS struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSMockRecorder
}

// MockIPFSMockRecorder is the mock recorder for MockIPFS.
type MockIPFSMockRecorder struct {
	mock *MockIPFS
}

// NewMockIPFS creates a new mock instance.
func NewMockIPFS(ctrl *gomock.Controller) *MockIPFS {
	mock := &MockIPFS{ctrl: ctrl}
	mock.recorder = &MockIPFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFS) EXPECT() *MockIPFSMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockIPFS) AddFile(arg0 []byte, arg1 string, arg2 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockIPFSMockRecorder) AddFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockIPFS)(nil).AddFile), arg0, arg1, arg2)
}

// ListFiles mocks base method.
func (m *MockIPFS) ListFiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockIPFSMockRecorder) ListFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockIPFS)(nil).ListFiles))
}

// RetrieveFile mocks base method.
func (m *MockIPFS) RetrieveFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFile indicates an expected call of RetrieveFile.
func (mr *MockIPFSMockRecorder) RetrieveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFile", reflect.TypeOf((*MockIPFS)(nil).RetrieveFile), arg0)
}

// Stop mocks base method.
func (m *MockIPFS) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIPFSMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIPFS)(nil).Stop))
}
