// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ipfs/interface-go-ipfs-core (interfaces: CoreAPI)

// Package ipfs_mock is a generated GoMock package.
package ipfs_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	format "github.com/ipfs/go-ipld-format"
	iface "github.com/ipfs/interface-go-ipfs-core"
	options "github.com/ipfs/interface-go-ipfs-core/options"
	path "github.com/ipfs/interface-go-ipfs-core/path"
)

// MockCoreAPI is a mock of CoreAPI interface.
type MockCoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCoreAPIMockRecorder
}

// MockCoreAPIMockRecorder is the mock recorder for MockCoreAPI.
type MockCoreAPIMockRecorder struct {
	mock *MockCoreAPI
}

// NewMockCoreAPI creates a new mock instance.
func NewMockCoreAPI(ctrl *gomock.Controller) *MockCoreAPI {
	mock := &MockCoreAPI{ctrl: ctrl}
	mock.recorder = &MockCoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreAPI) EXPECT() *MockCoreAPIMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockCoreAPI) Block() iface.BlockAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block")
	ret0, _ := ret[0].(iface.BlockAPI)
	return ret0
}

// Block indicates an expected call of Block.
func (mr *MockCoreAPIMockRecorder) Block() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockCoreAPI)(nil).Block))
}

// Dag mocks base method.
func (m *MockCoreAPI) Dag() iface.APIDagService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dag")
	ret0, _ := ret[0].(iface.APIDagService)
	return ret0
}

// Dag indicates an expected call of Dag.
func (mr *MockCoreAPIMockRecorder) Dag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dag", reflect.TypeOf((*MockCoreAPI)(nil).Dag))
}

// Dht mocks base method.
func (m *MockCoreAPI) Dht() iface.DhtAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dht")
	ret0, _ := ret[0].(iface.DhtAPI)
	return ret0
}

// Dht indicates an expected call of Dht.
func (mr *MockCoreAPIMockRecorder) Dht() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dht", reflect.TypeOf((*MockCoreAPI)(nil).Dht))
}

// Key mocks base method.
func (m *MockCoreAPI) Key() iface.KeyAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(iface.KeyAPI)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockCoreAPIMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockCoreAPI)(nil).Key))
}

// Name mocks base method.
func (m *MockCoreAPI) Name() iface.NameAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(iface.NameAPI)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCoreAPIMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCoreAPI)(nil).Name))
}

// Object mocks base method.
func (m *MockCoreAPI) Object() iface.ObjectAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object")
	ret0, _ := ret[0].(iface.ObjectAPI)
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockCoreAPIMockRecorder) Object() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockCoreAPI)(nil).Object))
}

// Pin mocks base method.
func (m *MockCoreAPI) Pin() iface.PinAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin")
	ret0, _ := ret[0].(iface.PinAPI)
	return ret0
}

// Pin indicates an expected call of Pin.
func (mr *MockCoreAPIMockRecorder) Pin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockCoreAPI)(nil).Pin))
}

// PubSub mocks base method.
func (m *MockCoreAPI) PubSub() iface.PubSubAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSub")
	ret0, _ := ret[0].(iface.PubSubAPI)
	return ret0
}

// PubSub indicates an expected call of PubSub.
func (mr *MockCoreAPIMockRecorder) PubSub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSub", reflect.TypeOf((*MockCoreAPI)(nil).PubSub))
}

// ResolveNode mocks base method.
func (m *MockCoreAPI) ResolveNode(arg0 context.Context, arg1 path.Path) (format.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNode", arg0, arg1)
	ret0, _ := ret[0].(format.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveNode indicates an expected call of ResolveNode.
func (mr *MockCoreAPIMockRecorder) ResolveNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNode", reflect.TypeOf((*MockCoreAPI)(nil).ResolveNode), arg0, arg1)
}

// ResolvePath mocks base method.
func (m *MockCoreAPI) ResolvePath(arg0 context.Context, arg1 path.Path) (path.Resolved, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePath", arg0, arg1)
	ret0, _ := ret[0].(path.Resolved)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolvePath indicates an expected call of ResolvePath.
func (mr *MockCoreAPIMockRecorder) ResolvePath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePath", reflect.TypeOf((*MockCoreAPI)(nil).ResolvePath), arg0, arg1)
}

// Swarm mocks base method.
func (m *MockCoreAPI) Swarm() iface.SwarmAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Swarm")
	ret0, _ := ret[0].(iface.SwarmAPI)
	return ret0
}

// Swarm indicates an expected call of Swarm.
func (mr *MockCoreAPIMockRecorder) Swarm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swarm", reflect.TypeOf((*MockCoreAPI)(nil).Swarm))
}

// Unixfs mocks base method.
func (m *MockCoreAPI) Unixfs() iface.UnixfsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unixfs")
	ret0, _ := ret[0].(iface.UnixfsAPI)
	return ret0
}

// Unixfs indicates an expected call of Unixfs.
func (mr *MockCoreAPIMockRecorder) Unixfs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unixfs", reflect.TypeOf((*MockCoreAPI)(nil).Unixfs))
}

// WithOptions mocks base method.
func (m *MockCoreAPI) WithOptions(arg0 ...options.ApiOption) (iface.CoreAPI, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithOptions", varargs...)
	ret0, _ := ret[0].(iface.CoreAPI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithOptions indicates an expected call of WithOptions.
func (mr *MockCoreAPIMockRecorder) WithOptions(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOptions", reflect.TypeOf((*MockCoreAPI)(nil).WithOptions), arg0...)
}
