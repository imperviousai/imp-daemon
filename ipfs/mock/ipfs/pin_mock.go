// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ipfs/interface-go-ipfs-core (interfaces: Pin)

// Package ipfs_mock is a generated GoMock package.
package ipfs_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	path "github.com/ipfs/interface-go-ipfs-core/path"
)

// MockPin is a mock of Pin interface.
type MockPin struct {
	ctrl     *gomock.Controller
	recorder *MockPinMockRecorder
}

// MockPinMockRecorder is the mock recorder for MockPin.
type MockPinMockRecorder struct {
	mock *MockPin
}

// NewMockPin creates a new mock instance.
func NewMockPin(ctrl *gomock.Controller) *MockPin {
	mock := &MockPin{ctrl: ctrl}
	mock.recorder = &MockPinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPin) EXPECT() *MockPinMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockPin) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockPinMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockPin)(nil).Err))
}

// Path mocks base method.
func (m *MockPin) Path() path.Resolved {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(path.Resolved)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockPinMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockPin)(nil).Path))
}

// Type mocks base method.
func (m *MockPin) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockPinMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPin)(nil).Type))
}
