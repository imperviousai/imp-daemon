// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ipfs/interface-go-ipfs-core (interfaces: PinAPI)

// Package ipfs_mock is a generated GoMock package.
package ipfs_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	iface "github.com/ipfs/interface-go-ipfs-core"
	options "github.com/ipfs/interface-go-ipfs-core/options"
	path "github.com/ipfs/interface-go-ipfs-core/path"
)

// MockPinAPI is a mock of PinAPI interface.
type MockPinAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPinAPIMockRecorder
}

// MockPinAPIMockRecorder is the mock recorder for MockPinAPI.
type MockPinAPIMockRecorder struct {
	mock *MockPinAPI
}

// NewMockPinAPI creates a new mock instance.
func NewMockPinAPI(ctrl *gomock.Controller) *MockPinAPI {
	mock := &MockPinAPI{ctrl: ctrl}
	mock.recorder = &MockPinAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinAPI) EXPECT() *MockPinAPIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPinAPI) Add(arg0 context.Context, arg1 path.Path, arg2 ...options.PinAddOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPinAPIMockRecorder) Add(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPinAPI)(nil).Add), varargs...)
}

// IsPinned mocks base method.
func (m *MockPinAPI) IsPinned(arg0 context.Context, arg1 path.Path, arg2 ...options.PinIsPinnedOption) (string, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsPinned", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsPinned indicates an expected call of IsPinned.
func (mr *MockPinAPIMockRecorder) IsPinned(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPinned", reflect.TypeOf((*MockPinAPI)(nil).IsPinned), varargs...)
}

// Ls mocks base method.
func (m *MockPinAPI) Ls(arg0 context.Context, arg1 ...options.PinLsOption) (<-chan iface.Pin, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ls", varargs...)
	ret0, _ := ret[0].(<-chan iface.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ls indicates an expected call of Ls.
func (mr *MockPinAPIMockRecorder) Ls(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ls", reflect.TypeOf((*MockPinAPI)(nil).Ls), varargs...)
}

// Rm mocks base method.
func (m *MockPinAPI) Rm(arg0 context.Context, arg1 path.Path, arg2 ...options.PinRmOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rm", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rm indicates an expected call of Rm.
func (mr *MockPinAPIMockRecorder) Rm(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rm", reflect.TypeOf((*MockPinAPI)(nil).Rm), varargs...)
}

// Update mocks base method.
func (m *MockPinAPI) Update(arg0 context.Context, arg1, arg2 path.Path, arg3 ...options.PinUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPinAPIMockRecorder) Update(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPinAPI)(nil).Update), varargs...)
}

// Verify mocks base method.
func (m *MockPinAPI) Verify(arg0 context.Context) (<-chan iface.PinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(<-chan iface.PinStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockPinAPIMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPinAPI)(nil).Verify), arg0)
}
