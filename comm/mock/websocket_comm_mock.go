// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/comm (interfaces: WebsocketComm)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comm "github.com/imperviousai/imp-daemon/comm"
)

// MockWebsocketComm is a mock of WebsocketComm interface.
type MockWebsocketComm struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketCommMockRecorder
}

// MockWebsocketCommMockRecorder is the mock recorder for MockWebsocketComm.
type MockWebsocketCommMockRecorder struct {
	mock *MockWebsocketComm
}

// NewMockWebsocketComm creates a new mock instance.
func NewMockWebsocketComm(ctrl *gomock.Controller) *MockWebsocketComm {
	mock := &MockWebsocketComm{ctrl: ctrl}
	mock.recorder = &MockWebsocketCommMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketComm) EXPECT() *MockWebsocketCommMockRecorder {
	return m.recorder
}

// CheckMsg mocks base method.
func (m *MockWebsocketComm) CheckMsg(arg0 string, arg1 *comm.DIDCommMsg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMsg", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckMsg indicates an expected call of CheckMsg.
func (mr *MockWebsocketCommMockRecorder) CheckMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMsg", reflect.TypeOf((*MockWebsocketComm)(nil).CheckMsg), arg0, arg1)
}

// SendData mocks base method.
func (m *MockWebsocketComm) SendData(arg0 string, arg1 *comm.DIDCommMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendData indicates an expected call of SendData.
func (mr *MockWebsocketCommMockRecorder) SendData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendData", reflect.TypeOf((*MockWebsocketComm)(nil).SendData), arg0, arg1)
}

// ServeHTTP mocks base method.
func (m *MockWebsocketComm) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockWebsocketCommMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockWebsocketComm)(nil).ServeHTTP), arg0, arg1)
}

// Stop mocks base method.
func (m *MockWebsocketComm) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockWebsocketCommMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWebsocketComm)(nil).Stop))
}
