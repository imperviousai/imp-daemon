// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/comm (interfaces: DIDCommTransport)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comm "github.com/imperviousai/freeimp/comm"
)

// MockDIDCommTransport is a mock of DIDCommTransport interface.
type MockDIDCommTransport struct {
	ctrl     *gomock.Controller
	recorder *MockDIDCommTransportMockRecorder
}

// MockDIDCommTransportMockRecorder is the mock recorder for MockDIDCommTransport.
type MockDIDCommTransportMockRecorder struct {
	mock *MockDIDCommTransport
}

// NewMockDIDCommTransport creates a new mock instance.
func NewMockDIDCommTransport(ctrl *gomock.Controller) *MockDIDCommTransport {
	mock := &MockDIDCommTransport{ctrl: ctrl}
	mock.recorder = &MockDIDCommTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDIDCommTransport) EXPECT() *MockDIDCommTransportMockRecorder {
	return m.recorder
}

// CheckMsg mocks base method.
func (m *MockDIDCommTransport) CheckMsg(arg0 string, arg1 *comm.DIDCommMsg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMsg", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckMsg indicates an expected call of CheckMsg.
func (mr *MockDIDCommTransportMockRecorder) CheckMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMsg", reflect.TypeOf((*MockDIDCommTransport)(nil).CheckMsg), arg0, arg1)
}

// SendData mocks base method.
func (m *MockDIDCommTransport) SendData(arg0 string, arg1 *comm.DIDCommMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendData indicates an expected call of SendData.
func (mr *MockDIDCommTransportMockRecorder) SendData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendData", reflect.TypeOf((*MockDIDCommTransport)(nil).SendData), arg0, arg1)
}
