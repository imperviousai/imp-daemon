// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/comm (interfaces: HttpComm)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comm "github.com/imperviousai/imp-daemon/comm"
)

// MockHttpComm is a mock of HttpComm interface.
type MockHttpComm struct {
	ctrl     *gomock.Controller
	recorder *MockHttpCommMockRecorder
}

// MockHttpCommMockRecorder is the mock recorder for MockHttpComm.
type MockHttpCommMockRecorder struct {
	mock *MockHttpComm
}

// NewMockHttpComm creates a new mock instance.
func NewMockHttpComm(ctrl *gomock.Controller) *MockHttpComm {
	mock := &MockHttpComm{ctrl: ctrl}
	mock.recorder = &MockHttpCommMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpComm) EXPECT() *MockHttpCommMockRecorder {
	return m.recorder
}

// CheckMsg mocks base method.
func (m *MockHttpComm) CheckMsg(arg0 string, arg1 *comm.DIDCommMsg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMsg", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckMsg indicates an expected call of CheckMsg.
func (mr *MockHttpCommMockRecorder) CheckMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMsg", reflect.TypeOf((*MockHttpComm)(nil).CheckMsg), arg0, arg1)
}

// SendData mocks base method.
func (m *MockHttpComm) SendData(arg0 string, arg1 *comm.DIDCommMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendData indicates an expected call of SendData.
func (mr *MockHttpCommMockRecorder) SendData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendData", reflect.TypeOf((*MockHttpComm)(nil).SendData), arg0, arg1)
}

// ServeHTTP mocks base method.
func (m *MockHttpComm) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockHttpCommMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHttpComm)(nil).ServeHTTP), arg0, arg1)
}

// Stop mocks base method.
func (m *MockHttpComm) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockHttpCommMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHttpComm)(nil).Stop))
}
