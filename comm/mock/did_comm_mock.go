// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/comm (interfaces: DIDComm)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comm "github.com/imperviousai/imp-daemon/comm"
	id "github.com/imperviousai/imp-daemon/id"
)

// MockDIDComm is a mock of DIDComm interface.
type MockDIDComm struct {
	ctrl     *gomock.Controller
	recorder *MockDIDCommMockRecorder
}

// MockDIDCommMockRecorder is the mock recorder for MockDIDComm.
type MockDIDCommMockRecorder struct {
	mock *MockDIDComm
}

// NewMockDIDComm creates a new mock instance.
func NewMockDIDComm(ctrl *gomock.Controller) *MockDIDComm {
	mock := &MockDIDComm{ctrl: ctrl}
	mock.recorder = &MockDIDCommMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDIDComm) EXPECT() *MockDIDCommMockRecorder {
	return m.recorder
}

// CheckSendMsg mocks base method.
func (m *MockDIDComm) CheckSendMsg(arg0 *comm.DIDCommMsg, arg1 int64, arg2 []id.Service, arg3 *comm.MessageSettings) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSendMsg", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSendMsg indicates an expected call of CheckSendMsg.
func (mr *MockDIDCommMockRecorder) CheckSendMsg(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSendMsg", reflect.TypeOf((*MockDIDComm)(nil).CheckSendMsg), arg0, arg1, arg2, arg3)
}

// CheckWebsocketConnections mocks base method.
func (m *MockDIDComm) CheckWebsocketConnections() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWebsocketConnections")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWebsocketConnections indicates an expected call of CheckWebsocketConnections.
func (mr *MockDIDCommMockRecorder) CheckWebsocketConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWebsocketConnections", reflect.TypeOf((*MockDIDComm)(nil).CheckWebsocketConnections))
}

// SendMsg mocks base method.
func (m *MockDIDComm) SendMsg(arg0 *comm.DIDCommMsg, arg1 int64, arg2 []id.Service, arg3 *comm.MessageSettings) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDIDCommMockRecorder) SendMsg(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDIDComm)(nil).SendMsg), arg0, arg1, arg2, arg3)
}

// Stop mocks base method.
func (m *MockDIDComm) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDIDCommMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDIDComm)(nil).Stop))
}
