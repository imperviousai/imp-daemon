// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/service (interfaces: Websocket)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	comm "github.com/imperviousai/freeimp/comm"
)

// MockWebsocket is a mock of Websocket interface.
type MockWebsocket struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketMockRecorder
}

// MockWebsocketMockRecorder is the mock recorder for MockWebsocket.
type MockWebsocketMockRecorder struct {
	mock *MockWebsocket
}

// NewMockWebsocket creates a new mock instance.
func NewMockWebsocket(ctrl *gomock.Controller) *MockWebsocket {
	mock := &MockWebsocket{ctrl: ctrl}
	mock.recorder = &MockWebsocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocket) EXPECT() *MockWebsocketMockRecorder {
	return m.recorder
}

// PublishData mocks base method.
func (m *MockWebsocket) PublishData(arg0 comm.DIDCommMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishData", arg0)
}

// PublishData indicates an expected call of PublishData.
func (mr *MockWebsocketMockRecorder) PublishData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishData", reflect.TypeOf((*MockWebsocket)(nil).PublishData), arg0)
}

// SubscribeData mocks base method.
func (m *MockWebsocket) SubscribeData() (uuid.UUID, chan comm.DIDCommMsg) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeData")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(chan comm.DIDCommMsg)
	return ret0, ret1
}

// SubscribeData indicates an expected call of SubscribeData.
func (mr *MockWebsocketMockRecorder) SubscribeData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeData", reflect.TypeOf((*MockWebsocket)(nil).SubscribeData))
}

// UnsubscribeData mocks base method.
func (m *MockWebsocket) UnsubscribeData(arg0 uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeData", arg0)
}

// UnsubscribeData indicates an expected call of UnsubscribeData.
func (mr *MockWebsocketMockRecorder) UnsubscribeData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeData", reflect.TypeOf((*MockWebsocket)(nil).UnsubscribeData), arg0)
}
