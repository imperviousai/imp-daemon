// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/service/relay (interfaces: RelayRegistrationService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comm "github.com/imperviousai/imp-daemon/comm"
	relay "github.com/imperviousai/imp-daemon/service/relay"
)

// MockRelayRegistrationService is a mock of RelayRegistrationService interface.
type MockRelayRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelayRegistrationServiceMockRecorder
}

// MockRelayRegistrationServiceMockRecorder is the mock recorder for MockRelayRegistrationService.
type MockRelayRegistrationServiceMockRecorder struct {
	mock *MockRelayRegistrationService
}

// NewMockRelayRegistrationService creates a new mock instance.
func NewMockRelayRegistrationService(ctrl *gomock.Controller) *MockRelayRegistrationService {
	mock := &MockRelayRegistrationService{ctrl: ctrl}
	mock.recorder = &MockRelayRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayRegistrationService) EXPECT() *MockRelayRegistrationServiceMockRecorder {
	return m.recorder
}

// Active mocks base method.
func (m *MockRelayRegistrationService) Active() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Active")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Active indicates an expected call of Active.
func (mr *MockRelayRegistrationServiceMockRecorder) Active() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Active", reflect.TypeOf((*MockRelayRegistrationService)(nil).Active))
}

// HandleData mocks base method.
func (m *MockRelayRegistrationService) HandleData(arg0 *comm.DIDCommMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleData indicates an expected call of HandleData.
func (mr *MockRelayRegistrationServiceMockRecorder) HandleData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleData", reflect.TypeOf((*MockRelayRegistrationService)(nil).HandleData), arg0)
}

// SendMailboxRequest mocks base method.
func (m *MockRelayRegistrationService) SendMailboxRequest(arg0 string, arg1 int64, arg2 *relay.RelayMailboxRequestData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMailboxRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMailboxRequest indicates an expected call of SendMailboxRequest.
func (mr *MockRelayRegistrationServiceMockRecorder) SendMailboxRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMailboxRequest", reflect.TypeOf((*MockRelayRegistrationService)(nil).SendMailboxRequest), arg0, arg1, arg2)
}

// SendRegistrationRequest mocks base method.
func (m *MockRelayRegistrationService) SendRegistrationRequest(arg0 string, arg1 int64, arg2 *relay.RelayRegistrationRequestData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegistrationRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegistrationRequest indicates an expected call of SendRegistrationRequest.
func (mr *MockRelayRegistrationServiceMockRecorder) SendRegistrationRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegistrationRequest", reflect.TypeOf((*MockRelayRegistrationService)(nil).SendRegistrationRequest), arg0, arg1, arg2)
}

// Shutdown mocks base method.
func (m *MockRelayRegistrationService) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRelayRegistrationServiceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRelayRegistrationService)(nil).Shutdown))
}

// Type mocks base method.
func (m *MockRelayRegistrationService) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockRelayRegistrationServiceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockRelayRegistrationService)(nil).Type))
}
