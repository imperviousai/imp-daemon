// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/service/relay/state (interfaces: RelayState)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	id "github.com/imperviousai/freeimp/id"
	state "github.com/imperviousai/freeimp/service/relay/state"
)

// MockRelayState is a mock of RelayState interface.
type MockRelayState struct {
	ctrl     *gomock.Controller
	recorder *MockRelayStateMockRecorder
}

// MockRelayStateMockRecorder is the mock recorder for MockRelayState.
type MockRelayStateMockRecorder struct {
	mock *MockRelayState
}

// NewMockRelayState creates a new mock instance.
func NewMockRelayState(ctrl *gomock.Controller) *MockRelayState {
	mock := &MockRelayState{ctrl: ctrl}
	mock.recorder = &MockRelayStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayState) EXPECT() *MockRelayStateMockRecorder {
	return m.recorder
}

// AddRelayEndpoint mocks base method.
func (m *MockRelayState) AddRelayEndpoint(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelayEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelayEndpoint indicates an expected call of AddRelayEndpoint.
func (mr *MockRelayStateMockRecorder) AddRelayEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelayEndpoint", reflect.TypeOf((*MockRelayState)(nil).AddRelayEndpoint), arg0, arg1, arg2, arg3)
}

// AddRelayMessage mocks base method.
func (m *MockRelayState) AddRelayMessage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelayMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelayMessage indicates an expected call of AddRelayMessage.
func (mr *MockRelayStateMockRecorder) AddRelayMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelayMessage", reflect.TypeOf((*MockRelayState)(nil).AddRelayMessage), arg0, arg1)
}

// AddRelayRegistration mocks base method.
func (m *MockRelayState) AddRelayRegistration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelayRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelayRegistration indicates an expected call of AddRelayRegistration.
func (mr *MockRelayStateMockRecorder) AddRelayRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelayRegistration", reflect.TypeOf((*MockRelayState)(nil).AddRelayRegistration), arg0)
}

// DeleteRelayMessage mocks base method.
func (m *MockRelayState) DeleteRelayMessage(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelayMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelayMessage indicates an expected call of DeleteRelayMessage.
func (mr *MockRelayStateMockRecorder) DeleteRelayMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelayMessage", reflect.TypeOf((*MockRelayState)(nil).DeleteRelayMessage), arg0)
}

// GetAllRecentRelayMessages mocks base method.
func (m *MockRelayState) GetAllRecentRelayMessages() ([]*state.MessageState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecentRelayMessages")
	ret0, _ := ret[0].([]*state.MessageState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecentRelayMessages indicates an expected call of GetAllRecentRelayMessages.
func (mr *MockRelayStateMockRecorder) GetAllRecentRelayMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecentRelayMessages", reflect.TypeOf((*MockRelayState)(nil).GetAllRecentRelayMessages))
}

// GetRelayEndpoints mocks base method.
func (m *MockRelayState) GetRelayEndpoints(arg0 string) ([]id.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayEndpoints", arg0)
	ret0, _ := ret[0].([]id.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayEndpoints indicates an expected call of GetRelayEndpoints.
func (mr *MockRelayStateMockRecorder) GetRelayEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayEndpoints", reflect.TypeOf((*MockRelayState)(nil).GetRelayEndpoints), arg0)
}

// GetRelayMessages mocks base method.
func (m *MockRelayState) GetRelayMessages(arg0 string) ([]*state.MessageState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayMessages", arg0)
	ret0, _ := ret[0].([]*state.MessageState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayMessages indicates an expected call of GetRelayMessages.
func (mr *MockRelayStateMockRecorder) GetRelayMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayMessages", reflect.TypeOf((*MockRelayState)(nil).GetRelayMessages), arg0)
}

// GetRelayRegistration mocks base method.
func (m *MockRelayState) GetRelayRegistration(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayRegistration", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayRegistration indicates an expected call of GetRelayRegistration.
func (mr *MockRelayStateMockRecorder) GetRelayRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayRegistration", reflect.TypeOf((*MockRelayState)(nil).GetRelayRegistration), arg0)
}
