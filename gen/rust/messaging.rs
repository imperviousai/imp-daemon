// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/imp/api/messaging/messaging.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct SendMessageRequest {
    // message fields
    pub msg: ::std::string::String,
    pub did: ::std::string::String,
    pub amount: i64,
    pub reply_to_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendMessageRequest {
    fn default() -> &'a SendMessageRequest {
        <SendMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageRequest {
    pub fn new() -> SendMessageRequest {
        ::std::default::Default::default()
    }

    // string msg = 1;


    pub fn get_msg(&self) -> &str {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    // string did = 2;


    pub fn get_did(&self) -> &str {
        &self.did
    }
    pub fn clear_did(&mut self) {
        self.did.clear();
    }

    // Param is passed by value, moved
    pub fn set_did(&mut self, v: ::std::string::String) {
        self.did = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_did(&mut self) -> &mut ::std::string::String {
        &mut self.did
    }

    // Take field
    pub fn take_did(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.did, ::std::string::String::new())
    }

    // int64 amount = 3;


    pub fn get_amount(&self) -> i64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }

    // string reply_to_id = 4;


    pub fn get_reply_to_id(&self) -> &str {
        &self.reply_to_id
    }
    pub fn clear_reply_to_id(&mut self) {
        self.reply_to_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_reply_to_id(&mut self, v: ::std::string::String) {
        self.reply_to_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reply_to_id(&mut self) -> &mut ::std::string::String {
        &mut self.reply_to_id
    }

    // Take field
    pub fn take_reply_to_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reply_to_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendMessageRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.did)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reply_to_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.did);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(3, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reply_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reply_to_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        if !self.did.is_empty() {
            os.write_string(2, &self.did)?;
        }
        if self.amount != 0 {
            os.write_int64(3, self.amount)?;
        }
        if !self.reply_to_id.is_empty() {
            os.write_string(4, &self.reply_to_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMessageRequest {
        SendMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg",
                |m: &SendMessageRequest| { &m.msg },
                |m: &mut SendMessageRequest| { &mut m.msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "did",
                |m: &SendMessageRequest| { &m.did },
                |m: &mut SendMessageRequest| { &mut m.did },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "amount",
                |m: &SendMessageRequest| { &m.amount },
                |m: &mut SendMessageRequest| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reply_to_id",
                |m: &SendMessageRequest| { &m.reply_to_id },
                |m: &mut SendMessageRequest| { &mut m.reply_to_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendMessageRequest>(
                "SendMessageRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendMessageRequest {
        static instance: ::protobuf::rt::LazyV2<SendMessageRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendMessageRequest::new)
    }
}

impl ::protobuf::Clear for SendMessageRequest {
    fn clear(&mut self) {
        self.msg.clear();
        self.did.clear();
        self.amount = 0;
        self.reply_to_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendMessageResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendMessageResponse {
    fn default() -> &'a SendMessageResponse {
        <SendMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageResponse {
    pub fn new() -> SendMessageResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendMessageResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMessageResponse {
        SendMessageResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &SendMessageResponse| { &m.id },
                |m: &mut SendMessageResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendMessageResponse>(
                "SendMessageResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendMessageResponse {
        static instance: ::protobuf::rt::LazyV2<SendMessageResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendMessageResponse::new)
    }
}

impl ::protobuf::Clear for SendMessageResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageSettings {
    // message fields
    pub protocol_preferences: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageSettings {
    fn default() -> &'a MessageSettings {
        <MessageSettings as ::protobuf::Message>::default_instance()
    }
}

impl MessageSettings {
    pub fn new() -> MessageSettings {
        ::std::default::Default::default()
    }

    // repeated string protocol_preferences = 1;


    pub fn get_protocol_preferences(&self) -> &[::std::string::String] {
        &self.protocol_preferences
    }
    pub fn clear_protocol_preferences(&mut self) {
        self.protocol_preferences.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol_preferences(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.protocol_preferences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_protocol_preferences(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.protocol_preferences
    }

    // Take field
    pub fn take_protocol_preferences(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.protocol_preferences, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MessageSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.protocol_preferences)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.protocol_preferences {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.protocol_preferences {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageSettings {
        MessageSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol_preferences",
                |m: &MessageSettings| { &m.protocol_preferences },
                |m: &mut MessageSettings| { &mut m.protocol_preferences },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageSettings>(
                "MessageSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageSettings {
        static instance: ::protobuf::rt::LazyV2<MessageSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageSettings::new)
    }
}

impl ::protobuf::Clear for MessageSettings {
    fn clear(&mut self) {
        self.protocol_preferences.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendMessageV2Request {
    // message fields
    pub body: ::std::string::String,
    pub field_type: ::std::string::String,
    pub did: ::std::string::String,
    pub amount: i64,
    pub reply_to_id: ::std::string::String,
    pub message_settings: ::protobuf::SingularPtrField<MessageSettings>,
    pub recipient_list: ::protobuf::RepeatedField<::std::string::String>,
    pub group_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendMessageV2Request {
    fn default() -> &'a SendMessageV2Request {
        <SendMessageV2Request as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageV2Request {
    pub fn new() -> SendMessageV2Request {
        ::std::default::Default::default()
    }

    // string body = 1;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string did = 3;


    pub fn get_did(&self) -> &str {
        &self.did
    }
    pub fn clear_did(&mut self) {
        self.did.clear();
    }

    // Param is passed by value, moved
    pub fn set_did(&mut self, v: ::std::string::String) {
        self.did = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_did(&mut self) -> &mut ::std::string::String {
        &mut self.did
    }

    // Take field
    pub fn take_did(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.did, ::std::string::String::new())
    }

    // int64 amount = 4;


    pub fn get_amount(&self) -> i64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }

    // string reply_to_id = 5;


    pub fn get_reply_to_id(&self) -> &str {
        &self.reply_to_id
    }
    pub fn clear_reply_to_id(&mut self) {
        self.reply_to_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_reply_to_id(&mut self, v: ::std::string::String) {
        self.reply_to_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reply_to_id(&mut self) -> &mut ::std::string::String {
        &mut self.reply_to_id
    }

    // Take field
    pub fn take_reply_to_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reply_to_id, ::std::string::String::new())
    }

    // .messaging.MessageSettings message_settings = 6;


    pub fn get_message_settings(&self) -> &MessageSettings {
        self.message_settings.as_ref().unwrap_or_else(|| <MessageSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message_settings(&mut self) {
        self.message_settings.clear();
    }

    pub fn has_message_settings(&self) -> bool {
        self.message_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_settings(&mut self, v: MessageSettings) {
        self.message_settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_settings(&mut self) -> &mut MessageSettings {
        if self.message_settings.is_none() {
            self.message_settings.set_default();
        }
        self.message_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_message_settings(&mut self) -> MessageSettings {
        self.message_settings.take().unwrap_or_else(|| MessageSettings::new())
    }

    // repeated string recipient_list = 7;


    pub fn get_recipient_list(&self) -> &[::std::string::String] {
        &self.recipient_list
    }
    pub fn clear_recipient_list(&mut self) {
        self.recipient_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient_list(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.recipient_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recipient_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.recipient_list
    }

    // Take field
    pub fn take_recipient_list(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.recipient_list, ::protobuf::RepeatedField::new())
    }

    // string group_id = 8;


    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }
    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendMessageV2Request {
    fn is_initialized(&self) -> bool {
        for v in &self.message_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.did)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reply_to_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message_settings)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.recipient_list)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.body);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.did);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reply_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reply_to_id);
        }
        if let Some(ref v) = self.message_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.recipient_list {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.body.is_empty() {
            os.write_string(1, &self.body)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.did.is_empty() {
            os.write_string(3, &self.did)?;
        }
        if self.amount != 0 {
            os.write_int64(4, self.amount)?;
        }
        if !self.reply_to_id.is_empty() {
            os.write_string(5, &self.reply_to_id)?;
        }
        if let Some(ref v) = self.message_settings.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.recipient_list {
            os.write_string(7, &v)?;
        };
        if !self.group_id.is_empty() {
            os.write_string(8, &self.group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMessageV2Request {
        SendMessageV2Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &SendMessageV2Request| { &m.body },
                |m: &mut SendMessageV2Request| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &SendMessageV2Request| { &m.field_type },
                |m: &mut SendMessageV2Request| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "did",
                |m: &SendMessageV2Request| { &m.did },
                |m: &mut SendMessageV2Request| { &mut m.did },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "amount",
                |m: &SendMessageV2Request| { &m.amount },
                |m: &mut SendMessageV2Request| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reply_to_id",
                |m: &SendMessageV2Request| { &m.reply_to_id },
                |m: &mut SendMessageV2Request| { &mut m.reply_to_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageSettings>>(
                "message_settings",
                |m: &SendMessageV2Request| { &m.message_settings },
                |m: &mut SendMessageV2Request| { &mut m.message_settings },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient_list",
                |m: &SendMessageV2Request| { &m.recipient_list },
                |m: &mut SendMessageV2Request| { &mut m.recipient_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_id",
                |m: &SendMessageV2Request| { &m.group_id },
                |m: &mut SendMessageV2Request| { &mut m.group_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendMessageV2Request>(
                "SendMessageV2Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendMessageV2Request {
        static instance: ::protobuf::rt::LazyV2<SendMessageV2Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendMessageV2Request::new)
    }
}

impl ::protobuf::Clear for SendMessageV2Request {
    fn clear(&mut self) {
        self.body.clear();
        self.field_type.clear();
        self.did.clear();
        self.amount = 0;
        self.reply_to_id.clear();
        self.message_settings.clear();
        self.recipient_list.clear();
        self.group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMessageV2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageV2Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendMessageV2Response {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendMessageV2Response {
    fn default() -> &'a SendMessageV2Response {
        <SendMessageV2Response as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageV2Response {
    pub fn new() -> SendMessageV2Response {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendMessageV2Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMessageV2Response {
        SendMessageV2Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &SendMessageV2Response| { &m.id },
                |m: &mut SendMessageV2Response| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendMessageV2Response>(
                "SendMessageV2Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendMessageV2Response {
        static instance: ::protobuf::rt::LazyV2<SendMessageV2Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendMessageV2Response::new)
    }
}

impl ::protobuf::Clear for SendMessageV2Response {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMessageV2Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageV2Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SaveMessageV2Request {
    // message fields
    pub body: ::std::string::String,
    pub field_type: ::std::string::String,
    pub did: ::std::string::String,
    pub from: ::std::string::String,
    pub reply_to_id: ::std::string::String,
    pub recipient_list: ::protobuf::RepeatedField<::std::string::String>,
    pub group_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SaveMessageV2Request {
    fn default() -> &'a SaveMessageV2Request {
        <SaveMessageV2Request as ::protobuf::Message>::default_instance()
    }
}

impl SaveMessageV2Request {
    pub fn new() -> SaveMessageV2Request {
        ::std::default::Default::default()
    }

    // string body = 1;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string did = 3;


    pub fn get_did(&self) -> &str {
        &self.did
    }
    pub fn clear_did(&mut self) {
        self.did.clear();
    }

    // Param is passed by value, moved
    pub fn set_did(&mut self, v: ::std::string::String) {
        self.did = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_did(&mut self) -> &mut ::std::string::String {
        &mut self.did
    }

    // Take field
    pub fn take_did(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.did, ::std::string::String::new())
    }

    // string from = 4;


    pub fn get_from(&self) -> &str {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::string::String) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::string::String {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from, ::std::string::String::new())
    }

    // string reply_to_id = 5;


    pub fn get_reply_to_id(&self) -> &str {
        &self.reply_to_id
    }
    pub fn clear_reply_to_id(&mut self) {
        self.reply_to_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_reply_to_id(&mut self, v: ::std::string::String) {
        self.reply_to_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reply_to_id(&mut self) -> &mut ::std::string::String {
        &mut self.reply_to_id
    }

    // Take field
    pub fn take_reply_to_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reply_to_id, ::std::string::String::new())
    }

    // repeated string recipient_list = 7;


    pub fn get_recipient_list(&self) -> &[::std::string::String] {
        &self.recipient_list
    }
    pub fn clear_recipient_list(&mut self) {
        self.recipient_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient_list(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.recipient_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recipient_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.recipient_list
    }

    // Take field
    pub fn take_recipient_list(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.recipient_list, ::protobuf::RepeatedField::new())
    }

    // string group_id = 8;


    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }
    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SaveMessageV2Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.did)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reply_to_id)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.recipient_list)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.body);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.did);
        }
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.from);
        }
        if !self.reply_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reply_to_id);
        }
        for value in &self.recipient_list {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.body.is_empty() {
            os.write_string(1, &self.body)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.did.is_empty() {
            os.write_string(3, &self.did)?;
        }
        if !self.from.is_empty() {
            os.write_string(4, &self.from)?;
        }
        if !self.reply_to_id.is_empty() {
            os.write_string(5, &self.reply_to_id)?;
        }
        for v in &self.recipient_list {
            os.write_string(7, &v)?;
        };
        if !self.group_id.is_empty() {
            os.write_string(8, &self.group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SaveMessageV2Request {
        SaveMessageV2Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &SaveMessageV2Request| { &m.body },
                |m: &mut SaveMessageV2Request| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &SaveMessageV2Request| { &m.field_type },
                |m: &mut SaveMessageV2Request| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "did",
                |m: &SaveMessageV2Request| { &m.did },
                |m: &mut SaveMessageV2Request| { &mut m.did },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "from",
                |m: &SaveMessageV2Request| { &m.from },
                |m: &mut SaveMessageV2Request| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reply_to_id",
                |m: &SaveMessageV2Request| { &m.reply_to_id },
                |m: &mut SaveMessageV2Request| { &mut m.reply_to_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient_list",
                |m: &SaveMessageV2Request| { &m.recipient_list },
                |m: &mut SaveMessageV2Request| { &mut m.recipient_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_id",
                |m: &SaveMessageV2Request| { &m.group_id },
                |m: &mut SaveMessageV2Request| { &mut m.group_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SaveMessageV2Request>(
                "SaveMessageV2Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SaveMessageV2Request {
        static instance: ::protobuf::rt::LazyV2<SaveMessageV2Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SaveMessageV2Request::new)
    }
}

impl ::protobuf::Clear for SaveMessageV2Request {
    fn clear(&mut self) {
        self.body.clear();
        self.field_type.clear();
        self.did.clear();
        self.from.clear();
        self.reply_to_id.clear();
        self.recipient_list.clear();
        self.group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SaveMessageV2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveMessageV2Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SaveMessageV2Response {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SaveMessageV2Response {
    fn default() -> &'a SaveMessageV2Response {
        <SaveMessageV2Response as ::protobuf::Message>::default_instance()
    }
}

impl SaveMessageV2Response {
    pub fn new() -> SaveMessageV2Response {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SaveMessageV2Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SaveMessageV2Response {
        SaveMessageV2Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &SaveMessageV2Response| { &m.id },
                |m: &mut SaveMessageV2Response| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SaveMessageV2Response>(
                "SaveMessageV2Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SaveMessageV2Response {
        static instance: ::protobuf::rt::LazyV2<SaveMessageV2Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SaveMessageV2Response::new)
    }
}

impl ::protobuf::Clear for SaveMessageV2Response {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SaveMessageV2Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveMessageV2Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub id: ::std::string::String,
    pub field_type: ::std::string::String,
    pub recipients: ::protobuf::RepeatedField<::std::string::String>,
    pub data: ::std::string::String,
    pub transport: ::std::string::String,
    pub group_id: ::std::string::String,
    pub events: ::protobuf::RepeatedField<MessageEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated string recipients = 3;


    pub fn get_recipients(&self) -> &[::std::string::String] {
        &self.recipients
    }
    pub fn clear_recipients(&mut self) {
        self.recipients.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipients(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.recipients = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recipients(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.recipients
    }

    // Take field
    pub fn take_recipients(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.recipients, ::protobuf::RepeatedField::new())
    }

    // string data = 4;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }

    // string transport = 5;


    pub fn get_transport(&self) -> &str {
        &self.transport
    }
    pub fn clear_transport(&mut self) {
        self.transport.clear();
    }

    // Param is passed by value, moved
    pub fn set_transport(&mut self, v: ::std::string::String) {
        self.transport = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transport(&mut self) -> &mut ::std::string::String {
        &mut self.transport
    }

    // Take field
    pub fn take_transport(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transport, ::std::string::String::new())
    }

    // string group_id = 6;


    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }
    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }

    // repeated .messaging.MessageEvent events = 7;


    pub fn get_events(&self) -> &[MessageEvent] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<MessageEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<MessageEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<MessageEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.recipients)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transport)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        for value in &self.recipients {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.data);
        }
        if !self.transport.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.transport);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.group_id);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        for v in &self.recipients {
            os.write_string(3, &v)?;
        };
        if !self.data.is_empty() {
            os.write_string(4, &self.data)?;
        }
        if !self.transport.is_empty() {
            os.write_string(5, &self.transport)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(6, &self.group_id)?;
        }
        for v in &self.events {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Message| { &m.id },
                |m: &mut Message| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &Message| { &m.field_type },
                |m: &mut Message| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipients",
                |m: &Message| { &m.recipients },
                |m: &mut Message| { &mut m.recipients },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data",
                |m: &Message| { &m.data },
                |m: &mut Message| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transport",
                |m: &Message| { &m.transport },
                |m: &mut Message| { &mut m.transport },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_id",
                |m: &Message| { &m.group_id },
                |m: &mut Message| { &mut m.group_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageEvent>>(
                "events",
                |m: &Message| { &m.events },
                |m: &mut Message| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.id.clear();
        self.field_type.clear();
        self.recipients.clear();
        self.data.clear();
        self.transport.clear();
        self.group_id.clear();
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageEvent {
    // message fields
    pub id: ::std::string::String,
    pub MessageId: ::std::string::String,
    pub DID: ::std::string::String,
    pub Type: ::std::string::String,
    pub EventTime: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageEvent {
    fn default() -> &'a MessageEvent {
        <MessageEvent as ::protobuf::Message>::default_instance()
    }
}

impl MessageEvent {
    pub fn new() -> MessageEvent {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string MessageId = 2;


    pub fn get_MessageId(&self) -> &str {
        &self.MessageId
    }
    pub fn clear_MessageId(&mut self) {
        self.MessageId.clear();
    }

    // Param is passed by value, moved
    pub fn set_MessageId(&mut self, v: ::std::string::String) {
        self.MessageId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_MessageId(&mut self) -> &mut ::std::string::String {
        &mut self.MessageId
    }

    // Take field
    pub fn take_MessageId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.MessageId, ::std::string::String::new())
    }

    // string DID = 3;


    pub fn get_DID(&self) -> &str {
        &self.DID
    }
    pub fn clear_DID(&mut self) {
        self.DID.clear();
    }

    // Param is passed by value, moved
    pub fn set_DID(&mut self, v: ::std::string::String) {
        self.DID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_DID(&mut self) -> &mut ::std::string::String {
        &mut self.DID
    }

    // Take field
    pub fn take_DID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.DID, ::std::string::String::new())
    }

    // string Type = 4;


    pub fn get_Type(&self) -> &str {
        &self.Type
    }
    pub fn clear_Type(&mut self) {
        self.Type.clear();
    }

    // Param is passed by value, moved
    pub fn set_Type(&mut self, v: ::std::string::String) {
        self.Type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Type(&mut self) -> &mut ::std::string::String {
        &mut self.Type
    }

    // Take field
    pub fn take_Type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Type, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp EventTime = 5;


    pub fn get_EventTime(&self) -> &::protobuf::well_known_types::Timestamp {
        self.EventTime.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_EventTime(&mut self) {
        self.EventTime.clear();
    }

    pub fn has_EventTime(&self) -> bool {
        self.EventTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_EventTime(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.EventTime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_EventTime(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.EventTime.is_none() {
            self.EventTime.set_default();
        }
        self.EventTime.as_mut().unwrap()
    }

    // Take field
    pub fn take_EventTime(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.EventTime.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for MessageEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.EventTime {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.MessageId)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.DID)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.EventTime)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.MessageId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.MessageId);
        }
        if !self.DID.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.DID);
        }
        if !self.Type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Type);
        }
        if let Some(ref v) = self.EventTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.MessageId.is_empty() {
            os.write_string(2, &self.MessageId)?;
        }
        if !self.DID.is_empty() {
            os.write_string(3, &self.DID)?;
        }
        if !self.Type.is_empty() {
            os.write_string(4, &self.Type)?;
        }
        if let Some(ref v) = self.EventTime.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageEvent {
        MessageEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &MessageEvent| { &m.id },
                |m: &mut MessageEvent| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "MessageId",
                |m: &MessageEvent| { &m.MessageId },
                |m: &mut MessageEvent| { &mut m.MessageId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "DID",
                |m: &MessageEvent| { &m.DID },
                |m: &mut MessageEvent| { &mut m.DID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Type",
                |m: &MessageEvent| { &m.Type },
                |m: &mut MessageEvent| { &mut m.Type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "EventTime",
                |m: &MessageEvent| { &m.EventTime },
                |m: &mut MessageEvent| { &mut m.EventTime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageEvent>(
                "MessageEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageEvent {
        static instance: ::protobuf::rt::LazyV2<MessageEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageEvent::new)
    }
}

impl ::protobuf::Clear for MessageEvent {
    fn clear(&mut self) {
        self.id.clear();
        self.MessageId.clear();
        self.DID.clear();
        self.Type.clear();
        self.EventTime.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMessageListRequest {
    // message fields
    pub id: ::std::string::String,
    pub field_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMessageListRequest {
    fn default() -> &'a GetMessageListRequest {
        <GetMessageListRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMessageListRequest {
    pub fn new() -> GetMessageListRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetMessageListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMessageListRequest {
        GetMessageListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &GetMessageListRequest| { &m.id },
                |m: &mut GetMessageListRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &GetMessageListRequest| { &m.field_type },
                |m: &mut GetMessageListRequest| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMessageListRequest>(
                "GetMessageListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMessageListRequest {
        static instance: ::protobuf::rt::LazyV2<GetMessageListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMessageListRequest::new)
    }
}

impl ::protobuf::Clear for GetMessageListRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.field_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMessageListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMessageListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMessageListResponse {
    // message fields
    pub messages: ::protobuf::RepeatedField<Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMessageListResponse {
    fn default() -> &'a GetMessageListResponse {
        <GetMessageListResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMessageListResponse {
    pub fn new() -> GetMessageListResponse {
        ::std::default::Default::default()
    }

    // repeated .messaging.Message messages = 1;


    pub fn get_messages(&self) -> &[Message] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<Message>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<Message> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<Message> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetMessageListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.messages {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMessageListResponse {
        GetMessageListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Message>>(
                "messages",
                |m: &GetMessageListResponse| { &m.messages },
                |m: &mut GetMessageListResponse| { &mut m.messages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMessageListResponse>(
                "GetMessageListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMessageListResponse {
        static instance: ::protobuf::rt::LazyV2<GetMessageListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMessageListResponse::new)
    }
}

impl ::protobuf::Clear for GetMessageListResponse {
    fn clear(&mut self) {
        self.messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMessageListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMessageListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteMessageRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteMessageRequest {
    fn default() -> &'a DeleteMessageRequest {
        <DeleteMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessageRequest {
    pub fn new() -> DeleteMessageRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteMessageRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteMessageRequest {
        DeleteMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &DeleteMessageRequest| { &m.id },
                |m: &mut DeleteMessageRequest| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteMessageRequest>(
                "DeleteMessageRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteMessageRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteMessageRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteMessageRequest::new)
    }
}

impl ::protobuf::Clear for DeleteMessageRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteMessageResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteMessageResponse {
    fn default() -> &'a DeleteMessageResponse {
        <DeleteMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessageResponse {
    pub fn new() -> DeleteMessageResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteMessageResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteMessageResponse {
        DeleteMessageResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteMessageResponse>(
                "DeleteMessageResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteMessageResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteMessageResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteMessageResponse::new)
    }
}

impl ::protobuf::Clear for DeleteMessageResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessageResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteGroupMessageRequest {
    // message fields
    pub group_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteGroupMessageRequest {
    fn default() -> &'a DeleteGroupMessageRequest {
        <DeleteGroupMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGroupMessageRequest {
    pub fn new() -> DeleteGroupMessageRequest {
        ::std::default::Default::default()
    }

    // string group_id = 1;


    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }
    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteGroupMessageRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.group_id.is_empty() {
            os.write_string(1, &self.group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteGroupMessageRequest {
        DeleteGroupMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_id",
                |m: &DeleteGroupMessageRequest| { &m.group_id },
                |m: &mut DeleteGroupMessageRequest| { &mut m.group_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteGroupMessageRequest>(
                "DeleteGroupMessageRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteGroupMessageRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteGroupMessageRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteGroupMessageRequest::new)
    }
}

impl ::protobuf::Clear for DeleteGroupMessageRequest {
    fn clear(&mut self) {
        self.group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteGroupMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGroupMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteGroupMessageResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteGroupMessageResponse {
    fn default() -> &'a DeleteGroupMessageResponse {
        <DeleteGroupMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGroupMessageResponse {
    pub fn new() -> DeleteGroupMessageResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteGroupMessageResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteGroupMessageResponse {
        DeleteGroupMessageResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteGroupMessageResponse>(
                "DeleteGroupMessageResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteGroupMessageResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteGroupMessageResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteGroupMessageResponse::new)
    }
}

impl ::protobuf::Clear for DeleteGroupMessageResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteGroupMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGroupMessageResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/imp/api/messaging/messaging.proto\x12\tmessaging\x1a\x1cgoogle/\
    api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \x1a\x1fgoogle/protobuf/timestamp.proto\"p\n\x12SendMessageRequest\x12\
    \x10\n\x03msg\x18\x01\x20\x01(\tR\x03msg\x12\x10\n\x03did\x18\x02\x20\
    \x01(\tR\x03did\x12\x16\n\x06amount\x18\x03\x20\x01(\x03R\x06amount\x12\
    \x1e\n\x0breply_to_id\x18\x04\x20\x01(\tR\treplyToId\"%\n\x13SendMessage\
    Response\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"D\n\x0fMessageSettin\
    gs\x121\n\x14protocol_preferences\x18\x01\x20\x03(\tR\x13protocolPrefere\
    nces\"\x91\x02\n\x14SendMessageV2Request\x12\x12\n\x04body\x18\x01\x20\
    \x01(\tR\x04body\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x10\n\
    \x03did\x18\x03\x20\x01(\tR\x03did\x12\x16\n\x06amount\x18\x04\x20\x01(\
    \x03R\x06amount\x12\x1e\n\x0breply_to_id\x18\x05\x20\x01(\tR\treplyToId\
    \x12E\n\x10message_settings\x18\x06\x20\x01(\x0b2\x1a.messaging.MessageS\
    ettingsR\x0fmessageSettings\x12%\n\x0erecipient_list\x18\x07\x20\x03(\tR\
    \rrecipientList\x12\x19\n\x08group_id\x18\x08\x20\x01(\tR\x07groupId\"'\
    \n\x15SendMessageV2Response\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\
    \xc6\x01\n\x14SaveMessageV2Request\x12\x12\n\x04body\x18\x01\x20\x01(\tR\
    \x04body\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x10\n\x03did\
    \x18\x03\x20\x01(\tR\x03did\x12\x12\n\x04from\x18\x04\x20\x01(\tR\x04fro\
    m\x12\x1e\n\x0breply_to_id\x18\x05\x20\x01(\tR\treplyToId\x12%\n\x0ereci\
    pient_list\x18\x07\x20\x03(\tR\rrecipientList\x12\x19\n\x08group_id\x18\
    \x08\x20\x01(\tR\x07groupId\"'\n\x15SaveMessageV2Response\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\tR\x02id\"\xcb\x01\n\x07Message\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\
    \x1e\n\nrecipients\x18\x03\x20\x03(\tR\nrecipients\x12\x12\n\x04data\x18\
    \x04\x20\x01(\tR\x04data\x12\x1c\n\ttransport\x18\x05\x20\x01(\tR\ttrans\
    port\x12\x19\n\x08group_id\x18\x06\x20\x01(\tR\x07groupId\x12/\n\x06even\
    ts\x18\x07\x20\x03(\x0b2\x17.messaging.MessageEventR\x06events\"\x9c\x01\
    \n\x0cMessageEvent\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1c\n\t\
    MessageId\x18\x02\x20\x01(\tR\tMessageId\x12\x10\n\x03DID\x18\x03\x20\
    \x01(\tR\x03DID\x12\x12\n\x04Type\x18\x04\x20\x01(\tR\x04Type\x128\n\tEv\
    entTime\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tEventTime\
    \";\n\x15GetMessageListRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\"H\n\x16GetMessageListRes\
    ponse\x12.\n\x08messages\x18\x01\x20\x03(\x0b2\x12.messaging.MessageR\
    \x08messages\"&\n\x14DeleteMessageRequest\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\"\x17\n\x15DeleteMessageResponse\"6\n\x19DeleteGroupMessa\
    geRequest\x12\x19\n\x08group_id\x18\x01\x20\x01(\tR\x07groupId\"\x1c\n\
    \x1aDeleteGroupMessageResponse2\xbc\x05\n\tMessaging\x12i\n\x0bSendMessa\
    ge\x12\x1d.messaging.SendMessageRequest\x1a\x1e.messaging.SendMessageRes\
    ponse\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10/v1/message/send:\x01*\x12o\n\r\
    SendMessageV2\x12\x1f.messaging.SendMessageV2Request\x1a\x20.messaging.S\
    endMessageV2Response\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10/v2/message/send\
    :\x01*\x12o\n\rSaveMessageV2\x12\x1f.messaging.SaveMessageV2Request\x1a\
    \x20.messaging.SaveMessageV2Response\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10\
    /v2/message/save:\x01*\x12j\n\x0eGetMessageList\x12\x20.messaging.GetMes\
    sageListRequest\x1a!.messaging.GetMessageListResponse\"\x13\x82\xd3\xe4\
    \x93\x02\r\x12\x0b/v1/message\x12l\n\rDeleteMessage\x12\x1f.messaging.De\
    leteMessageRequest\x1a\x20.messaging.DeleteMessageResponse\"\x18\x82\xd3\
    \xe4\x93\x02\x12*\x10/v1/message/{id}\x12\x87\x01\n\x12DeleteGroupMessag\
    e\x12$.messaging.DeleteGroupMessageRequest\x1a%.messaging.DeleteGroupMes\
    sageResponse\"$\x82\xd3\xe4\x93\x02\x1e*\x1c/v1/message_group/{group_id}\
    B\xbe\x02Z&github.com/imperviousai/imp-daemon/gen\x92A\x92\x02\x12A\n\
    \x12Messaging\x20Services\"&\n\rImpervious\x20AI\x12\x15https://impervio\
    us.ai2\x031.0*\x03\x01\x02\x042\x10application/json:\x10application/json\
    Za\n_\n\x07api_key\x12T\x08\x02\x125An\x20API\x20key\x20generated\x20by\
    \x20the\x20daemon\x20for\x20authentication\x1a\x17Grpc-Metadata-X-API-KE\
    Y\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14Documentation\x20on\x20IMP\
    \x12\x1ahttps://docs.impervious.aiJ\x996\n\x07\x12\x05\x01\0\xe8\x01\x01\
    \n>\n\x01\x0c\x12\x03\x01\0\x12\x1a4/\x20Allows\x20for\x20p2p\x20messagi\
    ng\x20between\x20Impervious\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\0\x12\
    \n\x08\n\x01\x08\x12\x03\x05\0=\n\t\n\x02\x08\x0b\x12\x03\x05\0=\n\t\n\
    \x02\x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x02\x03\
    \x02\x12\x03\t\0)\n\t\n\x01\x08\x12\x04\x0b\0-\x02\n\x0b\n\x03\x08\x92\
    \x08\x12\x04\x0b\0-\x02\nT\n\x02\x06\0\x12\x042\0k\x01\x1aH*\n\x20Messag\
    ing\x20service\x20allows\x20for\x20p2p\x20messaging\x20between\x20Imperv\
    ious\x20nodes.\n\n\n\n\x03\x06\0\x01\x12\x032\x08\x11\nC\n\x04\x06\0\x02\
    \0\x12\x046\x08;\t\x1a5*\n\x20SendMessage\x20sends\x20a\x20text\x20messa\
    ge\x20to\x20another\x20node.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x036\x0c\
    \x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x036\x18*\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x0365H\n\r\n\x05\x06\0\x02\0\x04\x12\x047\x10:\x12\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x047\x10:\x12\nY\n\x04\x06\0\x02\x01\
    \x12\x04@\x08E\t\x1aK*\n\x20SendMessageV2\x20sends\x20a\x20byte-encoded\
    \x20json\x20DIDComm\x20message\x20to\x20another\x20DID.\n\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03@\x0c\x19\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03@\x1a.\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03@9N\n\r\n\x05\x06\0\x02\
    \x01\x04\x12\x04A\x10D\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\
    \x04A\x10D\x12\nR\n\x04\x06\0\x02\x02\x12\x04J\x08O\t\x1aD*\n\x20SaveMes\
    sageV2\x20saves\x20a\x20byte-encoded\x20json\x20DIDComm\x20message\x20lo\
    cally.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03J\x0c\x19\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03J\x1a.\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03J9N\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04K\x10N\x12\n\x11\n\t\x06\0\x02\x02\x04\
    \xb0\xca\xbc\"\x12\x04K\x10N\x12\n?\n\x04\x06\0\x02\x03\x12\x04T\x08X\t\
    \x1a1*\n\x20GetMessageList\x20gets\x20messages\x20from\x20the\x20daemon.\
    \n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03T\x0c\x1a\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03T\x1b0\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03T;Q\n\r\n\
    \x05\x06\0\x02\x03\x04\x12\x04U\x10W\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\
    \xca\xbc\"\x12\x04U\x10W\x12\n?\n\x04\x06\0\x02\x04\x12\x04]\x08a\t\x1a1\
    *\n\x20DeleteMessage\x20will\x20delete\x20a\x20specific\x20message.\n\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03]\x0c\x19\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03]\x1a.\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03]9N\n\r\n\x05\
    \x06\0\x02\x04\x04\x12\x04^\x10`\x12\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\
    \xbc\"\x12\x04^\x10`\x12\nR\n\x04\x06\0\x02\x05\x12\x04f\x08j\t\x1aD*\n\
    \x20DeleteGroupMessage\x20will\x20delete\x20all\x20messages\x20from\x20t\
    he\x20same\x20group.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03f\x0c\x1e\n\
    \x0c\n\x05\x06\0\x02\x05\x02\x12\x03f\x1f8\n\x0c\n\x05\x06\0\x02\x05\x03\
    \x12\x03fC]\n\r\n\x05\x06\0\x02\x05\x04\x12\x04g\x10i\x12\n\x11\n\t\x06\
    \0\x02\x05\x04\xb0\xca\xbc\"\x12\x04g\x10i\x12\n8\n\x02\x04\0\x12\x04p\0\
    u\x01\x1a,*\n\x20Represents\x20a\x20message\x20send\x20to\x20another\x20\
    DID\n\n\n\n\x03\x04\0\x01\x12\x03p\x08\x1a\n3\n\x04\x04\0\x02\0\x12\x03q\
    \x08\x17\"&\x20the\x20simple\x20string\x20message\x20to\x20be\x20sent\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03q\x08\x0e\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03q\x0f\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03q\x15\x16\n\x1c\
    \n\x04\x04\0\x02\x01\x12\x03r\x08\x17\"\x0f\x20The\x20other\x20DID\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03r\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03r\x0f\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03r\x15\x16\nY\
    \n\x04\x04\0\x02\x02\x12\x03s\x08\x19\"L\x20Optional\x20satoshi\x20amoun\
    t\x20to\x20send\x20along\x20with\x20the\x20message,\x20defaults\x20to\
    \x201\x20sat.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03s\x08\r\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03s\x0e\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03s\x17\x18\nK\n\x04\x04\0\x02\x03\x12\x03t\x08\x1f\">\x20Optional\x20\
    ID\x20of\x20the\x20message\x20that\x20this\x20message\x20is\x20replying\
    \x20to.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03t\x08\x0e\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03t\x0f\x1a\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03t\
    \x1d\x1e\n>\n\x02\x04\x01\x12\x04z\0|\x01\x1a2*\n\x20Represents\x20a\x20\
    response\x20back\x20from\x20a\x20sent\x20message\n\n\n\n\x03\x04\x01\x01\
    \x12\x03z\x08\x1b\n\"\n\x04\x04\x01\x02\0\x12\x03{\x08\x16\"\x15\x20retu\
    rned\x20message\x20ID\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03{\x08\x0e\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03{\x0f\x11\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03{\x14\x15\nA\n\x02\x04\x02\x12\x06\x81\x01\0\x83\x01\x01\x1a\
    3*\n\x20Represents\x20the\x20preferences\x20for\x20sending\x20messages\n\
    \n\x0b\n\x03\x04\x02\x01\x12\x04\x81\x01\x08\x17\nJ\n\x04\x04\x02\x02\0\
    \x12\x04\x82\x01\x081\"<\x20ordered\x20list\x20of\x20protocol\x20prefere\
    nces\x20to\x20send\x20messages\x20down\n\n\r\n\x05\x04\x02\x02\0\x04\x12\
    \x04\x82\x01\x08\x10\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x82\x01\x11\x17\
    \n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x82\x01\x18,\n\r\n\x05\x04\x02\x02\
    \0\x03\x12\x04\x82\x01/0\n:\n\x02\x04\x03\x12\x06\x89\x01\0\x92\x01\x01\
    \x1a,*\n\x20Represents\x20a\x20message\x20send\x20to\x20another\x20DID\n\
    \n\x0b\n\x03\x04\x03\x01\x12\x04\x89\x01\x08\x1c\nX\n\x04\x04\x03\x02\0\
    \x12\x04\x8a\x01\x08\x18\"J\x20the\x20body\x20of\x20the\x20DIDcomm\x20me\
    ssage,\x20json\x20structure\x20depends\x20on\x20`type`\x20field.\n\n\r\n\
    \x05\x04\x03\x02\0\x05\x12\x04\x8a\x01\x08\x0e\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\x8a\x01\x0f\x13\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x8a\x01\
    \x16\x17\nS\n\x04\x04\x03\x02\x01\x12\x04\x8b\x01\x08\x18\"E\x20the\x20t\
    ype\x20of\x20the\x20DIDcomm\x20message,\x20will\x20determine\x20body\x20\
    json\x20structure\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x8b\x01\x08\
    \x0e\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x8b\x01\x0f\x13\n\r\n\x05\x04\
    \x03\x02\x01\x03\x12\x04\x8b\x01\x16\x17\nc\n\x04\x04\x03\x02\x02\x12\
    \x04\x8c\x01\x08\x17\"U\x20The\x20other\x20DID\x20to\x20send\x20the\x20m\
    essage\x20to.\x20Deprecated\x20for\x20`recipient_list`\x20/\x20`group_id\
    `.\n\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\x8c\x01\x08\x0e\n\r\n\x05\x04\
    \x03\x02\x02\x01\x12\x04\x8c\x01\x0f\x12\n\r\n\x05\x04\x03\x02\x02\x03\
    \x12\x04\x8c\x01\x15\x16\nZ\n\x04\x04\x03\x02\x03\x12\x04\x8d\x01\x08\
    \x19\"L\x20Optional\x20satoshi\x20amount\x20to\x20send\x20along\x20with\
    \x20the\x20message,\x20defaults\x20to\x201\x20sat.\n\n\r\n\x05\x04\x03\
    \x02\x03\x05\x12\x04\x8d\x01\x08\r\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\
    \x8d\x01\x0e\x14\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\x8d\x01\x17\x18\n\
    L\n\x04\x04\x03\x02\x04\x12\x04\x8e\x01\x08\x1f\">\x20Optional\x20ID\x20\
    of\x20the\x20message\x20that\x20this\x20message\x20is\x20replying\x20to.\
    \n\n\r\n\x05\x04\x03\x02\x04\x05\x12\x04\x8e\x01\x08\x0e\n\r\n\x05\x04\
    \x03\x02\x04\x01\x12\x04\x8e\x01\x0f\x1a\n\r\n\x05\x04\x03\x02\x04\x03\
    \x12\x04\x8e\x01\x1d\x1e\n6\n\x04\x04\x03\x02\x05\x12\x04\x8f\x01\x08-\"\
    (\x20Optional\x20message\x20settings\x20when\x20sending\n\n\r\n\x05\x04\
    \x03\x02\x05\x06\x12\x04\x8f\x01\x08\x17\n\r\n\x05\x04\x03\x02\x05\x01\
    \x12\x04\x8f\x01\x18(\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\x8f\x01+,\nq\
    \n\x04\x04\x03\x02\x06\x12\x04\x90\x01\x08+\"c\x20The\x20list\x20of\x20r\
    ecipient\x20dids\x20to\x20send\x20the\x20message\x20to.\x20Cannot\x20use\
    \x20with\x20`group_id`\x20/\x20`did`\x20parameters.\n\n\r\n\x05\x04\x03\
    \x02\x06\x04\x12\x04\x90\x01\x08\x10\n\r\n\x05\x04\x03\x02\x06\x05\x12\
    \x04\x90\x01\x11\x17\n\r\n\x05\x04\x03\x02\x06\x01\x12\x04\x90\x01\x18&\
    \n\r\n\x05\x04\x03\x02\x06\x03\x12\x04\x90\x01)*\n\x92\x01\n\x04\x04\x03\
    \x02\x07\x12\x04\x91\x01\x08\x1c\"\x83\x01\x20The\x20`group_id`\x20to\
    \x20send\x20the\x20message\x20to,\x20instead\x20of\x20a\x20list\x20of\
    \x20recipient\x20dids.\x20Cannot\x20use\x20with\x20`recipient_list`\x20o\
    r\x20`did`\x20parameters.\n\n\r\n\x05\x04\x03\x02\x07\x05\x12\x04\x91\
    \x01\x08\x0e\n\r\n\x05\x04\x03\x02\x07\x01\x12\x04\x91\x01\x0f\x17\n\r\n\
    \x05\x04\x03\x02\x07\x03\x12\x04\x91\x01\x1a\x1b\n@\n\x02\x04\x04\x12\
    \x06\x97\x01\0\x99\x01\x01\x1a2*\n\x20Represents\x20a\x20response\x20bac\
    k\x20from\x20a\x20sent\x20message\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x97\
    \x01\x08\x1d\n$\n\x04\x04\x04\x02\0\x12\x04\x98\x01\x08\x16\"\x16\x20ret\
    urned\x20message\x20ID.\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x98\x01\
    \x08\x0e\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x98\x01\x0f\x11\n\r\n\x05\
    \x04\x04\x02\0\x03\x12\x04\x98\x01\x14\x15\nZ\n\x02\x04\x05\x12\x06\x9e\
    \x01\0\xa6\x01\x01\x1aL*\n\x20Represents\x20a\x20message\x20to\x20save\
    \x20locally.\x20Useful\x20if\x20it\x20was\x20sent\x20out\x20of\x20band.\
    \n\n\x0b\n\x03\x04\x05\x01\x12\x04\x9e\x01\x08\x1c\nX\n\x04\x04\x05\x02\
    \0\x12\x04\x9f\x01\x08\x18\"J\x20the\x20body\x20of\x20the\x20DIDcomm\x20\
    message,\x20json\x20structure\x20depends\x20on\x20`type`\x20field.\n\n\r\
    \n\x05\x04\x05\x02\0\x05\x12\x04\x9f\x01\x08\x0e\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\x9f\x01\x0f\x13\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x9f\x01\
    \x16\x17\nS\n\x04\x04\x05\x02\x01\x12\x04\xa0\x01\x08\x18\"E\x20the\x20t\
    ype\x20of\x20the\x20DIDcomm\x20message,\x20will\x20determine\x20body\x20\
    json\x20structure\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xa0\x01\x08\
    \x0e\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xa0\x01\x0f\x13\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\xa0\x01\x16\x17\n\xa3\x01\n\x04\x04\x05\x02\x02\
    \x12\x04\xa1\x01\x08\x17\"\x94\x01\x20The\x20DID\x20this\x20message\x20s\
    ent\x20to.\x20It\x20may\x20be\x20the\x20user's\x20if\x20it\x20was\x20rec\
    eived\x20(instead\x20of\x20sent)\x20out\x20of\x20band.\x20Deprecated\x20\
    for\x20`recipient_list`\x20/\x20`group_id`.\n\n\r\n\x05\x04\x05\x02\x02\
    \x05\x12\x04\xa1\x01\x08\x0e\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xa1\
    \x01\x0f\x12\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xa1\x01\x15\x16\n_\n\
    \x04\x04\x05\x02\x03\x12\x04\xa2\x01\x08\x18\"Q\x20The\x20DID\x20this\
    \x20sent\x20from.\x20It\x20may\x20be\x20the\x20other\x20DID\x20if\x20it\
    \x20was\x20received\x20out\x20of\x20band.\n\n\r\n\x05\x04\x05\x02\x03\
    \x05\x12\x04\xa2\x01\x08\x0e\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xa2\
    \x01\x0f\x13\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xa2\x01\x16\x17\nL\n\
    \x04\x04\x05\x02\x04\x12\x04\xa3\x01\x08\x1f\">\x20Optional\x20ID\x20of\
    \x20the\x20message\x20that\x20this\x20message\x20is\x20replying\x20to.\n\
    \n\r\n\x05\x04\x05\x02\x04\x05\x12\x04\xa3\x01\x08\x0e\n\r\n\x05\x04\x05\
    \x02\x04\x01\x12\x04\xa3\x01\x0f\x1a\n\r\n\x05\x04\x05\x02\x04\x03\x12\
    \x04\xa3\x01\x1d\x1e\np\n\x04\x04\x05\x02\x05\x12\x04\xa4\x01\x08+\"b\
    \x20The\x20list\x20of\x20recipient\x20dids\x20the\x20message\x20sent\x20\
    from.\x20Cannot\x20use\x20with\x20`group_id`\x20/\x20`did`\x20parameters\
    .\n\n\r\n\x05\x04\x05\x02\x05\x04\x12\x04\xa4\x01\x08\x10\n\r\n\x05\x04\
    \x05\x02\x05\x05\x12\x04\xa4\x01\x11\x17\n\r\n\x05\x04\x05\x02\x05\x01\
    \x12\x04\xa4\x01\x18&\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\xa4\x01)*\nk\
    \n\x04\x04\x05\x02\x06\x12\x04\xa5\x01\x08\x1c\"]\x20The\x20`group_id`\
    \x20the\x20message\x20sent\x20from.\x20Cannot\x20use\x20with\x20`recipie\
    nt_list`\x20or\x20`did`\x20parameters.\n\n\r\n\x05\x04\x05\x02\x06\x05\
    \x12\x04\xa5\x01\x08\x0e\n\r\n\x05\x04\x05\x02\x06\x01\x12\x04\xa5\x01\
    \x0f\x17\n\r\n\x05\x04\x05\x02\x06\x03\x12\x04\xa5\x01\x1a\x1b\nA\n\x02\
    \x04\x06\x12\x06\xab\x01\0\xad\x01\x01\x1a3*\n\x20Represents\x20a\x20res\
    ponse\x20back\x20from\x20a\x20saved\x20message\n\n\x0b\n\x03\x04\x06\x01\
    \x12\x04\xab\x01\x08\x1d\n$\n\x04\x04\x06\x02\0\x12\x04\xac\x01\x08\x16\
    \"\x16\x20returned\x20message\x20ID.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\
    \x04\xac\x01\x08\x0e\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xac\x01\x0f\x11\
    \n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xac\x01\x14\x15\n\x0c\n\x02\x04\x07\
    \x12\x06\xaf\x01\0\xb7\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xaf\x01\
    \x08\x0f\n%\n\x04\x04\x07\x02\0\x12\x04\xb0\x01\x08\x16\"\x17\x20The\x20\
    ID\x20of\x20the\x20message\n\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xb0\x01\
    \x08\x0e\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xb0\x01\x0f\x11\n\r\n\x05\
    \x04\x07\x02\0\x03\x12\x04\xb0\x01\x14\x15\n+\n\x04\x04\x07\x02\x01\x12\
    \x04\xb1\x01\x08\x18\"\x1d\x20The\x20DIDComm\x20type\x20of\x20message\n\
    \n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xb1\x01\x08\x0e\n\r\n\x05\x04\x07\
    \x02\x01\x01\x12\x04\xb1\x01\x0f\x13\n\r\n\x05\x04\x07\x02\x01\x03\x12\
    \x04\xb1\x01\x16\x17\n1\n\x04\x04\x07\x02\x02\x12\x04\xb2\x01\x08'\"#\
    \x20The\x20recipients\x20the\x20message\x20is\x20for\n\n\r\n\x05\x04\x07\
    \x02\x02\x04\x12\x04\xb2\x01\x08\x10\n\r\n\x05\x04\x07\x02\x02\x05\x12\
    \x04\xb2\x01\x11\x17\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xb2\x01\x18\"\
    \n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xb2\x01%&\n5\n\x04\x04\x07\x02\
    \x03\x12\x04\xb3\x01\x08\x18\"'\x20The\x20JSON\x20encoded\x20DIDComm\x20\
    data\x20message\n\n\r\n\x05\x04\x07\x02\x03\x05\x12\x04\xb3\x01\x08\x0e\
    \n\r\n\x05\x04\x07\x02\x03\x01\x12\x04\xb3\x01\x0f\x13\n\r\n\x05\x04\x07\
    \x02\x03\x03\x12\x04\xb3\x01\x16\x17\n4\n\x04\x04\x07\x02\x04\x12\x04\
    \xb4\x01\x08\x1d\"&\x20The\x20transport\x20type\x20(https/lightning)\n\n\
    \r\n\x05\x04\x07\x02\x04\x05\x12\x04\xb4\x01\x08\x0e\n\r\n\x05\x04\x07\
    \x02\x04\x01\x12\x04\xb4\x01\x0f\x18\n\r\n\x05\x04\x07\x02\x04\x03\x12\
    \x04\xb4\x01\x1b\x1c\n/\n\x04\x04\x07\x02\x05\x12\x04\xb5\x01\x08\x1c\"!\
    \x20The\x20group\x20id\x20for\x20the\x20recipients\n\n\r\n\x05\x04\x07\
    \x02\x05\x05\x12\x04\xb5\x01\x08\x0e\n\r\n\x05\x04\x07\x02\x05\x01\x12\
    \x04\xb5\x01\x0f\x17\n\r\n\x05\x04\x07\x02\x05\x03\x12\x04\xb5\x01\x1a\
    \x1b\n*\n\x04\x04\x07\x02\x06\x12\x04\xb6\x01\x08)\"\x1c\x20The\x20event\
    s\x20for\x20the\x20message\n\n\r\n\x05\x04\x07\x02\x06\x04\x12\x04\xb6\
    \x01\x08\x10\n\r\n\x05\x04\x07\x02\x06\x06\x12\x04\xb6\x01\x11\x1d\n\r\n\
    \x05\x04\x07\x02\x06\x01\x12\x04\xb6\x01\x1e$\n\r\n\x05\x04\x07\x02\x06\
    \x03\x12\x04\xb6\x01'(\n\x0c\n\x02\x04\x08\x12\x06\xb9\x01\0\xbf\x01\x01\
    \n\x0b\n\x03\x04\x08\x01\x12\x04\xb9\x01\x08\x14\n+\n\x04\x04\x08\x02\0\
    \x12\x04\xba\x01\x08\x16\"\x1d\x20The\x20ID\x20of\x20the\x20message\x20e\
    vent\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xba\x01\x08\x0e\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xba\x01\x0f\x11\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xba\x01\x14\x15\n;\n\x04\x04\x08\x02\x01\x12\x04\xbb\x01\x08\x1d\"-\
    \x20The\x20ID\x20of\x20the\x20message\x20this\x20event\x20represents\n\n\
    \r\n\x05\x04\x08\x02\x01\x05\x12\x04\xbb\x01\x08\x0e\n\r\n\x05\x04\x08\
    \x02\x01\x01\x12\x04\xbb\x01\x0f\x18\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\xbb\x01\x1b\x1c\n;\n\x04\x04\x08\x02\x02\x12\x04\xbc\x01\x08\x17\"-\
    \x20The\x20ID\x20of\x20the\x20message\x20this\x20event\x20represents\n\n\
    \r\n\x05\x04\x08\x02\x02\x05\x12\x04\xbc\x01\x08\x0e\n\r\n\x05\x04\x08\
    \x02\x02\x01\x12\x04\xbc\x01\x0f\x12\n\r\n\x05\x04\x08\x02\x02\x03\x12\
    \x04\xbc\x01\x15\x16\n;\n\x04\x04\x08\x02\x03\x12\x04\xbd\x01\x08\x18\"-\
    \x20The\x20ID\x20of\x20the\x20message\x20this\x20event\x20represents\n\n\
    \r\n\x05\x04\x08\x02\x03\x05\x12\x04\xbd\x01\x08\x0e\n\r\n\x05\x04\x08\
    \x02\x03\x01\x12\x04\xbd\x01\x0f\x13\n\r\n\x05\x04\x08\x02\x03\x03\x12\
    \x04\xbd\x01\x16\x17\n-\n\x04\x04\x08\x02\x04\x12\x04\xbe\x01\x080\"\x1f\
    \x20The\x20time\x20the\x20event\x20took\x20place\n\n\r\n\x05\x04\x08\x02\
    \x04\x06\x12\x04\xbe\x01\x08!\n\r\n\x05\x04\x08\x02\x04\x01\x12\x04\xbe\
    \x01\"+\n\r\n\x05\x04\x08\x02\x04\x03\x12\x04\xbe\x01./\n9\n\x02\x04\t\
    \x12\x06\xc4\x01\0\xc7\x01\x01\x1a+*\n\x20Represents\x20a\x20message\x20\
    get\x20a\x20message\x20list\n\n\x0b\n\x03\x04\t\x01\x12\x04\xc4\x01\x08\
    \x1d\n%\n\x04\x04\t\x02\0\x12\x04\xc5\x01\x08\x16\"\x17\x20The\x20ID\x20\
    of\x20the\x20message\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\xc5\x01\x08\x0e\
    \n\r\n\x05\x04\t\x02\0\x01\x12\x04\xc5\x01\x0f\x11\n\r\n\x05\x04\t\x02\0\
    \x03\x12\x04\xc5\x01\x14\x15\n'\n\x04\x04\t\x02\x01\x12\x04\xc6\x01\x08\
    \x18\"\x19\x20The\x20type\x20of\x20the\x20message\n\n\r\n\x05\x04\t\x02\
    \x01\x05\x12\x04\xc6\x01\x08\x0e\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xc6\
    \x01\x0f\x13\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xc6\x01\x16\x17\nF\n\
    \x02\x04\n\x12\x06\xcc\x01\0\xce\x01\x01\x1a8*\n\x20Represents\x20a\x20r\
    esponse\x20back\x20containing\x20a\x20message\x20list\n\n\x0b\n\x03\x04\
    \n\x01\x12\x04\xcc\x01\x08\x1e\n\x20\n\x04\x04\n\x02\0\x12\x04\xcd\x01\
    \x08&\"\x12\x20The\x20message\x20list\n\n\r\n\x05\x04\n\x02\0\x04\x12\
    \x04\xcd\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x06\x12\x04\xcd\x01\x11\x18\n\
    \r\n\x05\x04\n\x02\0\x01\x12\x04\xcd\x01\x19!\n\r\n\x05\x04\n\x02\0\x03\
    \x12\x04\xcd\x01$%\n;\n\x02\x04\x0b\x12\x06\xd3\x01\0\xd5\x01\x01\x1a-*\
    \n\x20Represents\x20a\x20request\x20to\x20delete\x20a\x20message.\n\n\
    \x0b\n\x03\x04\x0b\x01\x12\x04\xd3\x01\x08\x1c\n/\n\x04\x04\x0b\x02\0\
    \x12\x04\xd4\x01\x08\x16\"!\x20The\x20ID\x20of\x20the\x20message\x20to\
    \x20delete\n\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xd4\x01\x08\x0e\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\xd4\x01\x0f\x11\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\xd4\x01\x14\x15\nN\n\x02\x04\x0c\x12\x06\xda\x01\0\xdb\x01\
    \x01\x1a@*\n\x20Represents\x20a\x20response\x20containing\x20the\x20mess\
    age\x20deletion\x20event.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xda\x01\x08\
    \x1d\nA\n\x02\x04\r\x12\x06\xe0\x01\0\xe2\x01\x01\x1a3*\n\x20Represents\
    \x20a\x20request\x20to\x20delete\x20a\x20group\x20message.\n\n\x0b\n\x03\
    \x04\r\x01\x12\x04\xe0\x01\x08!\n6\n\x04\x04\r\x02\0\x12\x04\xe1\x01\x08\
    \x1c\"(\x20The\x20group\x20ID\x20of\x20the\x20messages\x20to\x20delete\n\
    \n\r\n\x05\x04\r\x02\0\x05\x12\x04\xe1\x01\x08\x0e\n\r\n\x05\x04\r\x02\0\
    \x01\x12\x04\xe1\x01\x0f\x17\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xe1\x01\
    \x1a\x1b\nN\n\x02\x04\x0e\x12\x06\xe7\x01\0\xe8\x01\x01\x1a@*\n\x20Repre\
    sents\x20a\x20response\x20containing\x20the\x20message\x20deletion\x20ev\
    ent.\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\xe7\x01\x08\"b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
