// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/messaging/messaging.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
///  Represents a message send to another DID
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.SendMessageRequest)
pub struct SendMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:messaging.SendMessageRequest.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SendMessageRequest.did)
    pub did: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SendMessageRequest.amount)
    pub amount: i64,
    // @@protoc_insertion_point(field:messaging.SendMessageRequest.reply_to_id)
    pub reply_to_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.SendMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendMessageRequest {
    fn default() -> &'a SendMessageRequest {
        <SendMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageRequest {
    pub fn new() -> SendMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &SendMessageRequest| { &m.msg },
            |m: &mut SendMessageRequest| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "did",
            |m: &SendMessageRequest| { &m.did },
            |m: &mut SendMessageRequest| { &mut m.did },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &SendMessageRequest| { &m.amount },
            |m: &mut SendMessageRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reply_to_id",
            |m: &SendMessageRequest| { &m.reply_to_id },
            |m: &mut SendMessageRequest| { &mut m.reply_to_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendMessageRequest>(
            "SendMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendMessageRequest {
    const NAME: &'static str = "SendMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.msg = is.read_string()?;
                },
                18 => {
                    self.did = is.read_string()?;
                },
                24 => {
                    self.amount = is.read_int64()?;
                },
                34 => {
                    self.reply_to_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.did);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.amount);
        }
        if !self.reply_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reply_to_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        if !self.did.is_empty() {
            os.write_string(2, &self.did)?;
        }
        if self.amount != 0 {
            os.write_int64(3, self.amount)?;
        }
        if !self.reply_to_id.is_empty() {
            os.write_string(4, &self.reply_to_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendMessageRequest {
        SendMessageRequest::new()
    }

    fn clear(&mut self) {
        self.msg.clear();
        self.did.clear();
        self.amount = 0;
        self.reply_to_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendMessageRequest {
        static instance: SendMessageRequest = SendMessageRequest {
            msg: ::std::string::String::new(),
            did: ::std::string::String::new(),
            amount: 0,
            reply_to_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from a sent message
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.SendMessageResponse)
pub struct SendMessageResponse {
    // message fields
    // @@protoc_insertion_point(field:messaging.SendMessageResponse.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.SendMessageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendMessageResponse {
    fn default() -> &'a SendMessageResponse {
        <SendMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageResponse {
    pub fn new() -> SendMessageResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SendMessageResponse| { &m.id },
            |m: &mut SendMessageResponse| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendMessageResponse>(
            "SendMessageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendMessageResponse {
    const NAME: &'static str = "SendMessageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendMessageResponse {
        SendMessageResponse::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendMessageResponse {
        static instance: SendMessageResponse = SendMessageResponse {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendMessageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendMessageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents the preferences for sending messages
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.MessageSettings)
pub struct MessageSettings {
    // message fields
    // @@protoc_insertion_point(field:messaging.MessageSettings.protocol_preferences)
    pub protocol_preferences: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.MessageSettings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageSettings {
    fn default() -> &'a MessageSettings {
        <MessageSettings as ::protobuf::Message>::default_instance()
    }
}

impl MessageSettings {
    pub fn new() -> MessageSettings {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "protocol_preferences",
            |m: &MessageSettings| { &m.protocol_preferences },
            |m: &mut MessageSettings| { &mut m.protocol_preferences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageSettings>(
            "MessageSettings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageSettings {
    const NAME: &'static str = "MessageSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.protocol_preferences.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.protocol_preferences {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.protocol_preferences {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageSettings {
        MessageSettings::new()
    }

    fn clear(&mut self) {
        self.protocol_preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageSettings {
        static instance: MessageSettings = MessageSettings {
            protocol_preferences: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageSettings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageSettings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a message send to another DID
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.SendMessageV2Request)
pub struct SendMessageV2Request {
    // message fields
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.body)
    pub body: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.did)
    pub did: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.amount)
    pub amount: i64,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.reply_to_id)
    pub reply_to_id: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.message_settings)
    pub message_settings: ::protobuf::MessageField<MessageSettings>,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.recipient_list)
    pub recipient_list: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:messaging.SendMessageV2Request.group_id)
    pub group_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.SendMessageV2Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendMessageV2Request {
    fn default() -> &'a SendMessageV2Request {
        <SendMessageV2Request as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageV2Request {
    pub fn new() -> SendMessageV2Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &SendMessageV2Request| { &m.body },
            |m: &mut SendMessageV2Request| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &SendMessageV2Request| { &m.type_ },
            |m: &mut SendMessageV2Request| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "did",
            |m: &SendMessageV2Request| { &m.did },
            |m: &mut SendMessageV2Request| { &mut m.did },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &SendMessageV2Request| { &m.amount },
            |m: &mut SendMessageV2Request| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reply_to_id",
            |m: &SendMessageV2Request| { &m.reply_to_id },
            |m: &mut SendMessageV2Request| { &mut m.reply_to_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MessageSettings>(
            "message_settings",
            |m: &SendMessageV2Request| { &m.message_settings },
            |m: &mut SendMessageV2Request| { &mut m.message_settings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipient_list",
            |m: &SendMessageV2Request| { &m.recipient_list },
            |m: &mut SendMessageV2Request| { &mut m.recipient_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &SendMessageV2Request| { &m.group_id },
            |m: &mut SendMessageV2Request| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendMessageV2Request>(
            "SendMessageV2Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendMessageV2Request {
    const NAME: &'static str = "SendMessageV2Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                26 => {
                    self.did = is.read_string()?;
                },
                32 => {
                    self.amount = is.read_int64()?;
                },
                42 => {
                    self.reply_to_id = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message_settings)?;
                },
                58 => {
                    self.recipient_list.push(is.read_string()?);
                },
                66 => {
                    self.group_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.body);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.did);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.amount);
        }
        if !self.reply_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reply_to_id);
        }
        if let Some(v) = self.message_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.recipient_list {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.body.is_empty() {
            os.write_string(1, &self.body)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if !self.did.is_empty() {
            os.write_string(3, &self.did)?;
        }
        if self.amount != 0 {
            os.write_int64(4, self.amount)?;
        }
        if !self.reply_to_id.is_empty() {
            os.write_string(5, &self.reply_to_id)?;
        }
        if let Some(v) = self.message_settings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.recipient_list {
            os.write_string(7, &v)?;
        };
        if !self.group_id.is_empty() {
            os.write_string(8, &self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendMessageV2Request {
        SendMessageV2Request::new()
    }

    fn clear(&mut self) {
        self.body.clear();
        self.type_.clear();
        self.did.clear();
        self.amount = 0;
        self.reply_to_id.clear();
        self.message_settings.clear();
        self.recipient_list.clear();
        self.group_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendMessageV2Request {
        static instance: SendMessageV2Request = SendMessageV2Request {
            body: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            did: ::std::string::String::new(),
            amount: 0,
            reply_to_id: ::std::string::String::new(),
            message_settings: ::protobuf::MessageField::none(),
            recipient_list: ::std::vec::Vec::new(),
            group_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendMessageV2Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendMessageV2Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendMessageV2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageV2Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from a sent message
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.SendMessageV2Response)
pub struct SendMessageV2Response {
    // message fields
    // @@protoc_insertion_point(field:messaging.SendMessageV2Response.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.SendMessageV2Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendMessageV2Response {
    fn default() -> &'a SendMessageV2Response {
        <SendMessageV2Response as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageV2Response {
    pub fn new() -> SendMessageV2Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SendMessageV2Response| { &m.id },
            |m: &mut SendMessageV2Response| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendMessageV2Response>(
            "SendMessageV2Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendMessageV2Response {
    const NAME: &'static str = "SendMessageV2Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendMessageV2Response {
        SendMessageV2Response::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendMessageV2Response {
        static instance: SendMessageV2Response = SendMessageV2Response {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendMessageV2Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendMessageV2Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendMessageV2Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageV2Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a message to save locally. Useful if it was sent out of band.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.SaveMessageV2Request)
pub struct SaveMessageV2Request {
    // message fields
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.body)
    pub body: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.did)
    pub did: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.from)
    pub from: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.reply_to_id)
    pub reply_to_id: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.recipient_list)
    pub recipient_list: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Request.group_id)
    pub group_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.SaveMessageV2Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveMessageV2Request {
    fn default() -> &'a SaveMessageV2Request {
        <SaveMessageV2Request as ::protobuf::Message>::default_instance()
    }
}

impl SaveMessageV2Request {
    pub fn new() -> SaveMessageV2Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &SaveMessageV2Request| { &m.body },
            |m: &mut SaveMessageV2Request| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &SaveMessageV2Request| { &m.type_ },
            |m: &mut SaveMessageV2Request| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "did",
            |m: &SaveMessageV2Request| { &m.did },
            |m: &mut SaveMessageV2Request| { &mut m.did },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from",
            |m: &SaveMessageV2Request| { &m.from },
            |m: &mut SaveMessageV2Request| { &mut m.from },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reply_to_id",
            |m: &SaveMessageV2Request| { &m.reply_to_id },
            |m: &mut SaveMessageV2Request| { &mut m.reply_to_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipient_list",
            |m: &SaveMessageV2Request| { &m.recipient_list },
            |m: &mut SaveMessageV2Request| { &mut m.recipient_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &SaveMessageV2Request| { &m.group_id },
            |m: &mut SaveMessageV2Request| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveMessageV2Request>(
            "SaveMessageV2Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveMessageV2Request {
    const NAME: &'static str = "SaveMessageV2Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                26 => {
                    self.did = is.read_string()?;
                },
                34 => {
                    self.from = is.read_string()?;
                },
                42 => {
                    self.reply_to_id = is.read_string()?;
                },
                58 => {
                    self.recipient_list.push(is.read_string()?);
                },
                66 => {
                    self.group_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.body);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.did);
        }
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.from);
        }
        if !self.reply_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reply_to_id);
        }
        for value in &self.recipient_list {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.body.is_empty() {
            os.write_string(1, &self.body)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if !self.did.is_empty() {
            os.write_string(3, &self.did)?;
        }
        if !self.from.is_empty() {
            os.write_string(4, &self.from)?;
        }
        if !self.reply_to_id.is_empty() {
            os.write_string(5, &self.reply_to_id)?;
        }
        for v in &self.recipient_list {
            os.write_string(7, &v)?;
        };
        if !self.group_id.is_empty() {
            os.write_string(8, &self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveMessageV2Request {
        SaveMessageV2Request::new()
    }

    fn clear(&mut self) {
        self.body.clear();
        self.type_.clear();
        self.did.clear();
        self.from.clear();
        self.reply_to_id.clear();
        self.recipient_list.clear();
        self.group_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveMessageV2Request {
        static instance: SaveMessageV2Request = SaveMessageV2Request {
            body: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            did: ::std::string::String::new(),
            from: ::std::string::String::new(),
            reply_to_id: ::std::string::String::new(),
            recipient_list: ::std::vec::Vec::new(),
            group_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveMessageV2Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveMessageV2Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveMessageV2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveMessageV2Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from a saved message
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.SaveMessageV2Response)
pub struct SaveMessageV2Response {
    // message fields
    // @@protoc_insertion_point(field:messaging.SaveMessageV2Response.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.SaveMessageV2Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveMessageV2Response {
    fn default() -> &'a SaveMessageV2Response {
        <SaveMessageV2Response as ::protobuf::Message>::default_instance()
    }
}

impl SaveMessageV2Response {
    pub fn new() -> SaveMessageV2Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SaveMessageV2Response| { &m.id },
            |m: &mut SaveMessageV2Response| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveMessageV2Response>(
            "SaveMessageV2Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveMessageV2Response {
    const NAME: &'static str = "SaveMessageV2Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveMessageV2Response {
        SaveMessageV2Response::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveMessageV2Response {
        static instance: SaveMessageV2Response = SaveMessageV2Response {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveMessageV2Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveMessageV2Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveMessageV2Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveMessageV2Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.Message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:messaging.Message.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.Message.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.Message.recipients)
    pub recipients: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:messaging.Message.data)
    pub data: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.Message.transport)
    pub transport: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.Message.group_id)
    pub group_id: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.Message.events)
    pub events: ::std::vec::Vec<MessageEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Message| { &m.id },
            |m: &mut Message| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Message| { &m.type_ },
            |m: &mut Message| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipients",
            |m: &Message| { &m.recipients },
            |m: &mut Message| { &mut m.recipients },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Message| { &m.data },
            |m: &mut Message| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transport",
            |m: &Message| { &m.transport },
            |m: &mut Message| { &mut m.transport },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &Message| { &m.group_id },
            |m: &mut Message| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &Message| { &m.events },
            |m: &mut Message| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                26 => {
                    self.recipients.push(is.read_string()?);
                },
                34 => {
                    self.data = is.read_string()?;
                },
                42 => {
                    self.transport = is.read_string()?;
                },
                50 => {
                    self.group_id = is.read_string()?;
                },
                58 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        for value in &self.recipients {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.data);
        }
        if !self.transport.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.transport);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.group_id);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        for v in &self.recipients {
            os.write_string(3, &v)?;
        };
        if !self.data.is_empty() {
            os.write_string(4, &self.data)?;
        }
        if !self.transport.is_empty() {
            os.write_string(5, &self.transport)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(6, &self.group_id)?;
        }
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.type_.clear();
        self.recipients.clear();
        self.data.clear();
        self.transport.clear();
        self.group_id.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            id: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            recipients: ::std::vec::Vec::new(),
            data: ::std::string::String::new(),
            transport: ::std::string::String::new(),
            group_id: ::std::string::String::new(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.MessageEvent)
pub struct MessageEvent {
    // message fields
    // @@protoc_insertion_point(field:messaging.MessageEvent.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.MessageEvent.MessageId)
    pub MessageId: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.MessageEvent.DID)
    pub DID: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.MessageEvent.Type)
    pub Type: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.MessageEvent.EventTime)
    pub EventTime: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.MessageEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageEvent {
    fn default() -> &'a MessageEvent {
        <MessageEvent as ::protobuf::Message>::default_instance()
    }
}

impl MessageEvent {
    pub fn new() -> MessageEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MessageEvent| { &m.id },
            |m: &mut MessageEvent| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MessageId",
            |m: &MessageEvent| { &m.MessageId },
            |m: &mut MessageEvent| { &mut m.MessageId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DID",
            |m: &MessageEvent| { &m.DID },
            |m: &mut MessageEvent| { &mut m.DID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Type",
            |m: &MessageEvent| { &m.Type },
            |m: &mut MessageEvent| { &mut m.Type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "EventTime",
            |m: &MessageEvent| { &m.EventTime },
            |m: &mut MessageEvent| { &mut m.EventTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageEvent>(
            "MessageEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageEvent {
    const NAME: &'static str = "MessageEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.MessageId = is.read_string()?;
                },
                26 => {
                    self.DID = is.read_string()?;
                },
                34 => {
                    self.Type = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EventTime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.MessageId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.MessageId);
        }
        if !self.DID.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.DID);
        }
        if !self.Type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Type);
        }
        if let Some(v) = self.EventTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.MessageId.is_empty() {
            os.write_string(2, &self.MessageId)?;
        }
        if !self.DID.is_empty() {
            os.write_string(3, &self.DID)?;
        }
        if !self.Type.is_empty() {
            os.write_string(4, &self.Type)?;
        }
        if let Some(v) = self.EventTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageEvent {
        MessageEvent::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.MessageId.clear();
        self.DID.clear();
        self.Type.clear();
        self.EventTime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageEvent {
        static instance: MessageEvent = MessageEvent {
            id: ::std::string::String::new(),
            MessageId: ::std::string::String::new(),
            DID: ::std::string::String::new(),
            Type: ::std::string::String::new(),
            EventTime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a message get a message list
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.GetMessageListRequest)
pub struct GetMessageListRequest {
    // message fields
    // @@protoc_insertion_point(field:messaging.GetMessageListRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:messaging.GetMessageListRequest.type)
    pub type_: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.GetMessageListRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMessageListRequest {
    fn default() -> &'a GetMessageListRequest {
        <GetMessageListRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMessageListRequest {
    pub fn new() -> GetMessageListRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetMessageListRequest| { &m.id },
            |m: &mut GetMessageListRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &GetMessageListRequest| { &m.type_ },
            |m: &mut GetMessageListRequest| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMessageListRequest>(
            "GetMessageListRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMessageListRequest {
    const NAME: &'static str = "GetMessageListRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMessageListRequest {
        GetMessageListRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.type_.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMessageListRequest {
        static instance: GetMessageListRequest = GetMessageListRequest {
            id: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMessageListRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMessageListRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMessageListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMessageListRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back containing a message list
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.GetMessageListResponse)
pub struct GetMessageListResponse {
    // message fields
    // @@protoc_insertion_point(field:messaging.GetMessageListResponse.messages)
    pub messages: ::std::vec::Vec<Message>,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.GetMessageListResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMessageListResponse {
    fn default() -> &'a GetMessageListResponse {
        <GetMessageListResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMessageListResponse {
    pub fn new() -> GetMessageListResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &GetMessageListResponse| { &m.messages },
            |m: &mut GetMessageListResponse| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMessageListResponse>(
            "GetMessageListResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMessageListResponse {
    const NAME: &'static str = "GetMessageListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMessageListResponse {
        GetMessageListResponse::new()
    }

    fn clear(&mut self) {
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMessageListResponse {
        static instance: GetMessageListResponse = GetMessageListResponse {
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMessageListResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMessageListResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMessageListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMessageListResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to delete a message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.DeleteMessageRequest)
pub struct DeleteMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:messaging.DeleteMessageRequest.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.DeleteMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteMessageRequest {
    fn default() -> &'a DeleteMessageRequest {
        <DeleteMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessageRequest {
    pub fn new() -> DeleteMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteMessageRequest| { &m.id },
            |m: &mut DeleteMessageRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteMessageRequest>(
            "DeleteMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteMessageRequest {
    const NAME: &'static str = "DeleteMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteMessageRequest {
        DeleteMessageRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteMessageRequest {
        static instance: DeleteMessageRequest = DeleteMessageRequest {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the message deletion event.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.DeleteMessageResponse)
pub struct DeleteMessageResponse {
    // special fields
    // @@protoc_insertion_point(special_field:messaging.DeleteMessageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteMessageResponse {
    fn default() -> &'a DeleteMessageResponse {
        <DeleteMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessageResponse {
    pub fn new() -> DeleteMessageResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteMessageResponse>(
            "DeleteMessageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteMessageResponse {
    const NAME: &'static str = "DeleteMessageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteMessageResponse {
        DeleteMessageResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteMessageResponse {
        static instance: DeleteMessageResponse = DeleteMessageResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteMessageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteMessageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to delete a group message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.DeleteGroupMessageRequest)
pub struct DeleteGroupMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:messaging.DeleteGroupMessageRequest.group_id)
    pub group_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:messaging.DeleteGroupMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteGroupMessageRequest {
    fn default() -> &'a DeleteGroupMessageRequest {
        <DeleteGroupMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGroupMessageRequest {
    pub fn new() -> DeleteGroupMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &DeleteGroupMessageRequest| { &m.group_id },
            |m: &mut DeleteGroupMessageRequest| { &mut m.group_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteGroupMessageRequest>(
            "DeleteGroupMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteGroupMessageRequest {
    const NAME: &'static str = "DeleteGroupMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.group_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.group_id.is_empty() {
            os.write_string(1, &self.group_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteGroupMessageRequest {
        DeleteGroupMessageRequest::new()
    }

    fn clear(&mut self) {
        self.group_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteGroupMessageRequest {
        static instance: DeleteGroupMessageRequest = DeleteGroupMessageRequest {
            group_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteGroupMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteGroupMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteGroupMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGroupMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the message deletion event.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:messaging.DeleteGroupMessageResponse)
pub struct DeleteGroupMessageResponse {
    // special fields
    // @@protoc_insertion_point(special_field:messaging.DeleteGroupMessageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteGroupMessageResponse {
    fn default() -> &'a DeleteGroupMessageResponse {
        <DeleteGroupMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGroupMessageResponse {
    pub fn new() -> DeleteGroupMessageResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteGroupMessageResponse>(
            "DeleteGroupMessageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteGroupMessageResponse {
    const NAME: &'static str = "DeleteGroupMessageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteGroupMessageResponse {
        DeleteGroupMessageResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteGroupMessageResponse {
        static instance: DeleteGroupMessageResponse = DeleteGroupMessageResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteGroupMessageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteGroupMessageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteGroupMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGroupMessageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/imp/api/messaging/messaging.proto\x12\tmessaging\x1a\x1cgoogle/\
    api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \x1a\x1fgoogle/protobuf/timestamp.proto\"p\n\x12SendMessageRequest\x12\
    \x10\n\x03msg\x18\x01\x20\x01(\tR\x03msg\x12\x10\n\x03did\x18\x02\x20\
    \x01(\tR\x03did\x12\x16\n\x06amount\x18\x03\x20\x01(\x03R\x06amount\x12\
    \x1e\n\x0breply_to_id\x18\x04\x20\x01(\tR\treplyToId\"%\n\x13SendMessage\
    Response\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"D\n\x0fMessageSettin\
    gs\x121\n\x14protocol_preferences\x18\x01\x20\x03(\tR\x13protocolPrefere\
    nces\"\x91\x02\n\x14SendMessageV2Request\x12\x12\n\x04body\x18\x01\x20\
    \x01(\tR\x04body\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x10\n\
    \x03did\x18\x03\x20\x01(\tR\x03did\x12\x16\n\x06amount\x18\x04\x20\x01(\
    \x03R\x06amount\x12\x1e\n\x0breply_to_id\x18\x05\x20\x01(\tR\treplyToId\
    \x12E\n\x10message_settings\x18\x06\x20\x01(\x0b2\x1a.messaging.MessageS\
    ettingsR\x0fmessageSettings\x12%\n\x0erecipient_list\x18\x07\x20\x03(\tR\
    \rrecipientList\x12\x19\n\x08group_id\x18\x08\x20\x01(\tR\x07groupId\"'\
    \n\x15SendMessageV2Response\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\
    \xc6\x01\n\x14SaveMessageV2Request\x12\x12\n\x04body\x18\x01\x20\x01(\tR\
    \x04body\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x10\n\x03did\
    \x18\x03\x20\x01(\tR\x03did\x12\x12\n\x04from\x18\x04\x20\x01(\tR\x04fro\
    m\x12\x1e\n\x0breply_to_id\x18\x05\x20\x01(\tR\treplyToId\x12%\n\x0ereci\
    pient_list\x18\x07\x20\x03(\tR\rrecipientList\x12\x19\n\x08group_id\x18\
    \x08\x20\x01(\tR\x07groupId\"'\n\x15SaveMessageV2Response\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\tR\x02id\"\xcb\x01\n\x07Message\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\
    \x1e\n\nrecipients\x18\x03\x20\x03(\tR\nrecipients\x12\x12\n\x04data\x18\
    \x04\x20\x01(\tR\x04data\x12\x1c\n\ttransport\x18\x05\x20\x01(\tR\ttrans\
    port\x12\x19\n\x08group_id\x18\x06\x20\x01(\tR\x07groupId\x12/\n\x06even\
    ts\x18\x07\x20\x03(\x0b2\x17.messaging.MessageEventR\x06events\"\x9c\x01\
    \n\x0cMessageEvent\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1c\n\t\
    MessageId\x18\x02\x20\x01(\tR\tMessageId\x12\x10\n\x03DID\x18\x03\x20\
    \x01(\tR\x03DID\x12\x12\n\x04Type\x18\x04\x20\x01(\tR\x04Type\x128\n\tEv\
    entTime\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tEventTime\
    \";\n\x15GetMessageListRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\"H\n\x16GetMessageListRes\
    ponse\x12.\n\x08messages\x18\x01\x20\x03(\x0b2\x12.messaging.MessageR\
    \x08messages\"&\n\x14DeleteMessageRequest\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\"\x17\n\x15DeleteMessageResponse\"6\n\x19DeleteGroupMessa\
    geRequest\x12\x19\n\x08group_id\x18\x01\x20\x01(\tR\x07groupId\"\x1c\n\
    \x1aDeleteGroupMessageResponse2\xbc\x05\n\tMessaging\x12i\n\x0bSendMessa\
    ge\x12\x1d.messaging.SendMessageRequest\x1a\x1e.messaging.SendMessageRes\
    ponse\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10/v1/message/send:\x01*\x12o\n\r\
    SendMessageV2\x12\x1f.messaging.SendMessageV2Request\x1a\x20.messaging.S\
    endMessageV2Response\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10/v2/message/send\
    :\x01*\x12o\n\rSaveMessageV2\x12\x1f.messaging.SaveMessageV2Request\x1a\
    \x20.messaging.SaveMessageV2Response\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10\
    /v2/message/save:\x01*\x12j\n\x0eGetMessageList\x12\x20.messaging.GetMes\
    sageListRequest\x1a!.messaging.GetMessageListResponse\"\x13\x82\xd3\xe4\
    \x93\x02\r\x12\x0b/v1/message\x12l\n\rDeleteMessage\x12\x1f.messaging.De\
    leteMessageRequest\x1a\x20.messaging.DeleteMessageResponse\"\x18\x82\xd3\
    \xe4\x93\x02\x12*\x10/v1/message/{id}\x12\x87\x01\n\x12DeleteGroupMessag\
    e\x12$.messaging.DeleteGroupMessageRequest\x1a%.messaging.DeleteGroupMes\
    sageResponse\"$\x82\xd3\xe4\x93\x02\x1e*\x1c/v1/message_group/{group_id}\
    B\xbb\x02Z#github.com/imperviousai/freeimp/gen\x92A\x92\x02\x12A\n\x12Me\
    ssaging\x20Services\"&\n\rImpervious\x20AI\x12\x15https://impervious.ai2\
    \x031.0*\x03\x01\x02\x042\x10application/json:\x10application/jsonZa\n_\
    \n\x07api_key\x12T\x08\x02\x125An\x20API\x20key\x20generated\x20by\x20th\
    e\x20daemon\x20for\x20authentication\x1a\x17Grpc-Metadata-X-API-KEY\x20\
    \x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14Documentation\x20on\x20IMP\x12\
    \x1ahttps://docs.impervious.aiJ\x996\n\x07\x12\x05\x01\0\xe8\x01\x01\n>\
    \n\x01\x0c\x12\x03\x01\0\x12\x1a4/\x20Allows\x20for\x20p2p\x20messaging\
    \x20between\x20Impervious\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\0\x12\n\
    \x08\n\x01\x08\x12\x03\x05\0:\n\t\n\x02\x08\x0b\x12\x03\x05\0:\n\t\n\x02\
    \x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x02\x03\x02\
    \x12\x03\t\0)\n\t\n\x01\x08\x12\x04\x0b\0-\x02\n\x0b\n\x03\x08\x92\x08\
    \x12\x04\x0b\0-\x02\nT\n\x02\x06\0\x12\x042\0k\x01\x1aH*\n\x20Messaging\
    \x20service\x20allows\x20for\x20p2p\x20messaging\x20between\x20Imperviou\
    s\x20nodes.\n\n\n\n\x03\x06\0\x01\x12\x032\x08\x11\nC\n\x04\x06\0\x02\0\
    \x12\x046\x08;\t\x1a5*\n\x20SendMessage\x20sends\x20a\x20text\x20message\
    \x20to\x20another\x20node.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x036\x0c\
    \x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x036\x18*\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x0365H\n\r\n\x05\x06\0\x02\0\x04\x12\x047\x10:\x12\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x047\x10:\x12\nY\n\x04\x06\0\x02\x01\
    \x12\x04@\x08E\t\x1aK*\n\x20SendMessageV2\x20sends\x20a\x20byte-encoded\
    \x20json\x20DIDComm\x20message\x20to\x20another\x20DID.\n\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03@\x0c\x19\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03@\x1a.\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03@9N\n\r\n\x05\x06\0\x02\
    \x01\x04\x12\x04A\x10D\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\
    \x04A\x10D\x12\nR\n\x04\x06\0\x02\x02\x12\x04J\x08O\t\x1aD*\n\x20SaveMes\
    sageV2\x20saves\x20a\x20byte-encoded\x20json\x20DIDComm\x20message\x20lo\
    cally.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03J\x0c\x19\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03J\x1a.\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03J9N\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04K\x10N\x12\n\x11\n\t\x06\0\x02\x02\x04\
    \xb0\xca\xbc\"\x12\x04K\x10N\x12\n?\n\x04\x06\0\x02\x03\x12\x04T\x08X\t\
    \x1a1*\n\x20GetMessageList\x20gets\x20messages\x20from\x20the\x20daemon.\
    \n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03T\x0c\x1a\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03T\x1b0\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03T;Q\n\r\n\
    \x05\x06\0\x02\x03\x04\x12\x04U\x10W\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\
    \xca\xbc\"\x12\x04U\x10W\x12\n?\n\x04\x06\0\x02\x04\x12\x04]\x08a\t\x1a1\
    *\n\x20DeleteMessage\x20will\x20delete\x20a\x20specific\x20message.\n\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03]\x0c\x19\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03]\x1a.\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03]9N\n\r\n\x05\
    \x06\0\x02\x04\x04\x12\x04^\x10`\x12\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\
    \xbc\"\x12\x04^\x10`\x12\nR\n\x04\x06\0\x02\x05\x12\x04f\x08j\t\x1aD*\n\
    \x20DeleteGroupMessage\x20will\x20delete\x20all\x20messages\x20from\x20t\
    he\x20same\x20group.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03f\x0c\x1e\n\
    \x0c\n\x05\x06\0\x02\x05\x02\x12\x03f\x1f8\n\x0c\n\x05\x06\0\x02\x05\x03\
    \x12\x03fC]\n\r\n\x05\x06\0\x02\x05\x04\x12\x04g\x10i\x12\n\x11\n\t\x06\
    \0\x02\x05\x04\xb0\xca\xbc\"\x12\x04g\x10i\x12\n8\n\x02\x04\0\x12\x04p\0\
    u\x01\x1a,*\n\x20Represents\x20a\x20message\x20send\x20to\x20another\x20\
    DID\n\n\n\n\x03\x04\0\x01\x12\x03p\x08\x1a\n3\n\x04\x04\0\x02\0\x12\x03q\
    \x08\x17\"&\x20the\x20simple\x20string\x20message\x20to\x20be\x20sent\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03q\x08\x0e\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03q\x0f\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03q\x15\x16\n\x1c\
    \n\x04\x04\0\x02\x01\x12\x03r\x08\x17\"\x0f\x20The\x20other\x20DID\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03r\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03r\x0f\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03r\x15\x16\nY\
    \n\x04\x04\0\x02\x02\x12\x03s\x08\x19\"L\x20Optional\x20satoshi\x20amoun\
    t\x20to\x20send\x20along\x20with\x20the\x20message,\x20defaults\x20to\
    \x201\x20sat.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03s\x08\r\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03s\x0e\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03s\x17\x18\nK\n\x04\x04\0\x02\x03\x12\x03t\x08\x1f\">\x20Optional\x20\
    ID\x20of\x20the\x20message\x20that\x20this\x20message\x20is\x20replying\
    \x20to.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03t\x08\x0e\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03t\x0f\x1a\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03t\
    \x1d\x1e\n>\n\x02\x04\x01\x12\x04z\0|\x01\x1a2*\n\x20Represents\x20a\x20\
    response\x20back\x20from\x20a\x20sent\x20message\n\n\n\n\x03\x04\x01\x01\
    \x12\x03z\x08\x1b\n\"\n\x04\x04\x01\x02\0\x12\x03{\x08\x16\"\x15\x20retu\
    rned\x20message\x20ID\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03{\x08\x0e\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03{\x0f\x11\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03{\x14\x15\nA\n\x02\x04\x02\x12\x06\x81\x01\0\x83\x01\x01\x1a\
    3*\n\x20Represents\x20the\x20preferences\x20for\x20sending\x20messages\n\
    \n\x0b\n\x03\x04\x02\x01\x12\x04\x81\x01\x08\x17\nJ\n\x04\x04\x02\x02\0\
    \x12\x04\x82\x01\x081\"<\x20ordered\x20list\x20of\x20protocol\x20prefere\
    nces\x20to\x20send\x20messages\x20down\n\n\r\n\x05\x04\x02\x02\0\x04\x12\
    \x04\x82\x01\x08\x10\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x82\x01\x11\x17\
    \n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x82\x01\x18,\n\r\n\x05\x04\x02\x02\
    \0\x03\x12\x04\x82\x01/0\n:\n\x02\x04\x03\x12\x06\x89\x01\0\x92\x01\x01\
    \x1a,*\n\x20Represents\x20a\x20message\x20send\x20to\x20another\x20DID\n\
    \n\x0b\n\x03\x04\x03\x01\x12\x04\x89\x01\x08\x1c\nX\n\x04\x04\x03\x02\0\
    \x12\x04\x8a\x01\x08\x18\"J\x20the\x20body\x20of\x20the\x20DIDcomm\x20me\
    ssage,\x20json\x20structure\x20depends\x20on\x20`type`\x20field.\n\n\r\n\
    \x05\x04\x03\x02\0\x05\x12\x04\x8a\x01\x08\x0e\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\x8a\x01\x0f\x13\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x8a\x01\
    \x16\x17\nS\n\x04\x04\x03\x02\x01\x12\x04\x8b\x01\x08\x18\"E\x20the\x20t\
    ype\x20of\x20the\x20DIDcomm\x20message,\x20will\x20determine\x20body\x20\
    json\x20structure\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x8b\x01\x08\
    \x0e\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x8b\x01\x0f\x13\n\r\n\x05\x04\
    \x03\x02\x01\x03\x12\x04\x8b\x01\x16\x17\nc\n\x04\x04\x03\x02\x02\x12\
    \x04\x8c\x01\x08\x17\"U\x20The\x20other\x20DID\x20to\x20send\x20the\x20m\
    essage\x20to.\x20Deprecated\x20for\x20`recipient_list`\x20/\x20`group_id\
    `.\n\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\x8c\x01\x08\x0e\n\r\n\x05\x04\
    \x03\x02\x02\x01\x12\x04\x8c\x01\x0f\x12\n\r\n\x05\x04\x03\x02\x02\x03\
    \x12\x04\x8c\x01\x15\x16\nZ\n\x04\x04\x03\x02\x03\x12\x04\x8d\x01\x08\
    \x19\"L\x20Optional\x20satoshi\x20amount\x20to\x20send\x20along\x20with\
    \x20the\x20message,\x20defaults\x20to\x201\x20sat.\n\n\r\n\x05\x04\x03\
    \x02\x03\x05\x12\x04\x8d\x01\x08\r\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\
    \x8d\x01\x0e\x14\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\x8d\x01\x17\x18\n\
    L\n\x04\x04\x03\x02\x04\x12\x04\x8e\x01\x08\x1f\">\x20Optional\x20ID\x20\
    of\x20the\x20message\x20that\x20this\x20message\x20is\x20replying\x20to.\
    \n\n\r\n\x05\x04\x03\x02\x04\x05\x12\x04\x8e\x01\x08\x0e\n\r\n\x05\x04\
    \x03\x02\x04\x01\x12\x04\x8e\x01\x0f\x1a\n\r\n\x05\x04\x03\x02\x04\x03\
    \x12\x04\x8e\x01\x1d\x1e\n6\n\x04\x04\x03\x02\x05\x12\x04\x8f\x01\x08-\"\
    (\x20Optional\x20message\x20settings\x20when\x20sending\n\n\r\n\x05\x04\
    \x03\x02\x05\x06\x12\x04\x8f\x01\x08\x17\n\r\n\x05\x04\x03\x02\x05\x01\
    \x12\x04\x8f\x01\x18(\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\x8f\x01+,\nq\
    \n\x04\x04\x03\x02\x06\x12\x04\x90\x01\x08+\"c\x20The\x20list\x20of\x20r\
    ecipient\x20dids\x20to\x20send\x20the\x20message\x20to.\x20Cannot\x20use\
    \x20with\x20`group_id`\x20/\x20`did`\x20parameters.\n\n\r\n\x05\x04\x03\
    \x02\x06\x04\x12\x04\x90\x01\x08\x10\n\r\n\x05\x04\x03\x02\x06\x05\x12\
    \x04\x90\x01\x11\x17\n\r\n\x05\x04\x03\x02\x06\x01\x12\x04\x90\x01\x18&\
    \n\r\n\x05\x04\x03\x02\x06\x03\x12\x04\x90\x01)*\n\x92\x01\n\x04\x04\x03\
    \x02\x07\x12\x04\x91\x01\x08\x1c\"\x83\x01\x20The\x20`group_id`\x20to\
    \x20send\x20the\x20message\x20to,\x20instead\x20of\x20a\x20list\x20of\
    \x20recipient\x20dids.\x20Cannot\x20use\x20with\x20`recipient_list`\x20o\
    r\x20`did`\x20parameters.\n\n\r\n\x05\x04\x03\x02\x07\x05\x12\x04\x91\
    \x01\x08\x0e\n\r\n\x05\x04\x03\x02\x07\x01\x12\x04\x91\x01\x0f\x17\n\r\n\
    \x05\x04\x03\x02\x07\x03\x12\x04\x91\x01\x1a\x1b\n@\n\x02\x04\x04\x12\
    \x06\x97\x01\0\x99\x01\x01\x1a2*\n\x20Represents\x20a\x20response\x20bac\
    k\x20from\x20a\x20sent\x20message\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x97\
    \x01\x08\x1d\n$\n\x04\x04\x04\x02\0\x12\x04\x98\x01\x08\x16\"\x16\x20ret\
    urned\x20message\x20ID.\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x98\x01\
    \x08\x0e\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x98\x01\x0f\x11\n\r\n\x05\
    \x04\x04\x02\0\x03\x12\x04\x98\x01\x14\x15\nZ\n\x02\x04\x05\x12\x06\x9e\
    \x01\0\xa6\x01\x01\x1aL*\n\x20Represents\x20a\x20message\x20to\x20save\
    \x20locally.\x20Useful\x20if\x20it\x20was\x20sent\x20out\x20of\x20band.\
    \n\n\x0b\n\x03\x04\x05\x01\x12\x04\x9e\x01\x08\x1c\nX\n\x04\x04\x05\x02\
    \0\x12\x04\x9f\x01\x08\x18\"J\x20the\x20body\x20of\x20the\x20DIDcomm\x20\
    message,\x20json\x20structure\x20depends\x20on\x20`type`\x20field.\n\n\r\
    \n\x05\x04\x05\x02\0\x05\x12\x04\x9f\x01\x08\x0e\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\x9f\x01\x0f\x13\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x9f\x01\
    \x16\x17\nS\n\x04\x04\x05\x02\x01\x12\x04\xa0\x01\x08\x18\"E\x20the\x20t\
    ype\x20of\x20the\x20DIDcomm\x20message,\x20will\x20determine\x20body\x20\
    json\x20structure\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xa0\x01\x08\
    \x0e\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xa0\x01\x0f\x13\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\xa0\x01\x16\x17\n\xa3\x01\n\x04\x04\x05\x02\x02\
    \x12\x04\xa1\x01\x08\x17\"\x94\x01\x20The\x20DID\x20this\x20message\x20s\
    ent\x20to.\x20It\x20may\x20be\x20the\x20user's\x20if\x20it\x20was\x20rec\
    eived\x20(instead\x20of\x20sent)\x20out\x20of\x20band.\x20Deprecated\x20\
    for\x20`recipient_list`\x20/\x20`group_id`.\n\n\r\n\x05\x04\x05\x02\x02\
    \x05\x12\x04\xa1\x01\x08\x0e\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xa1\
    \x01\x0f\x12\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xa1\x01\x15\x16\n_\n\
    \x04\x04\x05\x02\x03\x12\x04\xa2\x01\x08\x18\"Q\x20The\x20DID\x20this\
    \x20sent\x20from.\x20It\x20may\x20be\x20the\x20other\x20DID\x20if\x20it\
    \x20was\x20received\x20out\x20of\x20band.\n\n\r\n\x05\x04\x05\x02\x03\
    \x05\x12\x04\xa2\x01\x08\x0e\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xa2\
    \x01\x0f\x13\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xa2\x01\x16\x17\nL\n\
    \x04\x04\x05\x02\x04\x12\x04\xa3\x01\x08\x1f\">\x20Optional\x20ID\x20of\
    \x20the\x20message\x20that\x20this\x20message\x20is\x20replying\x20to.\n\
    \n\r\n\x05\x04\x05\x02\x04\x05\x12\x04\xa3\x01\x08\x0e\n\r\n\x05\x04\x05\
    \x02\x04\x01\x12\x04\xa3\x01\x0f\x1a\n\r\n\x05\x04\x05\x02\x04\x03\x12\
    \x04\xa3\x01\x1d\x1e\np\n\x04\x04\x05\x02\x05\x12\x04\xa4\x01\x08+\"b\
    \x20The\x20list\x20of\x20recipient\x20dids\x20the\x20message\x20sent\x20\
    from.\x20Cannot\x20use\x20with\x20`group_id`\x20/\x20`did`\x20parameters\
    .\n\n\r\n\x05\x04\x05\x02\x05\x04\x12\x04\xa4\x01\x08\x10\n\r\n\x05\x04\
    \x05\x02\x05\x05\x12\x04\xa4\x01\x11\x17\n\r\n\x05\x04\x05\x02\x05\x01\
    \x12\x04\xa4\x01\x18&\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\xa4\x01)*\nk\
    \n\x04\x04\x05\x02\x06\x12\x04\xa5\x01\x08\x1c\"]\x20The\x20`group_id`\
    \x20the\x20message\x20sent\x20from.\x20Cannot\x20use\x20with\x20`recipie\
    nt_list`\x20or\x20`did`\x20parameters.\n\n\r\n\x05\x04\x05\x02\x06\x05\
    \x12\x04\xa5\x01\x08\x0e\n\r\n\x05\x04\x05\x02\x06\x01\x12\x04\xa5\x01\
    \x0f\x17\n\r\n\x05\x04\x05\x02\x06\x03\x12\x04\xa5\x01\x1a\x1b\nA\n\x02\
    \x04\x06\x12\x06\xab\x01\0\xad\x01\x01\x1a3*\n\x20Represents\x20a\x20res\
    ponse\x20back\x20from\x20a\x20saved\x20message\n\n\x0b\n\x03\x04\x06\x01\
    \x12\x04\xab\x01\x08\x1d\n$\n\x04\x04\x06\x02\0\x12\x04\xac\x01\x08\x16\
    \"\x16\x20returned\x20message\x20ID.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\
    \x04\xac\x01\x08\x0e\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xac\x01\x0f\x11\
    \n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xac\x01\x14\x15\n\x0c\n\x02\x04\x07\
    \x12\x06\xaf\x01\0\xb7\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xaf\x01\
    \x08\x0f\n%\n\x04\x04\x07\x02\0\x12\x04\xb0\x01\x08\x16\"\x17\x20The\x20\
    ID\x20of\x20the\x20message\n\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xb0\x01\
    \x08\x0e\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xb0\x01\x0f\x11\n\r\n\x05\
    \x04\x07\x02\0\x03\x12\x04\xb0\x01\x14\x15\n+\n\x04\x04\x07\x02\x01\x12\
    \x04\xb1\x01\x08\x18\"\x1d\x20The\x20DIDComm\x20type\x20of\x20message\n\
    \n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xb1\x01\x08\x0e\n\r\n\x05\x04\x07\
    \x02\x01\x01\x12\x04\xb1\x01\x0f\x13\n\r\n\x05\x04\x07\x02\x01\x03\x12\
    \x04\xb1\x01\x16\x17\n1\n\x04\x04\x07\x02\x02\x12\x04\xb2\x01\x08'\"#\
    \x20The\x20recipients\x20the\x20message\x20is\x20for\n\n\r\n\x05\x04\x07\
    \x02\x02\x04\x12\x04\xb2\x01\x08\x10\n\r\n\x05\x04\x07\x02\x02\x05\x12\
    \x04\xb2\x01\x11\x17\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xb2\x01\x18\"\
    \n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xb2\x01%&\n5\n\x04\x04\x07\x02\
    \x03\x12\x04\xb3\x01\x08\x18\"'\x20The\x20JSON\x20encoded\x20DIDComm\x20\
    data\x20message\n\n\r\n\x05\x04\x07\x02\x03\x05\x12\x04\xb3\x01\x08\x0e\
    \n\r\n\x05\x04\x07\x02\x03\x01\x12\x04\xb3\x01\x0f\x13\n\r\n\x05\x04\x07\
    \x02\x03\x03\x12\x04\xb3\x01\x16\x17\n4\n\x04\x04\x07\x02\x04\x12\x04\
    \xb4\x01\x08\x1d\"&\x20The\x20transport\x20type\x20(https/lightning)\n\n\
    \r\n\x05\x04\x07\x02\x04\x05\x12\x04\xb4\x01\x08\x0e\n\r\n\x05\x04\x07\
    \x02\x04\x01\x12\x04\xb4\x01\x0f\x18\n\r\n\x05\x04\x07\x02\x04\x03\x12\
    \x04\xb4\x01\x1b\x1c\n/\n\x04\x04\x07\x02\x05\x12\x04\xb5\x01\x08\x1c\"!\
    \x20The\x20group\x20id\x20for\x20the\x20recipients\n\n\r\n\x05\x04\x07\
    \x02\x05\x05\x12\x04\xb5\x01\x08\x0e\n\r\n\x05\x04\x07\x02\x05\x01\x12\
    \x04\xb5\x01\x0f\x17\n\r\n\x05\x04\x07\x02\x05\x03\x12\x04\xb5\x01\x1a\
    \x1b\n*\n\x04\x04\x07\x02\x06\x12\x04\xb6\x01\x08)\"\x1c\x20The\x20event\
    s\x20for\x20the\x20message\n\n\r\n\x05\x04\x07\x02\x06\x04\x12\x04\xb6\
    \x01\x08\x10\n\r\n\x05\x04\x07\x02\x06\x06\x12\x04\xb6\x01\x11\x1d\n\r\n\
    \x05\x04\x07\x02\x06\x01\x12\x04\xb6\x01\x1e$\n\r\n\x05\x04\x07\x02\x06\
    \x03\x12\x04\xb6\x01'(\n\x0c\n\x02\x04\x08\x12\x06\xb9\x01\0\xbf\x01\x01\
    \n\x0b\n\x03\x04\x08\x01\x12\x04\xb9\x01\x08\x14\n+\n\x04\x04\x08\x02\0\
    \x12\x04\xba\x01\x08\x16\"\x1d\x20The\x20ID\x20of\x20the\x20message\x20e\
    vent\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xba\x01\x08\x0e\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xba\x01\x0f\x11\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xba\x01\x14\x15\n;\n\x04\x04\x08\x02\x01\x12\x04\xbb\x01\x08\x1d\"-\
    \x20The\x20ID\x20of\x20the\x20message\x20this\x20event\x20represents\n\n\
    \r\n\x05\x04\x08\x02\x01\x05\x12\x04\xbb\x01\x08\x0e\n\r\n\x05\x04\x08\
    \x02\x01\x01\x12\x04\xbb\x01\x0f\x18\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\xbb\x01\x1b\x1c\n;\n\x04\x04\x08\x02\x02\x12\x04\xbc\x01\x08\x17\"-\
    \x20The\x20ID\x20of\x20the\x20message\x20this\x20event\x20represents\n\n\
    \r\n\x05\x04\x08\x02\x02\x05\x12\x04\xbc\x01\x08\x0e\n\r\n\x05\x04\x08\
    \x02\x02\x01\x12\x04\xbc\x01\x0f\x12\n\r\n\x05\x04\x08\x02\x02\x03\x12\
    \x04\xbc\x01\x15\x16\n;\n\x04\x04\x08\x02\x03\x12\x04\xbd\x01\x08\x18\"-\
    \x20The\x20ID\x20of\x20the\x20message\x20this\x20event\x20represents\n\n\
    \r\n\x05\x04\x08\x02\x03\x05\x12\x04\xbd\x01\x08\x0e\n\r\n\x05\x04\x08\
    \x02\x03\x01\x12\x04\xbd\x01\x0f\x13\n\r\n\x05\x04\x08\x02\x03\x03\x12\
    \x04\xbd\x01\x16\x17\n-\n\x04\x04\x08\x02\x04\x12\x04\xbe\x01\x080\"\x1f\
    \x20The\x20time\x20the\x20event\x20took\x20place\n\n\r\n\x05\x04\x08\x02\
    \x04\x06\x12\x04\xbe\x01\x08!\n\r\n\x05\x04\x08\x02\x04\x01\x12\x04\xbe\
    \x01\"+\n\r\n\x05\x04\x08\x02\x04\x03\x12\x04\xbe\x01./\n9\n\x02\x04\t\
    \x12\x06\xc4\x01\0\xc7\x01\x01\x1a+*\n\x20Represents\x20a\x20message\x20\
    get\x20a\x20message\x20list\n\n\x0b\n\x03\x04\t\x01\x12\x04\xc4\x01\x08\
    \x1d\n%\n\x04\x04\t\x02\0\x12\x04\xc5\x01\x08\x16\"\x17\x20The\x20ID\x20\
    of\x20the\x20message\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\xc5\x01\x08\x0e\
    \n\r\n\x05\x04\t\x02\0\x01\x12\x04\xc5\x01\x0f\x11\n\r\n\x05\x04\t\x02\0\
    \x03\x12\x04\xc5\x01\x14\x15\n'\n\x04\x04\t\x02\x01\x12\x04\xc6\x01\x08\
    \x18\"\x19\x20The\x20type\x20of\x20the\x20message\n\n\r\n\x05\x04\t\x02\
    \x01\x05\x12\x04\xc6\x01\x08\x0e\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xc6\
    \x01\x0f\x13\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xc6\x01\x16\x17\nF\n\
    \x02\x04\n\x12\x06\xcc\x01\0\xce\x01\x01\x1a8*\n\x20Represents\x20a\x20r\
    esponse\x20back\x20containing\x20a\x20message\x20list\n\n\x0b\n\x03\x04\
    \n\x01\x12\x04\xcc\x01\x08\x1e\n\x20\n\x04\x04\n\x02\0\x12\x04\xcd\x01\
    \x08&\"\x12\x20The\x20message\x20list\n\n\r\n\x05\x04\n\x02\0\x04\x12\
    \x04\xcd\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x06\x12\x04\xcd\x01\x11\x18\n\
    \r\n\x05\x04\n\x02\0\x01\x12\x04\xcd\x01\x19!\n\r\n\x05\x04\n\x02\0\x03\
    \x12\x04\xcd\x01$%\n;\n\x02\x04\x0b\x12\x06\xd3\x01\0\xd5\x01\x01\x1a-*\
    \n\x20Represents\x20a\x20request\x20to\x20delete\x20a\x20message.\n\n\
    \x0b\n\x03\x04\x0b\x01\x12\x04\xd3\x01\x08\x1c\n/\n\x04\x04\x0b\x02\0\
    \x12\x04\xd4\x01\x08\x16\"!\x20The\x20ID\x20of\x20the\x20message\x20to\
    \x20delete\n\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xd4\x01\x08\x0e\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\xd4\x01\x0f\x11\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\xd4\x01\x14\x15\nN\n\x02\x04\x0c\x12\x06\xda\x01\0\xdb\x01\
    \x01\x1a@*\n\x20Represents\x20a\x20response\x20containing\x20the\x20mess\
    age\x20deletion\x20event.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xda\x01\x08\
    \x1d\nA\n\x02\x04\r\x12\x06\xe0\x01\0\xe2\x01\x01\x1a3*\n\x20Represents\
    \x20a\x20request\x20to\x20delete\x20a\x20group\x20message.\n\n\x0b\n\x03\
    \x04\r\x01\x12\x04\xe0\x01\x08!\n6\n\x04\x04\r\x02\0\x12\x04\xe1\x01\x08\
    \x1c\"(\x20The\x20group\x20ID\x20of\x20the\x20messages\x20to\x20delete\n\
    \n\r\n\x05\x04\r\x02\0\x05\x12\x04\xe1\x01\x08\x0e\n\r\n\x05\x04\r\x02\0\
    \x01\x12\x04\xe1\x01\x0f\x17\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xe1\x01\
    \x1a\x1b\nN\n\x02\x04\x0e\x12\x06\xe7\x01\0\xe8\x01\x01\x1a@*\n\x20Repre\
    sents\x20a\x20response\x20containing\x20the\x20message\x20deletion\x20ev\
    ent.\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\xe7\x01\x08\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(15);
            messages.push(SendMessageRequest::generated_message_descriptor_data());
            messages.push(SendMessageResponse::generated_message_descriptor_data());
            messages.push(MessageSettings::generated_message_descriptor_data());
            messages.push(SendMessageV2Request::generated_message_descriptor_data());
            messages.push(SendMessageV2Response::generated_message_descriptor_data());
            messages.push(SaveMessageV2Request::generated_message_descriptor_data());
            messages.push(SaveMessageV2Response::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            messages.push(MessageEvent::generated_message_descriptor_data());
            messages.push(GetMessageListRequest::generated_message_descriptor_data());
            messages.push(GetMessageListResponse::generated_message_descriptor_data());
            messages.push(DeleteMessageRequest::generated_message_descriptor_data());
            messages.push(DeleteMessageResponse::generated_message_descriptor_data());
            messages.push(DeleteGroupMessageRequest::generated_message_descriptor_data());
            messages.push(DeleteGroupMessageResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
