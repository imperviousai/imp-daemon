// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/ipfs/ipfs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
///  Represents a request to add a file to IPFS.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ipfs.AddFileRequest)
pub struct AddFileRequest {
    // message fields
    // @@protoc_insertion_point(field:ipfs.AddFileRequest.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:ipfs.AddFileRequest.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ipfs.AddFileRequest.updatable)
    pub updatable: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ipfs.AddFileRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddFileRequest {
    fn default() -> &'a AddFileRequest {
        <AddFileRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddFileRequest {
    pub fn new() -> AddFileRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AddFileRequest| { &m.name },
            |m: &mut AddFileRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &AddFileRequest| { &m.data },
            |m: &mut AddFileRequest| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updatable",
            |m: &AddFileRequest| { &m.updatable },
            |m: &mut AddFileRequest| { &mut m.updatable },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddFileRequest>(
            "AddFileRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddFileRequest {
    const NAME: &'static str = "AddFileRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                24 => {
                    self.updatable = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if self.updatable != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if self.updatable != false {
            os.write_bool(3, self.updatable)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddFileRequest {
        AddFileRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.data.clear();
        self.updatable = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddFileRequest {
        static instance: AddFileRequest = AddFileRequest {
            name: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            updatable: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddFileRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddFileRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddFileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddFileRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the content ID of the added IPFS file.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ipfs.AddFileResponse)
pub struct AddFileResponse {
    // message fields
    // @@protoc_insertion_point(field:ipfs.AddFileResponse.cid)
    pub cid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ipfs.AddFileResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddFileResponse {
    fn default() -> &'a AddFileResponse {
        <AddFileResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddFileResponse {
    pub fn new() -> AddFileResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cid",
            |m: &AddFileResponse| { &m.cid },
            |m: &mut AddFileResponse| { &mut m.cid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddFileResponse>(
            "AddFileResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddFileResponse {
    const NAME: &'static str = "AddFileResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.cid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.cid.is_empty() {
            os.write_string(1, &self.cid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddFileResponse {
        AddFileResponse::new()
    }

    fn clear(&mut self) {
        self.cid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddFileResponse {
        static instance: AddFileResponse = AddFileResponse {
            cid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddFileResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddFileResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddFileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddFileResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to get a file from IPFS.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ipfs.GetFileRequest)
pub struct GetFileRequest {
    // message fields
    // @@protoc_insertion_point(field:ipfs.GetFileRequest.protocol)
    pub protocol: ::std::string::String,
    // @@protoc_insertion_point(field:ipfs.GetFileRequest.cid)
    pub cid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ipfs.GetFileRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetFileRequest {
    fn default() -> &'a GetFileRequest {
        <GetFileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetFileRequest {
    pub fn new() -> GetFileRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protocol",
            |m: &GetFileRequest| { &m.protocol },
            |m: &mut GetFileRequest| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cid",
            |m: &GetFileRequest| { &m.cid },
            |m: &mut GetFileRequest| { &mut m.cid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetFileRequest>(
            "GetFileRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetFileRequest {
    const NAME: &'static str = "GetFileRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.protocol = is.read_string()?;
                },
                18 => {
                    self.cid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.protocol);
        }
        if !self.cid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.protocol.is_empty() {
            os.write_string(1, &self.protocol)?;
        }
        if !self.cid.is_empty() {
            os.write_string(2, &self.cid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetFileRequest {
        GetFileRequest::new()
    }

    fn clear(&mut self) {
        self.protocol.clear();
        self.cid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetFileRequest {
        static instance: GetFileRequest = GetFileRequest {
            protocol: ::std::string::String::new(),
            cid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetFileRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetFileRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetFileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFileRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contents of the retrieved file.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ipfs.GetFileResponse)
pub struct GetFileResponse {
    // message fields
    // @@protoc_insertion_point(field:ipfs.GetFileResponse.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ipfs.GetFileResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetFileResponse {
    fn default() -> &'a GetFileResponse {
        <GetFileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetFileResponse {
    pub fn new() -> GetFileResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &GetFileResponse| { &m.data },
            |m: &mut GetFileResponse| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetFileResponse>(
            "GetFileResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetFileResponse {
    const NAME: &'static str = "GetFileResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetFileResponse {
        GetFileResponse::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetFileResponse {
        static instance: GetFileResponse = GetFileResponse {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetFileResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetFileResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetFileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFileResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to list files stored locally.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ipfs.ListFilesRequest)
pub struct ListFilesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:ipfs.ListFilesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListFilesRequest {
    fn default() -> &'a ListFilesRequest {
        <ListFilesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListFilesRequest {
    pub fn new() -> ListFilesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListFilesRequest>(
            "ListFilesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListFilesRequest {
    const NAME: &'static str = "ListFilesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListFilesRequest {
        ListFilesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListFilesRequest {
        static instance: ListFilesRequest = ListFilesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListFilesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListFilesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListFilesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListFilesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing a list of the files.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ipfs.ListFilesResponse)
pub struct ListFilesResponse {
    // message fields
    // @@protoc_insertion_point(field:ipfs.ListFilesResponse.files)
    pub files: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ipfs.ListFilesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListFilesResponse {
    fn default() -> &'a ListFilesResponse {
        <ListFilesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListFilesResponse {
    pub fn new() -> ListFilesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &ListFilesResponse| { &m.files },
            |m: &mut ListFilesResponse| { &mut m.files },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListFilesResponse>(
            "ListFilesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListFilesResponse {
    const NAME: &'static str = "ListFilesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.files {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListFilesResponse {
        ListFilesResponse::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListFilesResponse {
        static instance: ListFilesResponse = ListFilesResponse {
            files: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListFilesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListFilesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListFilesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListFilesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dproto/imp/api/ipfs/ipfs.proto\x12\x04ipfs\x1a\x1cgoogle/api/annota\
    tions.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"V\n\x0eA\
    ddFileRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\
    \x04data\x18\x02\x20\x01(\x0cR\x04data\x12\x1c\n\tupdatable\x18\x03\x20\
    \x01(\x08R\tupdatable\"#\n\x0fAddFileResponse\x12\x10\n\x03cid\x18\x01\
    \x20\x01(\tR\x03cid\">\n\x0eGetFileRequest\x12\x1a\n\x08protocol\x18\x01\
    \x20\x01(\tR\x08protocol\x12\x10\n\x03cid\x18\x02\x20\x01(\tR\x03cid\"%\
    \n\x0fGetFileResponse\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\"\
    \x12\n\x10ListFilesRequest\")\n\x11ListFilesResponse\x12\x14\n\x05files\
    \x18\x01\x20\x03(\tR\x05files2\x99\x02\n\x04IPFS\x12O\n\x07AddFile\x12\
    \x14.ipfs.AddFileRequest\x1a\x15.ipfs.AddFileResponse\"\x17\x82\xd3\xe4\
    \x93\x02\x11\"\x0c/v1/ipfs/add:\x01*\x12k\n\x07GetFile\x12\x14.ipfs.GetF\
    ileRequest\x1a\x15.ipfs.GetFileResponse\"3\x82\xd3\xe4\x93\x02-\x12\x19/\
    v1/ipfs/{protocol}/{cid}Z\x10\x12\x0e/v1/ipfs/{cid}\x12S\n\tListFiles\
    \x12\x16.ipfs.ListFilesRequest\x1a\x17.ipfs.ListFilesResponse\"\x15\x82\
    \xd3\xe4\x93\x02\x0f\x12\r/v1/ipfs/listB\xb6\x02Z#github.com/imperviousa\
    i/freeimp/gen\x92A\x8d\x02\x12<\n\rIPFS\x20Services\"&\n\rImpervious\x20\
    AI\x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\x10application\
    /json:\x10application/jsonZa\n_\n\x07api_key\x12T\x08\x02\x125An\x20API\
    \x20key\x20generated\x20by\x20the\x20daemon\x20for\x20authentication\x1a\
    \x17Grpc-Metadata-X-API-KEY\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14D\
    ocumentation\x20on\x20IMP\x12\x1ahttps://docs.impervious.aiJ\xa3\x0f\n\
    \x06\x12\x04\x01\0|\x01\n9\n\x01\x0c\x12\x03\x01\0\x12\x1a//\x20Allows\
    \x20for\x20IPFS\x20actions\x20for\x20Impervious\x20nodes\n\n\x08\n\x01\
    \x02\x12\x03\x03\0\r\n\x08\n\x01\x08\x12\x03\x05\0:\n\t\n\x02\x08\x0b\
    \x12\x03\x05\0:\n\t\n\x02\x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\
    \x08\08\n\t\n\x01\x08\x12\x04\n\0,\x02\n\x0b\n\x03\x08\x92\x08\x12\x04\n\
    \0,\x02\nJ\n\x02\x06\0\x12\x041\0P\x01\x1a>*\n\x20IPFS\x20service\x20all\
    ows\x20IPFS\x20actions\x20from\x20the\x20Impervious\x20node.\n\n\n\n\x03\
    \x06\0\x01\x12\x031\x08\x0c\nU\n\x04\x06\0\x02\0\x12\x045\x08:\t\x1aG*\n\
    \x20AddFile\x20will\x20add\x20data\x20to\x20a\x20file\x20and\x20pin\x20t\
    o\x20IPFS\x20to\x20return\x20it's\x20CID.\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x035\x0c\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\x035\x14\"\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x035-<\n\r\n\x05\x06\0\x02\0\x04\x12\x046\x109\x12\
    \n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x046\x109\x12\nJ\n\x04\x06\
    \0\x02\x01\x12\x04?\x08F\t\x1a<*\n\x20RetrieveFile\x20will\x20retrieve\
    \x20a\x20file\x20from\x20the\x20IPFS\x20network.\n\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03?\x0c\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03?\x14\"\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03?-<\n\r\n\x05\x06\0\x02\x01\x04\x12\
    \x04@\x10E\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04@\x10E\
    \x12\nB\n\x04\x06\0\x02\x02\x12\x04K\x08O\t\x1a4*\n\x20ListFiles\x20list\
    s\x20all\x20of\x20the\x20files\x20pinned\x20locally.\n\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03K\x0c\x15\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03K\x16\
    &\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03K1B\n\r\n\x05\x06\0\x02\x02\x04\
    \x12\x04L\x10N\x12\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04L\
    \x10N\x12\n;\n\x02\x04\0\x12\x04U\0Y\x01\x1a/*\n\x20Represents\x20a\x20r\
    equest\x20to\x20add\x20a\x20file\x20to\x20IPFS.\n\n\n\n\x03\x04\0\x01\
    \x12\x03U\x08\x16\n*\n\x04\x04\0\x02\0\x12\x03V\x08\x18\"\x1d\x20The\x20\
    name\x20of\x20the\x20file\x20to\x20add\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03V\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03V\x0f\x13\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03V\x16\x17\n2\n\x04\x04\0\x02\x01\x12\x03W\x08\
    \x17\"%\x20The\x20data\x20content\x20of\x20the\x20file\x20to\x20add\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03W\x08\r\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03W\x0e\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03W\x15\x16\n:\
    \n\x04\x04\0\x02\x02\x12\x03X\x08\x1b\"-\x20Whether\x20or\x20not\x20the\
    \x20file\x20should\x20be\x20updatable\n\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03X\x08\x0c\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03X\r\x16\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03X\x19\x1a\nW\n\x02\x04\x01\x12\x04^\0`\x01\
    \x1aK*\n\x20Represents\x20a\x20response\x20containing\x20the\x20content\
    \x20ID\x20of\x20the\x20added\x20IPFS\x20file.\n\n\n\n\x03\x04\x01\x01\
    \x12\x03^\x08\x17\n/\n\x04\x04\x01\x02\0\x12\x03_\x08\x17\"\"\x20The\x20\
    content\x20ID\x20of\x20the\x20added\x20file\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03_\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03_\x0f\x12\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03_\x15\x16\n=\n\x02\x04\x02\x12\x04e\
    \0h\x01\x1a1*\n\x20Represents\x20a\x20request\x20to\x20get\x20a\x20file\
    \x20from\x20IPFS.\n\n\n\n\x03\x04\x02\x01\x12\x03e\x08\x16\nP\n\x04\x04\
    \x02\x02\0\x12\x03f\x08\x1c\"C\x20The\x20optional\x20ipfs\x20protocol\
    \x20to\x20use\x20(ex\x20ipns\x20or\x20ipfs,\x20default\x20ipfs)\n\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03f\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03f\x0f\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03f\x1a\x1b\n)\n\
    \x04\x04\x02\x02\x01\x12\x03g\x08\x17\"\x1c\x20The\x20cid\x20of\x20the\
    \x20file\x20to\x20get\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03g\x08\x0e\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03g\x0f\x12\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03g\x15\x16\nT\n\x02\x04\x03\x12\x04m\0o\x01\x1aH*\n\
    \x20Represents\x20a\x20response\x20containing\x20the\x20contents\x20of\
    \x20the\x20retrieved\x20file.\n\n\n\n\x03\x04\x03\x01\x12\x03m\x08\x17\n\
    '\n\x04\x04\x03\x02\0\x12\x03n\x08\x17\"\x1a\x20The\x20contents\x20of\
    \x20the\x20file\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03n\x08\r\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03n\x0e\x12\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03n\x15\x16\nB\n\x02\x04\x04\x12\x04t\0u\x01\x1a6*\n\x20Represents\
    \x20a\x20request\x20to\x20list\x20files\x20stored\x20locally.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03t\x08\x18\nE\n\x02\x04\x05\x12\x04z\0|\x01\x1a9*\
    \n\x20Represents\x20a\x20response\x20containing\x20a\x20list\x20of\x20th\
    e\x20files.\n\n\n\n\x03\x04\x05\x01\x12\x03z\x08\x19\n\x1f\n\x04\x04\x05\
    \x02\0\x12\x03{\x08\"\"\x12\x20The\x20stored\x20files\n\n\x0c\n\x05\x04\
    \x05\x02\0\x04\x12\x03{\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03{\
    \x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03{\x18\x1d\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03{\x20!b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(AddFileRequest::generated_message_descriptor_data());
            messages.push(AddFileResponse::generated_message_descriptor_data());
            messages.push(GetFileRequest::generated_message_descriptor_data());
            messages.push(GetFileResponse::generated_message_descriptor_data());
            messages.push(ListFilesRequest::generated_message_descriptor_data());
            messages.push(ListFilesResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
