// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/imp/api/websocket/websocket.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeRequest {
    fn default() -> &'a SubscribeRequest {
        <SubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeRequest {
    pub fn new() -> SubscribeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeRequest {
        SubscribeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeRequest>(
                "SubscribeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeRequest {
        static instance: ::protobuf::rt::LazyV2<SubscribeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeRequest::new)
    }
}

impl ::protobuf::Clear for SubscribeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeResponse {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub amount: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeResponse {
    fn default() -> &'a SubscribeResponse {
        <SubscribeResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeResponse {
    pub fn new() -> SubscribeResponse {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // int64 amount = 2;


    pub fn get_amount(&self) -> i64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }
}

impl ::protobuf::Message for SubscribeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if self.amount != 0 {
            os.write_int64(2, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeResponse {
        SubscribeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &SubscribeResponse| { &m.data },
                |m: &mut SubscribeResponse| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "amount",
                |m: &SubscribeResponse| { &m.amount },
                |m: &mut SubscribeResponse| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeResponse>(
                "SubscribeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeResponse {
        static instance: ::protobuf::rt::LazyV2<SubscribeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeResponse::new)
    }
}

impl ::protobuf::Clear for SubscribeResponse {
    fn clear(&mut self) {
        self.data.clear();
        self.amount = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/imp/api/websocket/websocket.proto\x12\twebsocket\x1a\x1cgoogle/\
    api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \"\x12\n\x10SubscribeRequest\"?\n\x11SubscribeResponse\x12\x12\n\x04data\
    \x18\x01\x20\x01(\x0cR\x04data\x12\x16\n\x06amount\x18\x02\x20\x01(\x03R\
    \x06amount2l\n\tWebsocket\x12_\n\tSubscribe\x12\x1b.websocket.SubscribeR\
    equest\x1a\x1c.websocket.SubscribeResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\
    \x12\r/v1/subscribe0\x01B\xbe\x02Z&github.com/imperviousai/imp-daemon/ge\
    n\x92A\x92\x02\x12A\n\x12Websocket\x20Services\"&\n\rImpervious\x20AI\
    \x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\x10application/j\
    son:\x10application/jsonZa\n_\n\x07api_key\x12T\x08\x02\x125An\x20API\
    \x20key\x20generated\x20by\x20the\x20daemon\x20for\x20authentication\x1a\
    \x17Grpc-Metadata-X-API-KEY\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14D\
    ocumentation\x20on\x20IMP\x12\x1ahttps://docs.impervious.aiJ\xcd\x06\n\
    \x06\x12\x04\x01\0H\x01\n=\n\x01\x0c\x12\x03\x01\0\x12\x1a3/\x20Allows\
    \x20for\x20receiving\x20messages\x20from\x20your\x20IMP\x20node\n\n\x08\
    \n\x01\x02\x12\x03\x03\0\x12\n\x08\n\x01\x08\x12\x03\x05\0=\n\t\n\x02\
    \x08\x0b\x12\x03\x05\0=\n\t\n\x02\x03\0\x12\x03\x06\0&\n\t\n\x02\x03\x01\
    \x12\x03\x07\08\n\t\n\x01\x08\x12\x04\t\0+\x02\n\x0b\n\x03\x08\x92\x08\
    \x12\x04\t\0+\x02\nc\n\x02\x06\0\x12\x040\09\x01\x1aW*\n\x20Websocket\
    \x20service\x20allows\x20for\x20receiving\x20messages\x20received\x20int\
    o\x20your\x20Impervious\x20node.\n\n\n\n\x03\x06\0\x01\x12\x030\x08\x11\
    \nq\n\x04\x06\0\x02\0\x12\x044\x088\t\x1ac*\n\x20Subscribe\x20opens\x20u\
    p\x20a\x20stream/websocket\x20to\x20receive\x20all\x20messages\x20receiv\
    ed\x20on\x20your\x20Impervious\x20node.\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x034\x0c\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x034\x16&\n\x0c\n\x05\
    \x06\0\x02\0\x06\x12\x03417\n\x0c\n\x05\x06\0\x02\0\x03\x12\x0348I\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x045\x107\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x045\x107\x12\nH\n\x02\x04\0\x12\x04>\0@\x01\x1a<*\n\x20Repre\
    sents\x20a\x20request\x20to\x20subscribe\x20to\x20the\x20event\x20websoc\
    ket\n\n\n\n\x03\x04\0\x01\x12\x03>\x08\x18\nZ\n\x02\x04\x01\x12\x04E\0H\
    \x01\x1aN*\n\x20Represents\x20a\x20response\x20back\x20from\x20the\x20we\
    bsocket\x20containing\x20event\x20information\n\n\n\n\x03\x04\x01\x01\
    \x12\x03E\x08\x19\n0\n\x04\x04\x01\x02\0\x12\x03F\x08\x17\"#\x20The\x20d\
    ata\x20the\x20node\x20is\x20sending\x20over\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03F\x08\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03F\x0e\x12\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03F\x15\x16\n5\n\x04\x04\x01\x02\x01\x12\
    \x03G\x08\x19\"(\x20The\x20amount\x20sent\x20as\x20part\x20of\x20the\x20\
    message\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03G\x08\r\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03G\x0e\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03G\x17\x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
