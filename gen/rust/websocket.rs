// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/websocket/websocket.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
///  Represents a request to subscribe to the event websocket
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:websocket.SubscribeRequest)
pub struct SubscribeRequest {
    // special fields
    // @@protoc_insertion_point(special_field:websocket.SubscribeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeRequest {
    fn default() -> &'a SubscribeRequest {
        <SubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeRequest {
    pub fn new() -> SubscribeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeRequest>(
            "SubscribeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeRequest {
    const NAME: &'static str = "SubscribeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeRequest {
        SubscribeRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeRequest {
        static instance: SubscribeRequest = SubscribeRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from the websocket containing event information
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:websocket.SubscribeResponse)
pub struct SubscribeResponse {
    // message fields
    // @@protoc_insertion_point(field:websocket.SubscribeResponse.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:websocket.SubscribeResponse.amount)
    pub amount: i64,
    // special fields
    // @@protoc_insertion_point(special_field:websocket.SubscribeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeResponse {
    fn default() -> &'a SubscribeResponse {
        <SubscribeResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeResponse {
    pub fn new() -> SubscribeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SubscribeResponse| { &m.data },
            |m: &mut SubscribeResponse| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &SubscribeResponse| { &m.amount },
            |m: &mut SubscribeResponse| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeResponse>(
            "SubscribeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeResponse {
    const NAME: &'static str = "SubscribeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                16 => {
                    self.amount = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if self.amount != 0 {
            os.write_int64(2, self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeResponse {
        SubscribeResponse::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.amount = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeResponse {
        static instance: SubscribeResponse = SubscribeResponse {
            data: ::std::vec::Vec::new(),
            amount: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/imp/api/websocket/websocket.proto\x12\twebsocket\x1a\x1cgoogle/\
    api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \"\x12\n\x10SubscribeRequest\"?\n\x11SubscribeResponse\x12\x12\n\x04data\
    \x18\x01\x20\x01(\x0cR\x04data\x12\x16\n\x06amount\x18\x02\x20\x01(\x03R\
    \x06amount2l\n\tWebsocket\x12_\n\tSubscribe\x12\x1b.websocket.SubscribeR\
    equest\x1a\x1c.websocket.SubscribeResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\
    \x12\r/v1/subscribe0\x01B\xbe\x02Z&github.com/imperviousai/imp-daemon/ge\
    n\x92A\x92\x02\x12A\n\x12Websocket\x20Services\"&\n\rImpervious\x20AI\
    \x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\x10application/j\
    son:\x10application/jsonZa\n_\n\x07api_key\x12T\x08\x02\x125An\x20API\
    \x20key\x20generated\x20by\x20the\x20daemon\x20for\x20authentication\x1a\
    \x17Grpc-Metadata-X-API-KEY\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14D\
    ocumentation\x20on\x20IMP\x12\x1ahttps://docs.impervious.aiJ\xcd\x06\n\
    \x06\x12\x04\x01\0H\x01\n=\n\x01\x0c\x12\x03\x01\0\x12\x1a3/\x20Allows\
    \x20for\x20receiving\x20messages\x20from\x20your\x20IMP\x20node\n\n\x08\
    \n\x01\x02\x12\x03\x03\0\x12\n\x08\n\x01\x08\x12\x03\x05\0=\n\t\n\x02\
    \x08\x0b\x12\x03\x05\0=\n\t\n\x02\x03\0\x12\x03\x06\0&\n\t\n\x02\x03\x01\
    \x12\x03\x07\08\n\t\n\x01\x08\x12\x04\t\0+\x02\n\x0b\n\x03\x08\x92\x08\
    \x12\x04\t\0+\x02\nc\n\x02\x06\0\x12\x040\09\x01\x1aW*\n\x20Websocket\
    \x20service\x20allows\x20for\x20receiving\x20messages\x20received\x20int\
    o\x20your\x20Impervious\x20node.\n\n\n\n\x03\x06\0\x01\x12\x030\x08\x11\
    \nq\n\x04\x06\0\x02\0\x12\x044\x088\t\x1ac*\n\x20Subscribe\x20opens\x20u\
    p\x20a\x20stream/websocket\x20to\x20receive\x20all\x20messages\x20receiv\
    ed\x20on\x20your\x20Impervious\x20node.\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x034\x0c\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x034\x16&\n\x0c\n\x05\
    \x06\0\x02\0\x06\x12\x03417\n\x0c\n\x05\x06\0\x02\0\x03\x12\x0348I\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x045\x107\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x045\x107\x12\nH\n\x02\x04\0\x12\x04>\0@\x01\x1a<*\n\x20Repre\
    sents\x20a\x20request\x20to\x20subscribe\x20to\x20the\x20event\x20websoc\
    ket\n\n\n\n\x03\x04\0\x01\x12\x03>\x08\x18\nZ\n\x02\x04\x01\x12\x04E\0H\
    \x01\x1aN*\n\x20Represents\x20a\x20response\x20back\x20from\x20the\x20we\
    bsocket\x20containing\x20event\x20information\n\n\n\n\x03\x04\x01\x01\
    \x12\x03E\x08\x19\n0\n\x04\x04\x01\x02\0\x12\x03F\x08\x17\"#\x20The\x20d\
    ata\x20the\x20node\x20is\x20sending\x20over\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03F\x08\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03F\x0e\x12\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03F\x15\x16\n5\n\x04\x04\x01\x02\x01\x12\
    \x03G\x08\x19\"(\x20The\x20amount\x20sent\x20as\x20part\x20of\x20the\x20\
    message\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03G\x08\r\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03G\x0e\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03G\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(SubscribeRequest::generated_message_descriptor_data());
            messages.push(SubscribeResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
