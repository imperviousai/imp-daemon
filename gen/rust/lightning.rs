// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/lightning/lightning.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
///  Represents an invoice creation request from your lightning node.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightning.GenerateInvoiceRequest)
pub struct GenerateInvoiceRequest {
    // message fields
    // @@protoc_insertion_point(field:lightning.GenerateInvoiceRequest.amount)
    pub amount: i64,
    // @@protoc_insertion_point(field:lightning.GenerateInvoiceRequest.memo)
    pub memo: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightning.GenerateInvoiceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenerateInvoiceRequest {
    fn default() -> &'a GenerateInvoiceRequest {
        <GenerateInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenerateInvoiceRequest {
    pub fn new() -> GenerateInvoiceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &GenerateInvoiceRequest| { &m.amount },
            |m: &mut GenerateInvoiceRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memo",
            |m: &GenerateInvoiceRequest| { &m.memo },
            |m: &mut GenerateInvoiceRequest| { &mut m.memo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenerateInvoiceRequest>(
            "GenerateInvoiceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenerateInvoiceRequest {
    const NAME: &'static str = "GenerateInvoiceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.amount = is.read_int64()?;
                },
                18 => {
                    self.memo = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.amount);
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.memo);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.amount != 0 {
            os.write_int64(1, self.amount)?;
        }
        if !self.memo.is_empty() {
            os.write_string(2, &self.memo)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenerateInvoiceRequest {
        GenerateInvoiceRequest::new()
    }

    fn clear(&mut self) {
        self.amount = 0;
        self.memo.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenerateInvoiceRequest {
        static instance: GenerateInvoiceRequest = GenerateInvoiceRequest {
            amount: 0,
            memo: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenerateInvoiceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenerateInvoiceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenerateInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateInvoiceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from an invoice generation request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightning.GenerateInvoiceResponse)
pub struct GenerateInvoiceResponse {
    // message fields
    // @@protoc_insertion_point(field:lightning.GenerateInvoiceResponse.invoice)
    pub invoice: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightning.GenerateInvoiceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenerateInvoiceResponse {
    fn default() -> &'a GenerateInvoiceResponse {
        <GenerateInvoiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GenerateInvoiceResponse {
    pub fn new() -> GenerateInvoiceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invoice",
            |m: &GenerateInvoiceResponse| { &m.invoice },
            |m: &mut GenerateInvoiceResponse| { &mut m.invoice },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenerateInvoiceResponse>(
            "GenerateInvoiceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenerateInvoiceResponse {
    const NAME: &'static str = "GenerateInvoiceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invoice = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.invoice.is_empty() {
            os.write_string(1, &self.invoice)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenerateInvoiceResponse {
        GenerateInvoiceResponse::new()
    }

    fn clear(&mut self) {
        self.invoice.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenerateInvoiceResponse {
        static instance: GenerateInvoiceResponse = GenerateInvoiceResponse {
            invoice: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenerateInvoiceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenerateInvoiceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenerateInvoiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateInvoiceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents an invoice that will be paid by your lightning node.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightning.PayInvoiceRequest)
pub struct PayInvoiceRequest {
    // message fields
    // @@protoc_insertion_point(field:lightning.PayInvoiceRequest.invoice)
    pub invoice: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightning.PayInvoiceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PayInvoiceRequest {
    fn default() -> &'a PayInvoiceRequest {
        <PayInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PayInvoiceRequest {
    pub fn new() -> PayInvoiceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invoice",
            |m: &PayInvoiceRequest| { &m.invoice },
            |m: &mut PayInvoiceRequest| { &mut m.invoice },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PayInvoiceRequest>(
            "PayInvoiceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PayInvoiceRequest {
    const NAME: &'static str = "PayInvoiceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invoice = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.invoice.is_empty() {
            os.write_string(1, &self.invoice)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PayInvoiceRequest {
        PayInvoiceRequest::new()
    }

    fn clear(&mut self) {
        self.invoice.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PayInvoiceRequest {
        static instance: PayInvoiceRequest = PayInvoiceRequest {
            invoice: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PayInvoiceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PayInvoiceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PayInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayInvoiceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from the payment result.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightning.PayInvoiceResponse)
pub struct PayInvoiceResponse {
    // message fields
    // @@protoc_insertion_point(field:lightning.PayInvoiceResponse.preimage)
    pub preimage: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightning.PayInvoiceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PayInvoiceResponse {
    fn default() -> &'a PayInvoiceResponse {
        <PayInvoiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl PayInvoiceResponse {
    pub fn new() -> PayInvoiceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "preimage",
            |m: &PayInvoiceResponse| { &m.preimage },
            |m: &mut PayInvoiceResponse| { &mut m.preimage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PayInvoiceResponse>(
            "PayInvoiceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PayInvoiceResponse {
    const NAME: &'static str = "PayInvoiceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.preimage = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.preimage.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.preimage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.preimage.is_empty() {
            os.write_string(1, &self.preimage)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PayInvoiceResponse {
        PayInvoiceResponse::new()
    }

    fn clear(&mut self) {
        self.preimage.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PayInvoiceResponse {
        static instance: PayInvoiceResponse = PayInvoiceResponse {
            preimage: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PayInvoiceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PayInvoiceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PayInvoiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayInvoiceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents an request to check an invoice.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightning.CheckInvoiceRequest)
pub struct CheckInvoiceRequest {
    // message fields
    // @@protoc_insertion_point(field:lightning.CheckInvoiceRequest.invoice)
    pub invoice: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lightning.CheckInvoiceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckInvoiceRequest {
    fn default() -> &'a CheckInvoiceRequest {
        <CheckInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckInvoiceRequest {
    pub fn new() -> CheckInvoiceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invoice",
            |m: &CheckInvoiceRequest| { &m.invoice },
            |m: &mut CheckInvoiceRequest| { &mut m.invoice },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckInvoiceRequest>(
            "CheckInvoiceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckInvoiceRequest {
    const NAME: &'static str = "CheckInvoiceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invoice = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.invoice.is_empty() {
            os.write_string(1, &self.invoice)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckInvoiceRequest {
        CheckInvoiceRequest::new()
    }

    fn clear(&mut self) {
        self.invoice.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckInvoiceRequest {
        static instance: CheckInvoiceRequest = CheckInvoiceRequest {
            invoice: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckInvoiceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckInvoiceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckInvoiceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from the invoice check.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:lightning.CheckInvoiceResponse)
pub struct CheckInvoiceResponse {
    // message fields
    // @@protoc_insertion_point(field:lightning.CheckInvoiceResponse.paid)
    pub paid: bool,
    // special fields
    // @@protoc_insertion_point(special_field:lightning.CheckInvoiceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckInvoiceResponse {
    fn default() -> &'a CheckInvoiceResponse {
        <CheckInvoiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckInvoiceResponse {
    pub fn new() -> CheckInvoiceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "paid",
            |m: &CheckInvoiceResponse| { &m.paid },
            |m: &mut CheckInvoiceResponse| { &mut m.paid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckInvoiceResponse>(
            "CheckInvoiceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckInvoiceResponse {
    const NAME: &'static str = "CheckInvoiceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.paid = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.paid != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.paid != false {
            os.write_bool(1, self.paid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckInvoiceResponse {
        CheckInvoiceResponse::new()
    }

    fn clear(&mut self) {
        self.paid = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckInvoiceResponse {
        static instance: CheckInvoiceResponse = CheckInvoiceResponse {
            paid: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckInvoiceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckInvoiceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckInvoiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckInvoiceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/imp/api/lightning/lightning.proto\x12\tlightning\x1a\x1cgoogle/\
    api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \"D\n\x16GenerateInvoiceRequest\x12\x16\n\x06amount\x18\x01\x20\x01(\x03\
    R\x06amount\x12\x12\n\x04memo\x18\x02\x20\x01(\tR\x04memo\"3\n\x17Genera\
    teInvoiceResponse\x12\x18\n\x07invoice\x18\x01\x20\x01(\tR\x07invoice\"-\
    \n\x11PayInvoiceRequest\x12\x18\n\x07invoice\x18\x01\x20\x01(\tR\x07invo\
    ice\"0\n\x12PayInvoiceResponse\x12\x1a\n\x08preimage\x18\x01\x20\x01(\tR\
    \x08preimage\"/\n\x13CheckInvoiceRequest\x12\x18\n\x07invoice\x18\x01\
    \x20\x01(\tR\x07invoice\"*\n\x14CheckInvoiceResponse\x12\x12\n\x04paid\
    \x18\x01\x20\x01(\x08R\x04paid2\xf8\x02\n\tLightning\x12\x82\x01\n\x0fGe\
    nerateInvoice\x12!.lightning.GenerateInvoiceRequest\x1a\".lightning.Gene\
    rateInvoiceResponse\"(\x82\xd3\xe4\x93\x02\"\"\x1d/v1/lightning/generate\
    invoice:\x01*\x12n\n\nPayInvoice\x12\x1c.lightning.PayInvoiceRequest\x1a\
    \x1d.lightning.PayInvoiceResponse\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/v1/li\
    ghtning/payinvoice:\x01*\x12v\n\x0cCheckInvoice\x12\x1e.lightning.CheckI\
    nvoiceRequest\x1a\x1f.lightning.CheckInvoiceResponse\"%\x82\xd3\xe4\x93\
    \x02\x1f\"\x1a/v1/lightning/checkinvoice:\x01*B\xbb\x02Z#github.com/impe\
    rviousai/freeimp/gen\x92A\x92\x02\x12A\n\x12Lightning\x20Services\"&\n\r\
    Impervious\x20AI\x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\
    \x10application/json:\x10application/jsonZa\n_\n\x07api_key\x12T\x08\x02\
    \x125An\x20API\x20key\x20generated\x20by\x20the\x20daemon\x20for\x20auth\
    entication\x1a\x17Grpc-Metadata-X-API-KEY\x20\x03b\r\n\x0b\n\x07api_key\
    \x12\0r2\n\x14Documentation\x20on\x20IMP\x12\x1ahttps://docs.impervious.\
    aiJ\xee\x0f\n\x06\x12\x04\x01\0z\x01\n>\n\x01\x0c\x12\x03\x01\0\x12\x1a4\
    /\x20Allows\x20for\x20p2p\x20messaging\x20between\x20Impervious\x20nodes\
    \n\n\x08\n\x01\x02\x12\x03\x03\0\x12\n\x08\n\x01\x08\x12\x03\x05\0:\n\t\
    \n\x02\x08\x0b\x12\x03\x05\0:\n\t\n\x02\x03\0\x12\x03\x07\0&\n\t\n\x02\
    \x03\x01\x12\x03\x08\08\n\t\n\x01\x08\x12\x04\n\0,\x02\n\x0b\n\x03\x08\
    \x92\x08\x12\x04\n\0,\x02\nv\n\x02\x06\0\x12\x041\0O\x01\x1aj*\n\x20Ligh\
    tning\x20service\x20allows\x20lightning\x20actions\x20on\x20your\x20unde\
    rlying\x20lightning\x20node\x20from\x20the\x20Impervious\x20node.\n\n\n\
    \n\x03\x06\0\x01\x12\x031\x08\x11\n{\n\x04\x06\0\x02\0\x12\x045\x08:\t\
    \x1am*\n\x20GenerateInvoice\x20allows\x20you\x20to\x20generate\x20an\x20\
    invoice\x20for\x20a\x20specific\x20payment\x20amount\x20from\x20your\x20\
    lightning\x20node.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x035\x0c\x1b\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x035\x1c2\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    5=T\n\r\n\x05\x06\0\x02\0\x04\x12\x046\x109\x12\n\x11\n\t\x06\0\x02\0\
    \x04\xb0\xca\xbc\"\x12\x046\x109\x12\n[\n\x04\x06\0\x02\x01\x12\x04?\x08\
    D\t\x1aM*\n\x20PayInvoice\x20allows\x20you\x20to\x20pay\x20a\x20specific\
    \x20invoice\x20with\x20your\x20lightning\x20node.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03?\x0c\x16\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03?\x17\
    (\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03?3E\n\r\n\x05\x06\0\x02\x01\x04\
    \x12\x04@\x10C\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04@\
    \x10C\x12\n\\\n\x04\x06\0\x02\x02\x12\x04I\x08N\t\x1aN*\n\x20CheckInvoic\
    e\x20allows\x20you\x20to\x20check\x20a\x20specific\x20invoice\x20to\x20s\
    ee\x20if\x20it\x20was\x20paid.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03I\
    \x0c\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03I\x19,\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03I7K\n\r\n\x05\x06\0\x02\x02\x04\x12\x04J\x10M\x12\n\
    \x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04J\x10M\x12\nP\n\x02\x04\
    \0\x12\x04T\0W\x01\x1aD*\n\x20Represents\x20an\x20invoice\x20creation\
    \x20request\x20from\x20your\x20lightning\x20node.\n\n\n\n\x03\x04\0\x01\
    \x12\x03T\x08\x1e\n9\n\x04\x04\0\x02\0\x12\x03U\x08\x19\",\x20The\x20amo\
    unt\x20of\x20satoshis\x20you\x20want\x20to\x20receive\n\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03U\x08\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03U\x0e\x14\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03U\x17\x18\nA\n\x04\x04\0\x02\x01\x12\
    \x03V\x08\x18\"4\x20The\x20human\x20readable\x20memo\x20you\x20want\x20t\
    he\x20sender\x20to\x20see\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03V\x08\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03V\x0f\x13\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03V\x16\x17\nN\n\x02\x04\x01\x12\x04\\\0^\x01\x1aB*\n\
    \x20Represents\x20a\x20response\x20back\x20from\x20an\x20invoice\x20gene\
    ration\x20request.\n\n\n\n\x03\x04\x01\x01\x12\x03\\\x08\x1f\n3\n\x04\
    \x04\x01\x02\0\x12\x03]\x08\x1b\"&\x20The\x20invoice\x20from\x20your\x20\
    lightning\x20node\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03]\x08\x0e\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03]\x0f\x16\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03]\x19\x1a\nO\n\x02\x04\x02\x12\x04c\0e\x01\x1aC*\n\x20Represents\
    \x20an\x20invoice\x20that\x20will\x20be\x20paid\x20by\x20your\x20lightni\
    ng\x20node.\n\n\n\n\x03\x04\x02\x01\x12\x03c\x08\x19\n!\n\x04\x04\x02\
    \x02\0\x12\x03d\x08\x1b\"\x14\x20The\x20invoice\x20to\x20pay\n\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03d\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03d\x0f\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03d\x19\x1a\nC\n\
    \x02\x04\x03\x12\x04j\0l\x01\x1a7*\n\x20Represents\x20a\x20response\x20b\
    ack\x20from\x20the\x20payment\x20result.\n\n\n\n\x03\x04\x03\x01\x12\x03\
    j\x08\x1a\nB\n\x04\x04\x03\x02\0\x12\x03k\x08\x1c\"5\x20The\x20preimage\
    \x20from\x20the\x20payment\x20result,\x20if\x20successful\n\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03k\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03k\x0f\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03k\x1a\x1b\n:\n\x02\
    \x04\x04\x12\x04q\0s\x01\x1a.*\n\x20Represents\x20an\x20request\x20to\
    \x20check\x20an\x20invoice.\n\n\n\n\x03\x04\x04\x01\x12\x03q\x08\x1b\n#\
    \n\x04\x04\x04\x02\0\x12\x03r\x08\x1b\"\x16\x20The\x20invoice\x20to\x20c\
    heck\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03r\x08\x0e\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03r\x0f\x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03r\
    \x19\x1a\nB\n\x02\x04\x05\x12\x04x\0z\x01\x1a6*\n\x20Represents\x20a\x20\
    response\x20back\x20from\x20the\x20invoice\x20check.\n\n\n\n\x03\x04\x05\
    \x01\x12\x03x\x08\x1c\nR\n\x04\x04\x05\x02\0\x12\x03y\x08\x16\"E\x20The\
    \x20boolean\x20result\x20representing\x20whether\x20or\x20not\x20the\x20\
    invoice\x20was\x20paid\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03y\x08\x0c\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03y\r\x11\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03y\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(GenerateInvoiceRequest::generated_message_descriptor_data());
            messages.push(GenerateInvoiceResponse::generated_message_descriptor_data());
            messages.push(PayInvoiceRequest::generated_message_descriptor_data());
            messages.push(PayInvoiceResponse::generated_message_descriptor_data());
            messages.push(CheckInvoiceRequest::generated_message_descriptor_data());
            messages.push(CheckInvoiceResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
