// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/key/key.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
///  Represents an init seed request to initialize the master seed.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:key.InitSeedRequest)
pub struct InitSeedRequest {
    // message fields
    // @@protoc_insertion_point(field:key.InitSeedRequest.mnenomic)
    pub mnenomic: ::std::string::String,
    // @@protoc_insertion_point(field:key.InitSeedRequest.passphrase)
    pub passphrase: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:key.InitSeedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InitSeedRequest {
    fn default() -> &'a InitSeedRequest {
        <InitSeedRequest as ::protobuf::Message>::default_instance()
    }
}

impl InitSeedRequest {
    pub fn new() -> InitSeedRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mnenomic",
            |m: &InitSeedRequest| { &m.mnenomic },
            |m: &mut InitSeedRequest| { &mut m.mnenomic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "passphrase",
            |m: &InitSeedRequest| { &m.passphrase },
            |m: &mut InitSeedRequest| { &mut m.passphrase },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InitSeedRequest>(
            "InitSeedRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InitSeedRequest {
    const NAME: &'static str = "InitSeedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mnenomic = is.read_string()?;
                },
                18 => {
                    self.passphrase = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mnenomic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mnenomic);
        }
        if !self.passphrase.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.passphrase);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mnenomic.is_empty() {
            os.write_string(1, &self.mnenomic)?;
        }
        if !self.passphrase.is_empty() {
            os.write_string(2, &self.passphrase)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InitSeedRequest {
        InitSeedRequest::new()
    }

    fn clear(&mut self) {
        self.mnenomic.clear();
        self.passphrase.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InitSeedRequest {
        static instance: InitSeedRequest = InitSeedRequest {
            mnenomic: ::std::string::String::new(),
            passphrase: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InitSeedRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InitSeedRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InitSeedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitSeedRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from an init seed request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:key.InitSeedResponse)
pub struct InitSeedResponse {
    // message fields
    // @@protoc_insertion_point(field:key.InitSeedResponse.mnenomic)
    pub mnenomic: ::std::string::String,
    // @@protoc_insertion_point(field:key.InitSeedResponse.api_key)
    pub api_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:key.InitSeedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InitSeedResponse {
    fn default() -> &'a InitSeedResponse {
        <InitSeedResponse as ::protobuf::Message>::default_instance()
    }
}

impl InitSeedResponse {
    pub fn new() -> InitSeedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mnenomic",
            |m: &InitSeedResponse| { &m.mnenomic },
            |m: &mut InitSeedResponse| { &mut m.mnenomic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "api_key",
            |m: &InitSeedResponse| { &m.api_key },
            |m: &mut InitSeedResponse| { &mut m.api_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InitSeedResponse>(
            "InitSeedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InitSeedResponse {
    const NAME: &'static str = "InitSeedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mnenomic = is.read_string()?;
                },
                18 => {
                    self.api_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mnenomic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mnenomic);
        }
        if !self.api_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.api_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mnenomic.is_empty() {
            os.write_string(1, &self.mnenomic)?;
        }
        if !self.api_key.is_empty() {
            os.write_string(2, &self.api_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InitSeedResponse {
        InitSeedResponse::new()
    }

    fn clear(&mut self) {
        self.mnenomic.clear();
        self.api_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InitSeedResponse {
        static instance: InitSeedResponse = InitSeedResponse {
            mnenomic: ::std::string::String::new(),
            api_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InitSeedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InitSeedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InitSeedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitSeedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents an unlock seed request to unlock the master seed.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:key.UnlockSeedRequest)
pub struct UnlockSeedRequest {
    // message fields
    // @@protoc_insertion_point(field:key.UnlockSeedRequest.passphrase)
    pub passphrase: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:key.UnlockSeedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockSeedRequest {
    fn default() -> &'a UnlockSeedRequest {
        <UnlockSeedRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnlockSeedRequest {
    pub fn new() -> UnlockSeedRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "passphrase",
            |m: &UnlockSeedRequest| { &m.passphrase },
            |m: &mut UnlockSeedRequest| { &mut m.passphrase },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockSeedRequest>(
            "UnlockSeedRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockSeedRequest {
    const NAME: &'static str = "UnlockSeedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.passphrase = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.passphrase.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.passphrase);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.passphrase.is_empty() {
            os.write_string(1, &self.passphrase)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockSeedRequest {
        UnlockSeedRequest::new()
    }

    fn clear(&mut self) {
        self.passphrase.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockSeedRequest {
        static instance: UnlockSeedRequest = UnlockSeedRequest {
            passphrase: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockSeedRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockSeedRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockSeedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockSeedRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from an unlock seed request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:key.UnlockSeedResponse)
pub struct UnlockSeedResponse {
    // special fields
    // @@protoc_insertion_point(special_field:key.UnlockSeedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnlockSeedResponse {
    fn default() -> &'a UnlockSeedResponse {
        <UnlockSeedResponse as ::protobuf::Message>::default_instance()
    }
}

impl UnlockSeedResponse {
    pub fn new() -> UnlockSeedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnlockSeedResponse>(
            "UnlockSeedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnlockSeedResponse {
    const NAME: &'static str = "UnlockSeedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnlockSeedResponse {
        UnlockSeedResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnlockSeedResponse {
        static instance: UnlockSeedResponse = UnlockSeedResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnlockSeedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnlockSeedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnlockSeedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlockSeedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents an status request message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:key.StatusRequest)
pub struct StatusRequest {
    // special fields
    // @@protoc_insertion_point(special_field:key.StatusRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatusRequest {
    fn default() -> &'a StatusRequest {
        <StatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl StatusRequest {
    pub fn new() -> StatusRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatusRequest>(
            "StatusRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StatusRequest {
    const NAME: &'static str = "StatusRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatusRequest {
        StatusRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatusRequest {
        static instance: StatusRequest = StatusRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StatusRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StatusRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response back from a status request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:key.StatusResponse)
pub struct StatusResponse {
    // message fields
    // @@protoc_insertion_point(field:key.StatusResponse.status)
    pub status: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:key.StatusResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatusResponse {
    fn default() -> &'a StatusResponse {
        <StatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl StatusResponse {
    pub fn new() -> StatusResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &StatusResponse| { &m.status },
            |m: &mut StatusResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatusResponse>(
            "StatusResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StatusResponse {
    const NAME: &'static str = "StatusResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.status = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatusResponse {
        StatusResponse::new()
    }

    fn clear(&mut self) {
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatusResponse {
        static instance: StatusResponse = StatusResponse {
            status: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StatusResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StatusResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/imp/api/key/key.proto\x12\x03key\x1a\x1cgoogle/api/annotatio\
    ns.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"M\n\x0fInit\
    SeedRequest\x12\x1a\n\x08mnenomic\x18\x01\x20\x01(\tR\x08mnenomic\x12\
    \x1e\n\npassphrase\x18\x02\x20\x01(\tR\npassphrase\"G\n\x10InitSeedRespo\
    nse\x12\x1a\n\x08mnenomic\x18\x01\x20\x01(\tR\x08mnenomic\x12\x17\n\x07a\
    pi_key\x18\x02\x20\x01(\tR\x06apiKey\"3\n\x11UnlockSeedRequest\x12\x1e\n\
    \npassphrase\x18\x01\x20\x01(\tR\npassphrase\"\x14\n\x12UnlockSeedRespon\
    se\"\x0f\n\rStatusRequest\"(\n\x0eStatusResponse\x12\x16\n\x06status\x18\
    \x01\x20\x01(\tR\x06status2\x84\x02\n\x03Key\x12T\n\x08InitSeed\x12\x14.\
    key.InitSeedRequest\x1a\x15.key.InitSeedResponse\"\x1b\x82\xd3\xe4\x93\
    \x02\x15\"\x10/v1/key/initSeed:\x01*\x12\\\n\nUnlockSeed\x12\x16.key.Unl\
    ockSeedRequest\x1a\x17.key.UnlockSeedResponse\"\x1d\x82\xd3\xe4\x93\x02\
    \x17\"\x12/v1/key/unlockSeed:\x01*\x12I\n\x06Status\x12\x12.key.StatusRe\
    quest\x1a\x13.key.StatusResponse\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/v\
    1/key/statusB\xb8\x02Z&github.com/imperviousai/imp-daemon/gen\x92A\x8c\
    \x02\x12;\n\x0cKey\x20Services\"&\n\rImpervious\x20AI\x12\x15https://imp\
    ervious.ai2\x031.0*\x03\x01\x02\x042\x10application/json:\x10application\
    /jsonZa\n_\n\x07api_key\x12T\x08\x02\x125An\x20API\x20key\x20generated\
    \x20by\x20the\x20daemon\x20for\x20authentication\x1a\x17Grpc-Metadata-X-\
    API-KEY\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14Documentation\x20on\
    \x20IMP\x12\x1ahttps://docs.impervious.aiJ\xe5\x10\n\x06\x12\x04\x01\0x\
    \x01\n>\n\x01\x0c\x12\x03\x01\0\x12\x1a4/\x20Allows\x20for\x20p2p\x20mes\
    saging\x20between\x20Impervious\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\0\
    \x0c\n\x08\n\x01\x08\x12\x03\x05\0=\n\t\n\x02\x08\x0b\x12\x03\x05\0=\n\t\
    \n\x02\x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x01\
    \x08\x12\x04\n\0,\x02\n\x0b\n\x03\x08\x92\x08\x12\x04\n\0,\x02\nP\n\x02\
    \x06\0\x12\x041\0N\x01\x1aD*\n\x20Key\x20service\x20allows\x20key\x20man\
    ager\x20actions\x20on\x20the\x20Impervious\x20daemon.\n\n\n\n\x03\x06\0\
    \x01\x12\x031\x08\x0b\ni\n\x04\x06\0\x02\0\x12\x045\x08:\t\x1a[*\n\x20In\
    itSeed\x20initializes\x20the\x20master\x20seed\x20for\x20the\x20daemon,\
    \x20and\x20encrypts\x20using\x20the\x20passphrase.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x035\x0c\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x035\x15$\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x035/?\n\r\n\x05\x06\0\x02\0\x04\x12\x046\
    \x109\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x046\x109\x12\ng\n\
    \x04\x06\0\x02\x01\x12\x04?\x08D\t\x1aY*\n\x20UnlockSeed\x20unlocks\x20t\
    he\x20master\x20seed\x20for\x20the\x20daemon,\x20and\x20decrypts\x20usin\
    g\x20the\x20passphrase.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03?\x0c\x16\
    \n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03?\x17(\n\x0c\n\x05\x06\0\x02\x01\
    \x03\x12\x03?3E\n\r\n\x05\x06\0\x02\x01\x04\x12\x04@\x10C\x12\n\x11\n\t\
    \x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04@\x10C\x12\n?\n\x04\x06\0\x02\
    \x02\x12\x04I\x08M\t\x1a1*\n\x20Status\x20gives\x20the\x20status\x20of\
    \x20the\x20daemon\x20db/key.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03I\
    \x0c\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03I\x13\x20\n\x0c\n\x05\x06\
    \0\x02\x02\x03\x12\x03I+9\n\r\n\x05\x06\0\x02\x02\x04\x12\x04J\x10L\x12\
    \n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04J\x10L\x12\nN\n\x02\
    \x04\0\x12\x04S\0V\x01\x1aB*\n\x20Represents\x20an\x20init\x20seed\x20re\
    quest\x20to\x20initialize\x20the\x20master\x20seed.\n\n\n\n\x03\x04\0\
    \x01\x12\x03S\x08\x17\ng\n\x04\x04\0\x02\0\x12\x03T\x08\x1c\"Z\x20The\
    \x20optional\x20mnenomic\x20to\x20set\x20if\x20you\x20already\x20have\
    \x20a\x20seed\x20you\x20want\x20to\x20use\x20with\x20this\x20daemon\n\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03T\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03T\x0f\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03T\x1a\x1b\ne\n\x04\
    \x04\0\x02\x01\x12\x03U\x08\x1e\"X\x20The\x20passphrase\x20to\x20encrypt\
    \x20the\x20mnenomic,\x20necessary\x20for\x20unlocking\x20the\x20daemon\
    \x20on\x20restarts\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03U\x08\x0e\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03U\x0f\x19\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03U\x1c\x1d\nE\n\x02\x04\x01\x12\x04[\0^\x01\x1a9*\n\x20Repres\
    ents\x20a\x20response\x20back\x20from\x20an\x20init\x20seed\x20request.\
    \n\n\n\n\x03\x04\x01\x01\x12\x03[\x08\x18\ne\n\x04\x04\x01\x02\0\x12\x03\
    \\\x08\x1c\"X\x20The\x20mnenomic\x20that\x20the\x20seed\x20was\x20genera\
    ted\x20from,\x20should\x20be\x20the\x20same\x20if\x20one\x20was\x20passe\
    d\x20in\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\\\x08\x0e\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\\\x0f\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\\\x1a\x1b\nF\n\x04\x04\x01\x02\x01\x12\x03]\x08\x1b\"9\x20The\x20ap\
    i\x20key\x20for\x20the\x20user\x20to\x20send\x20authenticated\x20request\
    s\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03]\x08\x0e\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03]\x0f\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03]\
    \x19\x1a\nL\n\x02\x04\x02\x12\x04c\0e\x01\x1a@*\n\x20Represents\x20an\
    \x20unlock\x20seed\x20request\x20to\x20unlock\x20the\x20master\x20seed.\
    \n\n\n\n\x03\x04\x02\x01\x12\x03c\x08\x19\na\n\x04\x04\x02\x02\0\x12\x03\
    d\x08\x1e\"T\x20The\x20passphrase\x20to\x20decrypt\x20the\x20seed,\x20ne\
    cessary\x20for\x20unlocking\x20the\x20daemon\x20on\x20restarts\n\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03d\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03d\x0f\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03d\x1c\x1d\nG\n\
    \x02\x04\x03\x12\x04j\0k\x01\x1a;*\n\x20Represents\x20a\x20response\x20b\
    ack\x20from\x20an\x20unlock\x20seed\x20request.\n\n\n\n\x03\x04\x03\x01\
    \x12\x03j\x08\x1a\n5\n\x02\x04\x04\x12\x04p\0q\x01\x1a)*\n\x20Represents\
    \x20an\x20status\x20request\x20message.\n\n\n\n\x03\x04\x04\x01\x12\x03p\
    \x08\x15\nA\n\x02\x04\x05\x12\x04v\0x\x01\x1a5*\n\x20Represents\x20a\x20\
    response\x20back\x20from\x20a\x20status\x20request.\n\n\n\n\x03\x04\x05\
    \x01\x12\x03v\x08\x16\n\xa8\x01\n\x04\x04\x05\x02\0\x12\x03w\x08\x1a\"\
    \x9a\x01\x20The\x20status\x20of\x20the\x20daemon\x20db/key.\x20NOT_INITI\
    ALIZED\x20means\x20an\x20InitSeed()\x20is\x20needed.\x20LOCKED\x20means\
    \x20an\x20UnlockSeed()\x20is\x20needed.\x20READY\x20means\x20the\x20daem\
    on\x20is\x20ready.\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03w\x08\x0e\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03w\x0f\x15\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03w\x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(InitSeedRequest::generated_message_descriptor_data());
            messages.push(InitSeedResponse::generated_message_descriptor_data());
            messages.push(UnlockSeedRequest::generated_message_descriptor_data());
            messages.push(UnlockSeedResponse::generated_message_descriptor_data());
            messages.push(StatusRequest::generated_message_descriptor_data());
            messages.push(StatusResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
