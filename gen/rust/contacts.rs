// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/contacts/contacts.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.Contact)
pub struct Contact {
    // message fields
    // @@protoc_insertion_point(field:contacts.Contact.id)
    pub id: i64,
    // @@protoc_insertion_point(field:contacts.Contact.did)
    pub did: ::std::string::String,
    // @@protoc_insertion_point(field:contacts.Contact.didDocument)
    pub didDocument: ::std::string::String,
    // @@protoc_insertion_point(field:contacts.Contact.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:contacts.Contact.userDID)
    pub userDID: ::std::string::String,
    // @@protoc_insertion_point(field:contacts.Contact.hasContacted)
    pub hasContacted: bool,
    // @@protoc_insertion_point(field:contacts.Contact.metadata)
    pub metadata: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.Contact.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Contact {
    fn default() -> &'a Contact {
        <Contact as ::protobuf::Message>::default_instance()
    }
}

impl Contact {
    pub fn new() -> Contact {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Contact| { &m.id },
            |m: &mut Contact| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "did",
            |m: &Contact| { &m.did },
            |m: &mut Contact| { &mut m.did },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "didDocument",
            |m: &Contact| { &m.didDocument },
            |m: &mut Contact| { &mut m.didDocument },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Contact| { &m.name },
            |m: &mut Contact| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "userDID",
            |m: &Contact| { &m.userDID },
            |m: &mut Contact| { &mut m.userDID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hasContacted",
            |m: &Contact| { &m.hasContacted },
            |m: &mut Contact| { &mut m.hasContacted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metadata",
            |m: &Contact| { &m.metadata },
            |m: &mut Contact| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Contact>(
            "Contact",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Contact {
    const NAME: &'static str = "Contact";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                18 => {
                    self.did = is.read_string()?;
                },
                26 => {
                    self.didDocument = is.read_string()?;
                },
                34 => {
                    self.name = is.read_string()?;
                },
                42 => {
                    self.userDID = is.read_string()?;
                },
                48 => {
                    self.hasContacted = is.read_bool()?;
                },
                58 => {
                    self.metadata = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.did);
        }
        if !self.didDocument.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.didDocument);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if !self.userDID.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.userDID);
        }
        if self.hasContacted != false {
            my_size += 1 + 1;
        }
        if !self.metadata.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.metadata);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.did.is_empty() {
            os.write_string(2, &self.did)?;
        }
        if !self.didDocument.is_empty() {
            os.write_string(3, &self.didDocument)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if !self.userDID.is_empty() {
            os.write_string(5, &self.userDID)?;
        }
        if self.hasContacted != false {
            os.write_bool(6, self.hasContacted)?;
        }
        if !self.metadata.is_empty() {
            os.write_string(7, &self.metadata)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Contact {
        Contact::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.did.clear();
        self.didDocument.clear();
        self.name.clear();
        self.userDID.clear();
        self.hasContacted = false;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Contact {
        static instance: Contact = Contact {
            id: 0,
            did: ::std::string::String::new(),
            didDocument: ::std::string::String::new(),
            name: ::std::string::String::new(),
            userDID: ::std::string::String::new(),
            hasContacted: false,
            metadata: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Contact {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Contact").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Contact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Contact {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.ContactUpdate)
pub struct ContactUpdate {
    // message fields
    // @@protoc_insertion_point(field:contacts.ContactUpdate.id)
    pub id: i64,
    // @@protoc_insertion_point(field:contacts.ContactUpdate.did)
    pub did: ::std::string::String,
    // @@protoc_insertion_point(field:contacts.ContactUpdate.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:contacts.ContactUpdate.metadata)
    pub metadata: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.ContactUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContactUpdate {
    fn default() -> &'a ContactUpdate {
        <ContactUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ContactUpdate {
    pub fn new() -> ContactUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ContactUpdate| { &m.id },
            |m: &mut ContactUpdate| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "did",
            |m: &ContactUpdate| { &m.did },
            |m: &mut ContactUpdate| { &mut m.did },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ContactUpdate| { &m.name },
            |m: &mut ContactUpdate| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metadata",
            |m: &ContactUpdate| { &m.metadata },
            |m: &mut ContactUpdate| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContactUpdate>(
            "ContactUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContactUpdate {
    const NAME: &'static str = "ContactUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                18 => {
                    self.did = is.read_string()?;
                },
                26 => {
                    self.name = is.read_string()?;
                },
                34 => {
                    self.metadata = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if !self.did.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.did);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if !self.metadata.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.metadata);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.did.is_empty() {
            os.write_string(2, &self.did)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if !self.metadata.is_empty() {
            os.write_string(4, &self.metadata)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContactUpdate {
        ContactUpdate::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.did.clear();
        self.name.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContactUpdate {
        static instance: ContactUpdate = ContactUpdate {
            id: 0,
            did: ::std::string::String::new(),
            name: ::std::string::String::new(),
            metadata: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContactUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContactUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContactUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContactUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to get a contact list.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.GetContactsListRequest)
pub struct GetContactsListRequest {
    // special fields
    // @@protoc_insertion_point(special_field:contacts.GetContactsListRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetContactsListRequest {
    fn default() -> &'a GetContactsListRequest {
        <GetContactsListRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetContactsListRequest {
    pub fn new() -> GetContactsListRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetContactsListRequest>(
            "GetContactsListRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetContactsListRequest {
    const NAME: &'static str = "GetContactsListRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetContactsListRequest {
        GetContactsListRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetContactsListRequest {
        static instance: GetContactsListRequest = GetContactsListRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetContactsListRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetContactsListRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetContactsListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetContactsListRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contact list.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.GetContactsListResponse)
pub struct GetContactsListResponse {
    // message fields
    // @@protoc_insertion_point(field:contacts.GetContactsListResponse.contacts)
    pub contacts: ::std::vec::Vec<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.GetContactsListResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetContactsListResponse {
    fn default() -> &'a GetContactsListResponse {
        <GetContactsListResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetContactsListResponse {
    pub fn new() -> GetContactsListResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contacts",
            |m: &GetContactsListResponse| { &m.contacts },
            |m: &mut GetContactsListResponse| { &mut m.contacts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetContactsListResponse>(
            "GetContactsListResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetContactsListResponse {
    const NAME: &'static str = "GetContactsListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.contacts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.contacts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.contacts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetContactsListResponse {
        GetContactsListResponse::new()
    }

    fn clear(&mut self) {
        self.contacts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetContactsListResponse {
        static instance: GetContactsListResponse = GetContactsListResponse {
            contacts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetContactsListResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetContactsListResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetContactsListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetContactsListResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to get a contact.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.GetContactRequest)
pub struct GetContactRequest {
    // message fields
    // @@protoc_insertion_point(field:contacts.GetContactRequest.id)
    pub id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.GetContactRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetContactRequest {
    fn default() -> &'a GetContactRequest {
        <GetContactRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetContactRequest {
    pub fn new() -> GetContactRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetContactRequest| { &m.id },
            |m: &mut GetContactRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetContactRequest>(
            "GetContactRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetContactRequest {
    const NAME: &'static str = "GetContactRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetContactRequest {
        GetContactRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetContactRequest {
        static instance: GetContactRequest = GetContactRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetContactRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetContactRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetContactRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetContactRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contact.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.GetContactResponse)
pub struct GetContactResponse {
    // message fields
    // @@protoc_insertion_point(field:contacts.GetContactResponse.contact)
    pub contact: ::protobuf::MessageField<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.GetContactResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetContactResponse {
    fn default() -> &'a GetContactResponse {
        <GetContactResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetContactResponse {
    pub fn new() -> GetContactResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Contact>(
            "contact",
            |m: &GetContactResponse| { &m.contact },
            |m: &mut GetContactResponse| { &mut m.contact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetContactResponse>(
            "GetContactResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetContactResponse {
    const NAME: &'static str = "GetContactResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contact)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.contact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.contact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetContactResponse {
        GetContactResponse::new()
    }

    fn clear(&mut self) {
        self.contact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetContactResponse {
        static instance: GetContactResponse = GetContactResponse {
            contact: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetContactResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetContactResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetContactResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetContactResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to create a contact.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.CreateContactRequest)
pub struct CreateContactRequest {
    // message fields
    // @@protoc_insertion_point(field:contacts.CreateContactRequest.contact)
    pub contact: ::protobuf::MessageField<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.CreateContactRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateContactRequest {
    fn default() -> &'a CreateContactRequest {
        <CreateContactRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateContactRequest {
    pub fn new() -> CreateContactRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Contact>(
            "contact",
            |m: &CreateContactRequest| { &m.contact },
            |m: &mut CreateContactRequest| { &mut m.contact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateContactRequest>(
            "CreateContactRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateContactRequest {
    const NAME: &'static str = "CreateContactRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contact)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.contact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.contact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateContactRequest {
        CreateContactRequest::new()
    }

    fn clear(&mut self) {
        self.contact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateContactRequest {
        static instance: CreateContactRequest = CreateContactRequest {
            contact: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateContactRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateContactRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateContactRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateContactRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contact created.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.CreateContactResponse)
pub struct CreateContactResponse {
    // message fields
    // @@protoc_insertion_point(field:contacts.CreateContactResponse.contact)
    pub contact: ::protobuf::MessageField<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.CreateContactResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateContactResponse {
    fn default() -> &'a CreateContactResponse {
        <CreateContactResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateContactResponse {
    pub fn new() -> CreateContactResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Contact>(
            "contact",
            |m: &CreateContactResponse| { &m.contact },
            |m: &mut CreateContactResponse| { &mut m.contact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateContactResponse>(
            "CreateContactResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateContactResponse {
    const NAME: &'static str = "CreateContactResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contact)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.contact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.contact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateContactResponse {
        CreateContactResponse::new()
    }

    fn clear(&mut self) {
        self.contact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateContactResponse {
        static instance: CreateContactResponse = CreateContactResponse {
            contact: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateContactResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateContactResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateContactResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateContactResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to create multiple contacts.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.CreateContactsRequest)
pub struct CreateContactsRequest {
    // message fields
    // @@protoc_insertion_point(field:contacts.CreateContactsRequest.contacts)
    pub contacts: ::std::vec::Vec<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.CreateContactsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateContactsRequest {
    fn default() -> &'a CreateContactsRequest {
        <CreateContactsRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateContactsRequest {
    pub fn new() -> CreateContactsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contacts",
            |m: &CreateContactsRequest| { &m.contacts },
            |m: &mut CreateContactsRequest| { &mut m.contacts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateContactsRequest>(
            "CreateContactsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateContactsRequest {
    const NAME: &'static str = "CreateContactsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.contacts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.contacts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.contacts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateContactsRequest {
        CreateContactsRequest::new()
    }

    fn clear(&mut self) {
        self.contacts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateContactsRequest {
        static instance: CreateContactsRequest = CreateContactsRequest {
            contacts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateContactsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateContactsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateContactsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateContactsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contacts created.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.CreateContactsResponse)
pub struct CreateContactsResponse {
    // message fields
    // @@protoc_insertion_point(field:contacts.CreateContactsResponse.contacts)
    pub contacts: ::std::vec::Vec<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.CreateContactsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateContactsResponse {
    fn default() -> &'a CreateContactsResponse {
        <CreateContactsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateContactsResponse {
    pub fn new() -> CreateContactsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contacts",
            |m: &CreateContactsResponse| { &m.contacts },
            |m: &mut CreateContactsResponse| { &mut m.contacts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateContactsResponse>(
            "CreateContactsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateContactsResponse {
    const NAME: &'static str = "CreateContactsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.contacts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.contacts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.contacts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateContactsResponse {
        CreateContactsResponse::new()
    }

    fn clear(&mut self) {
        self.contacts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateContactsResponse {
        static instance: CreateContactsResponse = CreateContactsResponse {
            contacts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateContactsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateContactsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateContactsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateContactsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to update a contact.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.UpdateContactRequest)
pub struct UpdateContactRequest {
    // message fields
    // @@protoc_insertion_point(field:contacts.UpdateContactRequest.contact)
    pub contact: ::protobuf::MessageField<ContactUpdate>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.UpdateContactRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateContactRequest {
    fn default() -> &'a UpdateContactRequest {
        <UpdateContactRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateContactRequest {
    pub fn new() -> UpdateContactRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ContactUpdate>(
            "contact",
            |m: &UpdateContactRequest| { &m.contact },
            |m: &mut UpdateContactRequest| { &mut m.contact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateContactRequest>(
            "UpdateContactRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateContactRequest {
    const NAME: &'static str = "UpdateContactRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contact)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.contact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.contact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateContactRequest {
        UpdateContactRequest::new()
    }

    fn clear(&mut self) {
        self.contact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateContactRequest {
        static instance: UpdateContactRequest = UpdateContactRequest {
            contact: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateContactRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateContactRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateContactRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateContactRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contact updated.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.UpdateContactResponse)
pub struct UpdateContactResponse {
    // message fields
    // @@protoc_insertion_point(field:contacts.UpdateContactResponse.contact)
    pub contact: ::protobuf::MessageField<Contact>,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.UpdateContactResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateContactResponse {
    fn default() -> &'a UpdateContactResponse {
        <UpdateContactResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateContactResponse {
    pub fn new() -> UpdateContactResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Contact>(
            "contact",
            |m: &UpdateContactResponse| { &m.contact },
            |m: &mut UpdateContactResponse| { &mut m.contact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateContactResponse>(
            "UpdateContactResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateContactResponse {
    const NAME: &'static str = "UpdateContactResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contact)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.contact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.contact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateContactResponse {
        UpdateContactResponse::new()
    }

    fn clear(&mut self) {
        self.contact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateContactResponse {
        static instance: UpdateContactResponse = UpdateContactResponse {
            contact: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateContactResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateContactResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateContactResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateContactResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to delete a contact.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.DeleteContactRequest)
pub struct DeleteContactRequest {
    // message fields
    // @@protoc_insertion_point(field:contacts.DeleteContactRequest.id)
    pub id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:contacts.DeleteContactRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteContactRequest {
    fn default() -> &'a DeleteContactRequest {
        <DeleteContactRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteContactRequest {
    pub fn new() -> DeleteContactRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteContactRequest| { &m.id },
            |m: &mut DeleteContactRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteContactRequest>(
            "DeleteContactRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteContactRequest {
    const NAME: &'static str = "DeleteContactRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteContactRequest {
        DeleteContactRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteContactRequest {
        static instance: DeleteContactRequest = DeleteContactRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteContactRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteContactRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteContactRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteContactRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the contact deletion event.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:contacts.DeleteContactResponse)
pub struct DeleteContactResponse {
    // special fields
    // @@protoc_insertion_point(special_field:contacts.DeleteContactResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteContactResponse {
    fn default() -> &'a DeleteContactResponse {
        <DeleteContactResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteContactResponse {
    pub fn new() -> DeleteContactResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteContactResponse>(
            "DeleteContactResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteContactResponse {
    const NAME: &'static str = "DeleteContactResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteContactResponse {
        DeleteContactResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteContactResponse {
        static instance: DeleteContactResponse = DeleteContactResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteContactResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteContactResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteContactResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteContactResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%proto/imp/api/contacts/contacts.proto\x12\x08contacts\x1a\x1cgoogle/a\
    pi/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \"\xbb\x01\n\x07Contact\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\
    \x10\n\x03did\x18\x02\x20\x01(\tR\x03did\x12\x20\n\x0bdidDocument\x18\
    \x03\x20\x01(\tR\x0bdidDocument\x12\x12\n\x04name\x18\x04\x20\x01(\tR\
    \x04name\x12\x18\n\x07userDID\x18\x05\x20\x01(\tR\x07userDID\x12\"\n\x0c\
    hasContacted\x18\x06\x20\x01(\x08R\x0chasContacted\x12\x1a\n\x08metadata\
    \x18\x07\x20\x01(\tR\x08metadata\"a\n\rContactUpdate\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x03R\x02id\x12\x10\n\x03did\x18\x02\x20\x01(\tR\x03did\x12\
    \x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x1a\n\x08metadata\x18\x04\
    \x20\x01(\tR\x08metadata\"\x18\n\x16GetContactsListRequest\"H\n\x17GetCo\
    ntactsListResponse\x12-\n\x08contacts\x18\x01\x20\x03(\x0b2\x11.contacts\
    .ContactR\x08contacts\"#\n\x11GetContactRequest\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x03R\x02id\"A\n\x12GetContactResponse\x12+\n\x07contact\x18\
    \x01\x20\x01(\x0b2\x11.contacts.ContactR\x07contact\"C\n\x14CreateContac\
    tRequest\x12+\n\x07contact\x18\x01\x20\x01(\x0b2\x11.contacts.ContactR\
    \x07contact\"D\n\x15CreateContactResponse\x12+\n\x07contact\x18\x01\x20\
    \x01(\x0b2\x11.contacts.ContactR\x07contact\"F\n\x15CreateContactsReques\
    t\x12-\n\x08contacts\x18\x01\x20\x03(\x0b2\x11.contacts.ContactR\x08cont\
    acts\"G\n\x16CreateContactsResponse\x12-\n\x08contacts\x18\x01\x20\x03(\
    \x0b2\x11.contacts.ContactR\x08contacts\"I\n\x14UpdateContactRequest\x12\
    1\n\x07contact\x18\x01\x20\x01(\x0b2\x17.contacts.ContactUpdateR\x07cont\
    act\"D\n\x15UpdateContactResponse\x12+\n\x07contact\x18\x01\x20\x01(\x0b\
    2\x11.contacts.ContactR\x07contact\"&\n\x14DeleteContactRequest\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\x03R\x02id\"\x17\n\x15DeleteContactResponse2\
    \xa7\x05\n\x08Contacts\x12l\n\x0fGetContactsList\x12\x20.contacts.GetCon\
    tactsListRequest\x1a!.contacts.GetContactsListResponse\"\x14\x82\xd3\xe4\
    \x93\x02\x0e\x12\x0c/v1/contacts\x12b\n\nGetContact\x12\x1b.contacts.Get\
    ContactRequest\x1a\x1c.contacts.GetContactResponse\"\x19\x82\xd3\xe4\x93\
    \x02\x13\x12\x11/v1/contacts/{id}\x12p\n\rCreateContact\x12\x1e.contacts\
    .CreateContactRequest\x1a\x1f.contacts.CreateContactResponse\"\x1e\x82\
    \xd3\xe4\x93\x02\x18\"\x13/v1/contacts/create:\x01*\x12x\n\x0eCreateCont\
    acts\x12\x1f.contacts.CreateContactsRequest\x1a\x20.contacts.CreateConta\
    ctsResponse\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/v1/contacts/createMulti:\
    \x01*\x12p\n\rUpdateContact\x12\x1e.contacts.UpdateContactRequest\x1a\
    \x1f.contacts.UpdateContactResponse\"\x1e\x82\xd3\xe4\x93\x02\x18\"\x13/\
    v1/contacts/update:\x01*\x12k\n\rDeleteContact\x12\x1e.contacts.DeleteCo\
    ntactRequest\x1a\x1f.contacts.DeleteContactResponse\"\x19\x82\xd3\xe4\
    \x93\x02\x13*\x11/v1/contacts/{id}B\xbd\x02Z&github.com/imperviousai/imp\
    -daemon/gen\x92A\x91\x02\x12@\n\x11Contacts\x20Services\"&\n\rImpervious\
    \x20AI\x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\x10applica\
    tion/json:\x10application/jsonZa\n_\n\x07api_key\x12T\x08\x02\x125An\x20\
    API\x20key\x20generated\x20by\x20the\x20daemon\x20for\x20authentication\
    \x1a\x17Grpc-Metadata-X-API-KEY\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\
    \x14Documentation\x20on\x20IMP\x12\x1ahttps://docs.impervious.aiJ\xd7\
    \x20\n\x07\x12\x05\x01\0\xcf\x01\x01\n=\n\x01\x0c\x12\x03\x01\0\x12\x1a3\
    /\x20Allows\x20for\x20Contacts\x20actions\x20for\x20Impervious\x20nodes\
    \n\n\x08\n\x01\x02\x12\x03\x03\0\x11\n\x08\n\x01\x08\x12\x03\x05\0=\n\t\
    \n\x02\x08\x0b\x12\x03\x05\0=\n\t\n\x02\x03\0\x12\x03\x07\0&\n\t\n\x02\
    \x03\x01\x12\x03\x08\08\n\t\n\x01\x08\x12\x04\n\0,\x02\n\x0b\n\x03\x08\
    \x92\x08\x12\x04\n\0,\x02\nR\n\x02\x06\0\x12\x041\0k\x01\x1aF*\n\x20Cont\
    acts\x20service\x20allows\x20Contacts\x20actions\x20from\x20the\x20Imper\
    vious\x20node.\n\n\n\n\x03\x06\0\x01\x12\x031\x08\x10\nN\n\x04\x06\0\x02\
    \0\x12\x045\x089\t\x1a@*\n\x20GetContactsList\x20gets\x20all\x20of\x20th\
    e\x20contacts\x20the\x20user\x20has\x20saved.\n\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x035\x0c\x1b\n\x0c\n\x05\x06\0\x02\0\x02\x12\x035\x1c2\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x035=T\n\r\n\x05\x06\0\x02\0\x04\x12\x046\x108\
    \x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x046\x108\x12\nH\n\x04\
    \x06\0\x02\x01\x12\x04>\x08B\t\x1a:*\n\x20GetContact\x20gets\x20a\x20spe\
    cific\x20contact\x20the\x20user\x20has\x20saved.\n\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03>\x0c\x16\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03>\x17(\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03>3E\n\r\n\x05\x06\0\x02\x01\x04\x12\
    \x04?\x10A\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04?\x10A\
    \x12\n\x93\x01\n\x04\x06\0\x02\x02\x12\x04H\x08M\t\x1a\x84\x01*\n\x20Cre\
    ateContact\x20will\x20create\x20a\x20specific\x20contact.\x20If\x20the\
    \x20contact\x20DID\x20has\x20not\x20been\x20added\x20to\x20the\x20ID\x20\
    database,\n\x20it\x20will\x20be\x20added\x20first.\n\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03H\x0c\x19\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03H\x1a\
    .\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03H9N\n\r\n\x05\x06\0\x02\x02\x04\
    \x12\x04I\x10L\x12\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04I\
    \x10L\x12\nk\n\x04\x06\0\x02\x03\x12\x04R\x08W\t\x1a]*\n\x20CreateContac\
    ts\x20will\x20create\x20multiple\x20contacts\x20passed\x20in.\x20A\x20ba\
    tch\x20version\x20of\x20CreateContact.\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03R\x0c\x1a\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03R\x1b0\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03R;Q\n\r\n\x05\x06\0\x02\x03\x04\x12\x04S\
    \x10V\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04S\x10V\x12\n?\
    \n\x04\x06\0\x02\x04\x12\x04\\\x08a\t\x1a1*\n\x20UpdateContact\x20will\
    \x20update\x20a\x20specific\x20contact.\n\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03\\\x0c\x19\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\\\x1a.\n\x0c\n\
    \x05\x06\0\x02\x04\x03\x12\x03\\9N\n\r\n\x05\x06\0\x02\x04\x04\x12\x04]\
    \x10`\x12\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04]\x10`\x12\n?\
    \n\x04\x06\0\x02\x05\x12\x04f\x08j\t\x1a1*\n\x20DeleteContact\x20will\
    \x20delete\x20a\x20specific\x20contact.\n\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x03f\x0c\x19\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03f\x1a.\n\x0c\n\
    \x05\x06\0\x02\x05\x03\x12\x03f9N\n\r\n\x05\x06\0\x02\x05\x04\x12\x04g\
    \x10i\x12\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04g\x10i\x12\n\
    \n\n\x02\x04\0\x12\x04n\0v\x01\n\n\n\x03\x04\0\x01\x12\x03n\x08\x0f\n$\n\
    \x04\x04\0\x02\0\x12\x03o\x08\x15\"\x17\x20The\x20ID\x20of\x20the\x20con\
    tact\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03o\x08\r\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03o\x0e\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03o\x13\x14\n%\
    \n\x04\x04\0\x02\x01\x12\x03p\x08\x17\"\x18\x20The\x20DID\x20of\x20the\
    \x20contact\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03p\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03p\x0f\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03p\x15\x16\n3\n\x04\x04\0\x02\x02\x12\x03q\x08\x1f\"&\x20The\x20DID\
    \x20document\x20json\x20of\x20the\x20contact\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03q\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03q\x0f\x1a\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03q\x1d\x1e\n&\n\x04\x04\0\x02\x03\x12\
    \x03r\x08\x18\"\x19\x20The\x20name\x20of\x20the\x20contact\n\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03r\x08\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03r\x0f\x13\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03r\x16\x17\n?\n\x04\
    \x04\0\x02\x04\x12\x03s\x08\x1b\"2\x20The\x20user\x20DID\x20that\x20this\
    \x20contact\x20has\x20been\x20saved\x20to\n\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03s\x08\x0e\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03s\x0f\x16\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03s\x19\x1a\nD\n\x04\x04\0\x02\x05\x12\
    \x03t\x08\x1e\"7\x20Whether\x20or\x20not\x20this\x20contact\x20has\x20be\
    en\x20contacted\x20before\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03t\x08\
    \x0c\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03t\r\x19\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03t\x1c\x1d\nF\n\x04\x04\0\x02\x06\x12\x03u\x08\x1c\"9\x20\
    The\x20application\x20specific\x20metadata\x20json\x20for\x20this\x20con\
    tact\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03u\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x06\x01\x12\x03u\x0f\x17\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03u\x1a\
    \x1b\n\n\n\x02\x04\x01\x12\x04x\0}\x01\n\n\n\x03\x04\x01\x01\x12\x03x\
    \x08\x15\n$\n\x04\x04\x01\x02\0\x12\x03y\x08\x15\"\x17\x20The\x20ID\x20o\
    f\x20the\x20contact\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03y\x08\r\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03y\x0e\x10\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03y\x13\x14\n%\n\x04\x04\x01\x02\x01\x12\x03z\x08\x17\"\x18\x20The\
    \x20DID\x20of\x20the\x20contact\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03z\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03z\x0f\x12\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03z\x15\x16\n&\n\x04\x04\x01\x02\x02\x12\
    \x03{\x08\x18\"\x19\x20The\x20name\x20of\x20the\x20contact\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03{\x08\x0e\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03{\x0f\x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03{\x16\x17\nF\n\
    \x04\x04\x01\x02\x03\x12\x03|\x08\x1c\"9\x20The\x20application\x20specif\
    ic\x20metadata\x20json\x20for\x20this\x20contact\n\n\x0c\n\x05\x04\x01\
    \x02\x03\x05\x12\x03|\x08\x0e\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03|\
    \x0f\x17\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03|\x1a\x1b\n=\n\x02\x04\
    \x02\x12\x06\x82\x01\0\x83\x01\x01\x1a/*\n\x20Represents\x20a\x20request\
    \x20to\x20get\x20a\x20contact\x20list.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\
    \x82\x01\x08\x1e\nD\n\x02\x04\x03\x12\x06\x88\x01\0\x8a\x01\x01\x1a6*\n\
    \x20Represents\x20a\x20response\x20containing\x20the\x20contact\x20list.\
    \n\n\x0b\n\x03\x04\x03\x01\x12\x04\x88\x01\x08\x1f\n\x20\n\x04\x04\x03\
    \x02\0\x12\x04\x89\x01\x08&\"\x12\x20The\x20contact\x20list\n\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04\x89\x01\x08\x10\n\r\n\x05\x04\x03\x02\0\x06\
    \x12\x04\x89\x01\x11\x18\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x89\x01\x19\
    !\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x89\x01$%\n8\n\x02\x04\x04\x12\x06\
    \x8f\x01\0\x91\x01\x01\x1a**\n\x20Represents\x20a\x20request\x20to\x20ge\
    t\x20a\x20contact.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x8f\x01\x08\x19\n1\
    \n\x04\x04\x04\x02\0\x12\x04\x90\x01\x08\x15\"#\x20The\x20ID\x20of\x20th\
    e\x20contact\x20to\x20retrieve\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x90\
    \x01\x08\r\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x90\x01\x0e\x10\n\r\n\x05\
    \x04\x04\x02\0\x03\x12\x04\x90\x01\x13\x14\n?\n\x02\x04\x05\x12\x06\x96\
    \x01\0\x98\x01\x01\x1a1*\n\x20Represents\x20a\x20response\x20containing\
    \x20the\x20contact.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x96\x01\x08\x1a\n%\
    \n\x04\x04\x05\x02\0\x12\x04\x97\x01\x08\x1c\"\x17\x20The\x20contact\x20\
    retrieved\n\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\x97\x01\x08\x0f\n\r\n\
    \x05\x04\x05\x02\0\x01\x12\x04\x97\x01\x10\x17\n\r\n\x05\x04\x05\x02\0\
    \x03\x12\x04\x97\x01\x1a\x1b\n;\n\x02\x04\x06\x12\x06\x9d\x01\0\x9f\x01\
    \x01\x1a-*\n\x20Represents\x20a\x20request\x20to\x20create\x20a\x20conta\
    ct.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\x9d\x01\x08\x1c\n&\n\x04\x04\x06\
    \x02\0\x12\x04\x9e\x01\x08\x1c\"\x18\x20The\x20contact\x20to\x20created\
    \n\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\x9e\x01\x08\x0f\n\r\n\x05\x04\x06\
    \x02\0\x01\x12\x04\x9e\x01\x10\x17\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\
    \x9e\x01\x1a\x1b\nG\n\x02\x04\x07\x12\x06\xa4\x01\0\xa6\x01\x01\x1a9*\n\
    \x20Represents\x20a\x20response\x20containing\x20the\x20contact\x20creat\
    ed.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xa4\x01\x08\x1d\n#\n\x04\x04\x07\
    \x02\0\x12\x04\xa5\x01\x08\x1c\"\x15\x20The\x20contact\x20created\n\n\r\
    \n\x05\x04\x07\x02\0\x06\x12\x04\xa5\x01\x08\x0f\n\r\n\x05\x04\x07\x02\0\
    \x01\x12\x04\xa5\x01\x10\x17\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xa5\x01\
    \x1a\x1b\nC\n\x02\x04\x08\x12\x06\xab\x01\0\xad\x01\x01\x1a5*\n\x20Repre\
    sents\x20a\x20request\x20to\x20create\x20multiple\x20contacts.\n\n\x0b\n\
    \x03\x04\x08\x01\x12\x04\xab\x01\x08\x1d\n'\n\x04\x04\x08\x02\0\x12\x04\
    \xac\x01\x08&\"\x19\x20The\x20contacts\x20to\x20created\n\n\r\n\x05\x04\
    \x08\x02\0\x04\x12\x04\xac\x01\x08\x10\n\r\n\x05\x04\x08\x02\0\x06\x12\
    \x04\xac\x01\x11\x18\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xac\x01\x19!\n\
    \r\n\x05\x04\x08\x02\0\x03\x12\x04\xac\x01$%\nH\n\x02\x04\t\x12\x06\xb2\
    \x01\0\xb4\x01\x01\x1a:*\n\x20Represents\x20a\x20response\x20containing\
    \x20the\x20contacts\x20created.\n\n\x0b\n\x03\x04\t\x01\x12\x04\xb2\x01\
    \x08\x1e\n$\n\x04\x04\t\x02\0\x12\x04\xb3\x01\x08&\"\x16\x20The\x20conta\
    cts\x20created\n\n\r\n\x05\x04\t\x02\0\x04\x12\x04\xb3\x01\x08\x10\n\r\n\
    \x05\x04\t\x02\0\x06\x12\x04\xb3\x01\x11\x18\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\xb3\x01\x19!\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xb3\x01$%\n;\n\
    \x02\x04\n\x12\x06\xb9\x01\0\xbb\x01\x01\x1a-*\n\x20Represents\x20a\x20r\
    equest\x20to\x20update\x20a\x20contact.\n\n\x0b\n\x03\x04\n\x01\x12\x04\
    \xb9\x01\x08\x1c\n%\n\x04\x04\n\x02\0\x12\x04\xba\x01\x08\"\"\x17\x20The\
    \x20contact\x20to\x20update\n\n\r\n\x05\x04\n\x02\0\x06\x12\x04\xba\x01\
    \x08\x15\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xba\x01\x16\x1d\n\r\n\x05\x04\
    \n\x02\0\x03\x12\x04\xba\x01\x20!\nG\n\x02\x04\x0b\x12\x06\xc0\x01\0\xc2\
    \x01\x01\x1a9*\n\x20Represents\x20a\x20response\x20containing\x20the\x20\
    contact\x20updated.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xc0\x01\x08\x1d\n\
    \"\n\x04\x04\x0b\x02\0\x12\x04\xc1\x01\x08\x1c\"\x14\x20The\x20contact\
    \x20update\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xc1\x01\x08\x0f\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\xc1\x01\x10\x17\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\xc1\x01\x1a\x1b\n;\n\x02\x04\x0c\x12\x06\xc7\x01\0\xc9\x01\
    \x01\x1a-*\n\x20Represents\x20a\x20request\x20to\x20delete\x20a\x20conta\
    ct.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xc7\x01\x08\x1c\n/\n\x04\x04\x0c\
    \x02\0\x12\x04\xc8\x01\x08\x15\"!\x20The\x20ID\x20of\x20the\x20contact\
    \x20to\x20delete\n\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xc8\x01\x08\r\n\r\
    \n\x05\x04\x0c\x02\0\x01\x12\x04\xc8\x01\x0e\x10\n\r\n\x05\x04\x0c\x02\0\
    \x03\x12\x04\xc8\x01\x13\x14\nN\n\x02\x04\r\x12\x06\xce\x01\0\xcf\x01\
    \x01\x1a@*\n\x20Represents\x20a\x20response\x20containing\x20the\x20cont\
    act\x20deletion\x20event.\n\n\x0b\n\x03\x04\r\x01\x12\x04\xce\x01\x08\
    \x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(Contact::generated_message_descriptor_data());
            messages.push(ContactUpdate::generated_message_descriptor_data());
            messages.push(GetContactsListRequest::generated_message_descriptor_data());
            messages.push(GetContactsListResponse::generated_message_descriptor_data());
            messages.push(GetContactRequest::generated_message_descriptor_data());
            messages.push(GetContactResponse::generated_message_descriptor_data());
            messages.push(CreateContactRequest::generated_message_descriptor_data());
            messages.push(CreateContactResponse::generated_message_descriptor_data());
            messages.push(CreateContactsRequest::generated_message_descriptor_data());
            messages.push(CreateContactsResponse::generated_message_descriptor_data());
            messages.push(UpdateContactRequest::generated_message_descriptor_data());
            messages.push(UpdateContactResponse::generated_message_descriptor_data());
            messages.push(DeleteContactRequest::generated_message_descriptor_data());
            messages.push(DeleteContactResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
