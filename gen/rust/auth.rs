// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/auth/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.AuthAPIKey)
pub struct AuthAPIKey {
    // message fields
    // @@protoc_insertion_point(field:auth.AuthAPIKey.id)
    pub id: i64,
    // @@protoc_insertion_point(field:auth.AuthAPIKey.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:auth.AuthAPIKey.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:auth.AuthAPIKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthAPIKey {
    fn default() -> &'a AuthAPIKey {
        <AuthAPIKey as ::protobuf::Message>::default_instance()
    }
}

impl AuthAPIKey {
    pub fn new() -> AuthAPIKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &AuthAPIKey| { &m.id },
            |m: &mut AuthAPIKey| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AuthAPIKey| { &m.name },
            |m: &mut AuthAPIKey| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &AuthAPIKey| { &m.description },
            |m: &mut AuthAPIKey| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthAPIKey>(
            "AuthAPIKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthAPIKey {
    const NAME: &'static str = "AuthAPIKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthAPIKey {
        AuthAPIKey::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthAPIKey {
        static instance: AuthAPIKey = AuthAPIKey {
            id: 0,
            name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthAPIKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthAPIKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthAPIKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthAPIKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to get a list of the auth API keys.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.GetAuthKeysRequest)
pub struct GetAuthKeysRequest {
    // special fields
    // @@protoc_insertion_point(special_field:auth.GetAuthKeysRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAuthKeysRequest {
    fn default() -> &'a GetAuthKeysRequest {
        <GetAuthKeysRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAuthKeysRequest {
    pub fn new() -> GetAuthKeysRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAuthKeysRequest>(
            "GetAuthKeysRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAuthKeysRequest {
    const NAME: &'static str = "GetAuthKeysRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAuthKeysRequest {
        GetAuthKeysRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAuthKeysRequest {
        static instance: GetAuthKeysRequest = GetAuthKeysRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAuthKeysRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAuthKeysRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAuthKeysRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAuthKeysRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response the list of auth API keys.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.GetAuthKeysResponse)
pub struct GetAuthKeysResponse {
    // message fields
    // @@protoc_insertion_point(field:auth.GetAuthKeysResponse.keys)
    pub keys: ::std::vec::Vec<AuthAPIKey>,
    // special fields
    // @@protoc_insertion_point(special_field:auth.GetAuthKeysResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAuthKeysResponse {
    fn default() -> &'a GetAuthKeysResponse {
        <GetAuthKeysResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAuthKeysResponse {
    pub fn new() -> GetAuthKeysResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "keys",
            |m: &GetAuthKeysResponse| { &m.keys },
            |m: &mut GetAuthKeysResponse| { &mut m.keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAuthKeysResponse>(
            "GetAuthKeysResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAuthKeysResponse {
    const NAME: &'static str = "GetAuthKeysResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.keys {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAuthKeysResponse {
        GetAuthKeysResponse::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAuthKeysResponse {
        static instance: GetAuthKeysResponse = GetAuthKeysResponse {
            keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAuthKeysResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAuthKeysResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAuthKeysResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAuthKeysResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to create a new auth API key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.CreateAuthKeyRequest)
pub struct CreateAuthKeyRequest {
    // message fields
    // @@protoc_insertion_point(field:auth.CreateAuthKeyRequest.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:auth.CreateAuthKeyRequest.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:auth.CreateAuthKeyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateAuthKeyRequest {
    fn default() -> &'a CreateAuthKeyRequest {
        <CreateAuthKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateAuthKeyRequest {
    pub fn new() -> CreateAuthKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &CreateAuthKeyRequest| { &m.name },
            |m: &mut CreateAuthKeyRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &CreateAuthKeyRequest| { &m.description },
            |m: &mut CreateAuthKeyRequest| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateAuthKeyRequest>(
            "CreateAuthKeyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateAuthKeyRequest {
    const NAME: &'static str = "CreateAuthKeyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateAuthKeyRequest {
        CreateAuthKeyRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateAuthKeyRequest {
        static instance: CreateAuthKeyRequest = CreateAuthKeyRequest {
            name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateAuthKeyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateAuthKeyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateAuthKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAuthKeyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the new auth API key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.CreateAuthKeyResponse)
pub struct CreateAuthKeyResponse {
    // message fields
    // @@protoc_insertion_point(field:auth.CreateAuthKeyResponse.key)
    pub key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:auth.CreateAuthKeyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateAuthKeyResponse {
    fn default() -> &'a CreateAuthKeyResponse {
        <CreateAuthKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateAuthKeyResponse {
    pub fn new() -> CreateAuthKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &CreateAuthKeyResponse| { &m.key },
            |m: &mut CreateAuthKeyResponse| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateAuthKeyResponse>(
            "CreateAuthKeyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateAuthKeyResponse {
    const NAME: &'static str = "CreateAuthKeyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateAuthKeyResponse {
        CreateAuthKeyResponse::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateAuthKeyResponse {
        static instance: CreateAuthKeyResponse = CreateAuthKeyResponse {
            key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateAuthKeyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateAuthKeyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateAuthKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAuthKeyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to update an auth API key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.UpdateAuthKeyRequest)
pub struct UpdateAuthKeyRequest {
    // message fields
    // @@protoc_insertion_point(field:auth.UpdateAuthKeyRequest.id)
    pub id: i64,
    // @@protoc_insertion_point(field:auth.UpdateAuthKeyRequest.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:auth.UpdateAuthKeyRequest.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:auth.UpdateAuthKeyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateAuthKeyRequest {
    fn default() -> &'a UpdateAuthKeyRequest {
        <UpdateAuthKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAuthKeyRequest {
    pub fn new() -> UpdateAuthKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UpdateAuthKeyRequest| { &m.id },
            |m: &mut UpdateAuthKeyRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UpdateAuthKeyRequest| { &m.name },
            |m: &mut UpdateAuthKeyRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &UpdateAuthKeyRequest| { &m.description },
            |m: &mut UpdateAuthKeyRequest| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateAuthKeyRequest>(
            "UpdateAuthKeyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateAuthKeyRequest {
    const NAME: &'static str = "UpdateAuthKeyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateAuthKeyRequest {
        UpdateAuthKeyRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateAuthKeyRequest {
        static instance: UpdateAuthKeyRequest = UpdateAuthKeyRequest {
            id: 0,
            name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateAuthKeyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateAuthKeyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateAuthKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAuthKeyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the update results.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.UpdateAuthKeyResponse)
pub struct UpdateAuthKeyResponse {
    // special fields
    // @@protoc_insertion_point(special_field:auth.UpdateAuthKeyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateAuthKeyResponse {
    fn default() -> &'a UpdateAuthKeyResponse {
        <UpdateAuthKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAuthKeyResponse {
    pub fn new() -> UpdateAuthKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateAuthKeyResponse>(
            "UpdateAuthKeyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateAuthKeyResponse {
    const NAME: &'static str = "UpdateAuthKeyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateAuthKeyResponse {
        UpdateAuthKeyResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateAuthKeyResponse {
        static instance: UpdateAuthKeyResponse = UpdateAuthKeyResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateAuthKeyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateAuthKeyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateAuthKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAuthKeyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to delete an auth API key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.DeleteAuthKeyRequest)
pub struct DeleteAuthKeyRequest {
    // message fields
    // @@protoc_insertion_point(field:auth.DeleteAuthKeyRequest.id)
    pub id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:auth.DeleteAuthKeyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteAuthKeyRequest {
    fn default() -> &'a DeleteAuthKeyRequest {
        <DeleteAuthKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAuthKeyRequest {
    pub fn new() -> DeleteAuthKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteAuthKeyRequest| { &m.id },
            |m: &mut DeleteAuthKeyRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteAuthKeyRequest>(
            "DeleteAuthKeyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteAuthKeyRequest {
    const NAME: &'static str = "DeleteAuthKeyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteAuthKeyRequest {
        DeleteAuthKeyRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteAuthKeyRequest {
        static instance: DeleteAuthKeyRequest = DeleteAuthKeyRequest {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteAuthKeyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteAuthKeyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteAuthKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAuthKeyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the deletion results.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:auth.DeleteAuthKeyResponse)
pub struct DeleteAuthKeyResponse {
    // special fields
    // @@protoc_insertion_point(special_field:auth.DeleteAuthKeyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteAuthKeyResponse {
    fn default() -> &'a DeleteAuthKeyResponse {
        <DeleteAuthKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAuthKeyResponse {
    pub fn new() -> DeleteAuthKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteAuthKeyResponse>(
            "DeleteAuthKeyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteAuthKeyResponse {
    const NAME: &'static str = "DeleteAuthKeyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteAuthKeyResponse {
        DeleteAuthKeyResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteAuthKeyResponse {
        static instance: DeleteAuthKeyResponse = DeleteAuthKeyResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteAuthKeyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteAuthKeyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteAuthKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAuthKeyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dproto/imp/api/auth/auth.proto\x12\x04auth\x1a\x1cgoogle/api/annota\
    tions.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"R\n\nAut\
    hAPIKey\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\x18\x03\x20\x01(\t\
    R\x0bdescription\"\x14\n\x12GetAuthKeysRequest\";\n\x13GetAuthKeysRespon\
    se\x12$\n\x04keys\x18\x01\x20\x03(\x0b2\x10.auth.AuthAPIKeyR\x04keys\"L\
    \n\x14CreateAuthKeyRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\")\n\x15Cre\
    ateAuthKeyResponse\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\"\\\n\x14\
    UpdateAuthKeyRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\x12\
    \n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\x18\x03\
    \x20\x01(\tR\x0bdescription\"\x17\n\x15UpdateAuthKeyResponse\"&\n\x14Del\
    eteAuthKeyRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\"\x17\n\
    \x15DeleteAuthKeyResponse2\x80\x03\n\x04Auth\x12T\n\x0bGetAuthKeys\x12\
    \x18.auth.GetAuthKeysRequest\x1a\x19.auth.GetAuthKeysResponse\"\x10\x82\
    \xd3\xe4\x93\x02\n\x12\x08/v1/auth\x12]\n\rCreateAuthKey\x12\x1a.auth.Cr\
    eateAuthKeyRequest\x1a\x1b.auth.CreateAuthKeyResponse\"\x13\x82\xd3\xe4\
    \x93\x02\r\"\x08/v1/auth:\x01*\x12b\n\rUpdateAuthKey\x12\x1a.auth.Update\
    AuthKeyRequest\x1a\x1b.auth.UpdateAuthKeyResponse\"\x18\x82\xd3\xe4\x93\
    \x02\x12\x1a\r/v1/auth/{id}:\x01*\x12_\n\rDeleteAuthKey\x12\x1a.auth.Del\
    eteAuthKeyRequest\x1a\x1b.auth.DeleteAuthKeyResponse\"\x15\x82\xd3\xe4\
    \x93\x02\x0f*\r/v1/auth/{id}B\xb9\x02Z&github.com/imperviousai/imp-daemo\
    n/gen\x92A\x8d\x02\x12<\n\rAuth\x20Services\"&\n\rImpervious\x20AI\x12\
    \x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\x10application/json:\
    \x10application/jsonZa\n_\n\x07api_key\x12T\x08\x02\x125An\x20API\x20key\
    \x20generated\x20by\x20the\x20daemon\x20for\x20authentication\x1a\x17Grp\
    c-Metadata-X-API-KEY\x20\x03b\r\n\x0b\n\x07api_key\x12\0r2\n\x14Document\
    ation\x20on\x20IMP\x12\x1ahttps://docs.impervious.aiJ\xbd\x13\n\x07\x12\
    \x05\x01\0\x96\x01\x01\n9\n\x01\x0c\x12\x03\x01\0\x12\x1a//\x20Allows\
    \x20for\x20Auth\x20actions\x20for\x20Impervious\x20nodes\n\n\x08\n\x01\
    \x02\x12\x03\x03\0\r\n\x08\n\x01\x08\x12\x03\x05\0=\n\t\n\x02\x08\x0b\
    \x12\x03\x05\0=\n\t\n\x02\x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\
    \x08\08\n\t\n\x01\x08\x12\x04\n\0,\x02\n\x0b\n\x03\x08\x92\x08\x12\x04\n\
    \0,\x02\nJ\n\x02\x06\0\x12\x041\0W\x01\x1a>*\n\x20Auth\x20service\x20all\
    ows\x20Auth\x20actions\x20from\x20the\x20Impervious\x20node.\n\n\n\n\x03\
    \x06\0\x01\x12\x031\x08\x0c\nJ\n\x04\x06\0\x02\0\x12\x045\x089\t\x1a<*\n\
    \x20GetAuthKeys\x20gets\x20a\x20list\x20of\x20auth\x20api\x20keys\x20for\
    \x20the\x20daemon.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x035\x0c\x17\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x035\x18*\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    55H\n\r\n\x05\x06\0\x02\0\x04\x12\x046\x108\x12\n\x11\n\t\x06\0\x02\0\
    \x04\xb0\xca\xbc\"\x12\x046\x108\x12\nY\n\x04\x06\0\x02\x01\x12\x04>\x08\
    C\t\x1aK*\n\x20CreateAuthKey\x20creates\x20a\x20new\x20api\x20key\x20for\
    \x20authentication\x20into\x20the\x20daemon.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03>\x0c\x19\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03>\x1a.\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03>9N\n\r\n\x05\x06\0\x02\x01\x04\x12\x04?\
    \x10B\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04?\x10B\x12\n8\
    \n\x04\x06\0\x02\x02\x12\x04H\x08M\t\x1a**\n\x20UpdateAuthKey\x20updates\
    \x20api\x20key\x20details.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03H\x0c\
    \x19\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03H\x1a.\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03H9N\n\r\n\x05\x06\0\x02\x02\x04\x12\x04I\x10L\x12\n\x11\
    \n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04I\x10L\x12\n?\n\x04\x06\0\
    \x02\x03\x12\x04R\x08V\t\x1a1*\n\x20DeleteAuthKey\x20will\x20delete\x20a\
    \x20specific\x20api\x20key.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03R\x0c\
    \x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03R\x1a.\n\x0c\n\x05\x06\0\x02\
    \x03\x03\x12\x03R9N\n\r\n\x05\x06\0\x02\x03\x04\x12\x04S\x10U\x12\n\x11\
    \n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04S\x10U\x12\n\n\n\x02\x04\0\
    \x12\x04Z\0^\x01\n\n\n\x03\x04\0\x01\x12\x03Z\x08\x12\n$\n\x04\x04\0\x02\
    \0\x12\x03[\x08\x15\"\x17\x20the\x20ID\x20of\x20the\x20API\x20key\n\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03[\x08\r\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03[\x0e\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03[\x13\x14\n&\n\x04\
    \x04\0\x02\x01\x12\x03\\\x08\x18\"\x19\x20the\x20name\x20of\x20the\x20AP\
    I\x20key\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\\\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\\\x0f\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\\\x16\x17\n-\n\x04\x04\0\x02\x02\x12\x03]\x08\x1f\"\x20\x20the\x20d\
    escription\x20of\x20the\x20API\x20key\n\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03]\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03]\x0f\x1a\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03]\x1d\x1e\nH\n\x02\x04\x01\x12\x04c\0d\x01\
    \x1a<*\n\x20Represents\x20a\x20request\x20to\x20get\x20a\x20list\x20of\
    \x20the\x20auth\x20API\x20keys.\n\n\n\n\x03\x04\x01\x01\x12\x03c\x08\x1a\
    \n@\n\x02\x04\x02\x12\x04i\0k\x01\x1a4*\n\x20Represents\x20a\x20response\
    \x20the\x20list\x20of\x20auth\x20API\x20keys.\n\n\n\n\x03\x04\x02\x01\
    \x12\x03i\x08\x1b\n#\n\x04\x04\x02\x02\0\x12\x03j\x08%\"\x16\x20the\x20l\
    ist\x20of\x20API\x20keys\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03j\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03j\x11\x1b\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03j\x1c\x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03j#$\nB\
    \n\x02\x04\x03\x12\x04p\0s\x01\x1a6*\n\x20Represents\x20a\x20request\x20\
    to\x20create\x20a\x20new\x20auth\x20API\x20key.\n\n\n\n\x03\x04\x03\x01\
    \x12\x03p\x08\x1c\n&\n\x04\x04\x03\x02\0\x12\x03q\x08\x18\"\x19\x20the\
    \x20name\x20of\x20the\x20API\x20key\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03q\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03q\x0f\x13\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03q\x16\x17\n-\n\x04\x04\x03\x02\x01\x12\x03r\
    \x08\x1f\"\x20\x20the\x20description\x20of\x20the\x20API\x20key\n\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03r\x08\x0e\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03r\x0f\x1a\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03r\x1d\x1e\n\
    F\n\x02\x04\x04\x12\x04x\0z\x01\x1a:*\n\x20Represents\x20a\x20response\
    \x20containing\x20the\x20new\x20auth\x20API\x20key.\n\n\n\n\x03\x04\x04\
    \x01\x12\x03x\x08\x1d\n:\n\x04\x04\x04\x02\0\x12\x03y\x08\x17\"-\x20the\
    \x20API\x20key\x20itself\x20in\x20UUID\x20string\x20formation\n\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x03y\x08\x0e\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03y\x0f\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03y\x15\x16\n@\n\
    \x02\x04\x05\x12\x05\x7f\0\x83\x01\x01\x1a3*\n\x20Represents\x20a\x20req\
    uest\x20to\x20update\x20an\x20auth\x20API\x20key.\n\n\n\n\x03\x04\x05\
    \x01\x12\x03\x7f\x08\x1c\n/\n\x04\x04\x05\x02\0\x12\x04\x80\x01\x08\x15\
    \"!\x20the\x20id\x20of\x20the\x20API\x20key\x20to\x20update\n\n\r\n\x05\
    \x04\x05\x02\0\x05\x12\x04\x80\x01\x08\r\n\r\n\x05\x04\x05\x02\0\x01\x12\
    \x04\x80\x01\x0e\x10\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x80\x01\x13\x14\
    \n'\n\x04\x04\x05\x02\x01\x12\x04\x81\x01\x08\x18\"\x19\x20the\x20name\
    \x20of\x20the\x20API\x20key\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\x81\
    \x01\x08\x0e\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x81\x01\x0f\x13\n\r\n\
    \x05\x04\x05\x02\x01\x03\x12\x04\x81\x01\x16\x17\n.\n\x04\x04\x05\x02\
    \x02\x12\x04\x82\x01\x08\x1f\"\x20\x20the\x20description\x20of\x20the\
    \x20API\x20key\n\n\r\n\x05\x04\x05\x02\x02\x05\x12\x04\x82\x01\x08\x0e\n\
    \r\n\x05\x04\x05\x02\x02\x01\x12\x04\x82\x01\x0f\x1a\n\r\n\x05\x04\x05\
    \x02\x02\x03\x12\x04\x82\x01\x1d\x1e\nF\n\x02\x04\x06\x12\x06\x88\x01\0\
    \x89\x01\x01\x1a8*\n\x20Represents\x20a\x20response\x20containing\x20the\
    \x20update\x20results.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\x88\x01\x08\x1d\
    \nA\n\x02\x04\x07\x12\x06\x8e\x01\0\x90\x01\x01\x1a3*\n\x20Represents\
    \x20a\x20request\x20to\x20delete\x20an\x20auth\x20API\x20key.\n\n\x0b\n\
    \x03\x04\x07\x01\x12\x04\x8e\x01\x08\x1c\n/\n\x04\x04\x07\x02\0\x12\x04\
    \x8f\x01\x08\x15\"!\x20the\x20id\x20of\x20the\x20API\x20key\x20to\x20del\
    ete\n\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x8f\x01\x08\r\n\r\n\x05\x04\
    \x07\x02\0\x01\x12\x04\x8f\x01\x0e\x10\n\r\n\x05\x04\x07\x02\0\x03\x12\
    \x04\x8f\x01\x13\x14\nH\n\x02\x04\x08\x12\x06\x95\x01\0\x96\x01\x01\x1a:\
    *\n\x20Represents\x20a\x20response\x20containing\x20the\x20deletion\x20r\
    esults.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x95\x01\x08\x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(AuthAPIKey::generated_message_descriptor_data());
            messages.push(GetAuthKeysRequest::generated_message_descriptor_data());
            messages.push(GetAuthKeysResponse::generated_message_descriptor_data());
            messages.push(CreateAuthKeyRequest::generated_message_descriptor_data());
            messages.push(CreateAuthKeyResponse::generated_message_descriptor_data());
            messages.push(UpdateAuthKeyRequest::generated_message_descriptor_data());
            messages.push(UpdateAuthKeyResponse::generated_message_descriptor_data());
            messages.push(DeleteAuthKeyRequest::generated_message_descriptor_data());
            messages.push(DeleteAuthKeyResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
