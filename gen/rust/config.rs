// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/imp/api/config/config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.LightningConfig)
pub struct LightningConfig {
    // message fields
    // @@protoc_insertion_point(field:configs.LightningConfig.ip)
    pub ip: ::std::string::String,
    // @@protoc_insertion_point(field:configs.LightningConfig.port)
    pub port: ::std::string::String,
    // @@protoc_insertion_point(field:configs.LightningConfig.pubkey)
    pub pubkey: ::std::string::String,
    // @@protoc_insertion_point(field:configs.LightningConfig.tls_cert)
    pub tls_cert: ::std::string::String,
    // @@protoc_insertion_point(field:configs.LightningConfig.admin_macaroon)
    pub admin_macaroon: ::std::string::String,
    // @@protoc_insertion_point(field:configs.LightningConfig.listening)
    pub listening: bool,
    // @@protoc_insertion_point(field:configs.LightningConfig.tls_cert_hex)
    pub tls_cert_hex: ::std::string::String,
    // @@protoc_insertion_point(field:configs.LightningConfig.admin_macaroon_hex)
    pub admin_macaroon_hex: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:configs.LightningConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LightningConfig {
    fn default() -> &'a LightningConfig {
        <LightningConfig as ::protobuf::Message>::default_instance()
    }
}

impl LightningConfig {
    pub fn new() -> LightningConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ip",
            |m: &LightningConfig| { &m.ip },
            |m: &mut LightningConfig| { &mut m.ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &LightningConfig| { &m.port },
            |m: &mut LightningConfig| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pubkey",
            |m: &LightningConfig| { &m.pubkey },
            |m: &mut LightningConfig| { &mut m.pubkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tls_cert",
            |m: &LightningConfig| { &m.tls_cert },
            |m: &mut LightningConfig| { &mut m.tls_cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "admin_macaroon",
            |m: &LightningConfig| { &m.admin_macaroon },
            |m: &mut LightningConfig| { &mut m.admin_macaroon },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "listening",
            |m: &LightningConfig| { &m.listening },
            |m: &mut LightningConfig| { &mut m.listening },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tls_cert_hex",
            |m: &LightningConfig| { &m.tls_cert_hex },
            |m: &mut LightningConfig| { &mut m.tls_cert_hex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "admin_macaroon_hex",
            |m: &LightningConfig| { &m.admin_macaroon_hex },
            |m: &mut LightningConfig| { &mut m.admin_macaroon_hex },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LightningConfig>(
            "LightningConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LightningConfig {
    const NAME: &'static str = "LightningConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ip = is.read_string()?;
                },
                18 => {
                    self.port = is.read_string()?;
                },
                26 => {
                    self.pubkey = is.read_string()?;
                },
                34 => {
                    self.tls_cert = is.read_string()?;
                },
                42 => {
                    self.admin_macaroon = is.read_string()?;
                },
                48 => {
                    self.listening = is.read_bool()?;
                },
                58 => {
                    self.tls_cert_hex = is.read_string()?;
                },
                66 => {
                    self.admin_macaroon_hex = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ip);
        }
        if !self.port.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.port);
        }
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pubkey);
        }
        if !self.tls_cert.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.tls_cert);
        }
        if !self.admin_macaroon.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.admin_macaroon);
        }
        if self.listening != false {
            my_size += 1 + 1;
        }
        if !self.tls_cert_hex.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.tls_cert_hex);
        }
        if !self.admin_macaroon_hex.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.admin_macaroon_hex);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ip.is_empty() {
            os.write_string(1, &self.ip)?;
        }
        if !self.port.is_empty() {
            os.write_string(2, &self.port)?;
        }
        if !self.pubkey.is_empty() {
            os.write_string(3, &self.pubkey)?;
        }
        if !self.tls_cert.is_empty() {
            os.write_string(4, &self.tls_cert)?;
        }
        if !self.admin_macaroon.is_empty() {
            os.write_string(5, &self.admin_macaroon)?;
        }
        if self.listening != false {
            os.write_bool(6, self.listening)?;
        }
        if !self.tls_cert_hex.is_empty() {
            os.write_string(7, &self.tls_cert_hex)?;
        }
        if !self.admin_macaroon_hex.is_empty() {
            os.write_string(8, &self.admin_macaroon_hex)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LightningConfig {
        LightningConfig::new()
    }

    fn clear(&mut self) {
        self.ip.clear();
        self.port.clear();
        self.pubkey.clear();
        self.tls_cert.clear();
        self.admin_macaroon.clear();
        self.listening = false;
        self.tls_cert_hex.clear();
        self.admin_macaroon_hex.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LightningConfig {
        static instance: LightningConfig = LightningConfig {
            ip: ::std::string::String::new(),
            port: ::std::string::String::new(),
            pubkey: ::std::string::String::new(),
            tls_cert: ::std::string::String::new(),
            admin_macaroon: ::std::string::String::new(),
            listening: false,
            tls_cert_hex: ::std::string::String::new(),
            admin_macaroon_hex: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LightningConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LightningConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LightningConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightningConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to get the lightning config.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.GetLightningConfigRequest)
pub struct GetLightningConfigRequest {
    // special fields
    // @@protoc_insertion_point(special_field:configs.GetLightningConfigRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetLightningConfigRequest {
    fn default() -> &'a GetLightningConfigRequest {
        <GetLightningConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetLightningConfigRequest {
    pub fn new() -> GetLightningConfigRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetLightningConfigRequest>(
            "GetLightningConfigRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetLightningConfigRequest {
    const NAME: &'static str = "GetLightningConfigRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetLightningConfigRequest {
        GetLightningConfigRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetLightningConfigRequest {
        static instance: GetLightningConfigRequest = GetLightningConfigRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetLightningConfigRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetLightningConfigRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetLightningConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetLightningConfigRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the lightning config.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.GetLightningConfigResponse)
pub struct GetLightningConfigResponse {
    // message fields
    // @@protoc_insertion_point(field:configs.GetLightningConfigResponse.lightning_config)
    pub lightning_config: ::protobuf::MessageField<LightningConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:configs.GetLightningConfigResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetLightningConfigResponse {
    fn default() -> &'a GetLightningConfigResponse {
        <GetLightningConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetLightningConfigResponse {
    pub fn new() -> GetLightningConfigResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LightningConfig>(
            "lightning_config",
            |m: &GetLightningConfigResponse| { &m.lightning_config },
            |m: &mut GetLightningConfigResponse| { &mut m.lightning_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetLightningConfigResponse>(
            "GetLightningConfigResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetLightningConfigResponse {
    const NAME: &'static str = "GetLightningConfigResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lightning_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lightning_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.lightning_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetLightningConfigResponse {
        GetLightningConfigResponse::new()
    }

    fn clear(&mut self) {
        self.lightning_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetLightningConfigResponse {
        static instance: GetLightningConfigResponse = GetLightningConfigResponse {
            lightning_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetLightningConfigResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetLightningConfigResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetLightningConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetLightningConfigResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to save the lightning config.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.SaveLightningConfigRequest)
pub struct SaveLightningConfigRequest {
    // message fields
    // @@protoc_insertion_point(field:configs.SaveLightningConfigRequest.lightning_config)
    pub lightning_config: ::protobuf::MessageField<LightningConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:configs.SaveLightningConfigRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveLightningConfigRequest {
    fn default() -> &'a SaveLightningConfigRequest {
        <SaveLightningConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveLightningConfigRequest {
    pub fn new() -> SaveLightningConfigRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LightningConfig>(
            "lightning_config",
            |m: &SaveLightningConfigRequest| { &m.lightning_config },
            |m: &mut SaveLightningConfigRequest| { &mut m.lightning_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveLightningConfigRequest>(
            "SaveLightningConfigRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveLightningConfigRequest {
    const NAME: &'static str = "SaveLightningConfigRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lightning_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lightning_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.lightning_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveLightningConfigRequest {
        SaveLightningConfigRequest::new()
    }

    fn clear(&mut self) {
        self.lightning_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveLightningConfigRequest {
        static instance: SaveLightningConfigRequest = SaveLightningConfigRequest {
            lightning_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveLightningConfigRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveLightningConfigRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveLightningConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveLightningConfigRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the lightning save config results.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.SaveLightningConfigResponse)
pub struct SaveLightningConfigResponse {
    // special fields
    // @@protoc_insertion_point(special_field:configs.SaveLightningConfigResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveLightningConfigResponse {
    fn default() -> &'a SaveLightningConfigResponse {
        <SaveLightningConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveLightningConfigResponse {
    pub fn new() -> SaveLightningConfigResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveLightningConfigResponse>(
            "SaveLightningConfigResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveLightningConfigResponse {
    const NAME: &'static str = "SaveLightningConfigResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveLightningConfigResponse {
        SaveLightningConfigResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveLightningConfigResponse {
        static instance: SaveLightningConfigResponse = SaveLightningConfigResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveLightningConfigResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveLightningConfigResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveLightningConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveLightningConfigResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.IONConfig)
pub struct IONConfig {
    // message fields
    // @@protoc_insertion_point(field:configs.IONConfig.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:configs.IONConfig.active)
    pub active: bool,
    // special fields
    // @@protoc_insertion_point(special_field:configs.IONConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IONConfig {
    fn default() -> &'a IONConfig {
        <IONConfig as ::protobuf::Message>::default_instance()
    }
}

impl IONConfig {
    pub fn new() -> IONConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &IONConfig| { &m.url },
            |m: &mut IONConfig| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "active",
            |m: &IONConfig| { &m.active },
            |m: &mut IONConfig| { &mut m.active },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IONConfig>(
            "IONConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IONConfig {
    const NAME: &'static str = "IONConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                16 => {
                    self.active = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if self.active != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if self.active != false {
            os.write_bool(2, self.active)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IONConfig {
        IONConfig::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.active = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IONConfig {
        static instance: IONConfig = IONConfig {
            url: ::std::string::String::new(),
            active: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IONConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IONConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IONConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IONConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to get the ion config.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.GetIONConfigRequest)
pub struct GetIONConfigRequest {
    // special fields
    // @@protoc_insertion_point(special_field:configs.GetIONConfigRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIONConfigRequest {
    fn default() -> &'a GetIONConfigRequest {
        <GetIONConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIONConfigRequest {
    pub fn new() -> GetIONConfigRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIONConfigRequest>(
            "GetIONConfigRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIONConfigRequest {
    const NAME: &'static str = "GetIONConfigRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIONConfigRequest {
        GetIONConfigRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIONConfigRequest {
        static instance: GetIONConfigRequest = GetIONConfigRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIONConfigRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIONConfigRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIONConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIONConfigRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the ion config.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.GetIONConfigResponse)
pub struct GetIONConfigResponse {
    // message fields
    // @@protoc_insertion_point(field:configs.GetIONConfigResponse.ion_config)
    pub ion_config: ::protobuf::MessageField<IONConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:configs.GetIONConfigResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIONConfigResponse {
    fn default() -> &'a GetIONConfigResponse {
        <GetIONConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIONConfigResponse {
    pub fn new() -> GetIONConfigResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, IONConfig>(
            "ion_config",
            |m: &GetIONConfigResponse| { &m.ion_config },
            |m: &mut GetIONConfigResponse| { &mut m.ion_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIONConfigResponse>(
            "GetIONConfigResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIONConfigResponse {
    const NAME: &'static str = "GetIONConfigResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ion_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ion_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ion_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIONConfigResponse {
        GetIONConfigResponse::new()
    }

    fn clear(&mut self) {
        self.ion_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIONConfigResponse {
        static instance: GetIONConfigResponse = GetIONConfigResponse {
            ion_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIONConfigResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIONConfigResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIONConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIONConfigResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a request to save the ion config.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.SaveIONConfigRequest)
pub struct SaveIONConfigRequest {
    // message fields
    // @@protoc_insertion_point(field:configs.SaveIONConfigRequest.ion_config)
    pub ion_config: ::protobuf::MessageField<IONConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:configs.SaveIONConfigRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveIONConfigRequest {
    fn default() -> &'a SaveIONConfigRequest {
        <SaveIONConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveIONConfigRequest {
    pub fn new() -> SaveIONConfigRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, IONConfig>(
            "ion_config",
            |m: &SaveIONConfigRequest| { &m.ion_config },
            |m: &mut SaveIONConfigRequest| { &mut m.ion_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveIONConfigRequest>(
            "SaveIONConfigRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveIONConfigRequest {
    const NAME: &'static str = "SaveIONConfigRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ion_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ion_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ion_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveIONConfigRequest {
        SaveIONConfigRequest::new()
    }

    fn clear(&mut self) {
        self.ion_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveIONConfigRequest {
        static instance: SaveIONConfigRequest = SaveIONConfigRequest {
            ion_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveIONConfigRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveIONConfigRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveIONConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveIONConfigRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Represents a response containing the ion save config results.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:configs.SaveIONConfigResponse)
pub struct SaveIONConfigResponse {
    // special fields
    // @@protoc_insertion_point(special_field:configs.SaveIONConfigResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveIONConfigResponse {
    fn default() -> &'a SaveIONConfigResponse {
        <SaveIONConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveIONConfigResponse {
    pub fn new() -> SaveIONConfigResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveIONConfigResponse>(
            "SaveIONConfigResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveIONConfigResponse {
    const NAME: &'static str = "SaveIONConfigResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveIONConfigResponse {
        SaveIONConfigResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveIONConfigResponse {
        static instance: SaveIONConfigResponse = SaveIONConfigResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveIONConfigResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveIONConfigResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveIONConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveIONConfigResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!proto/imp/api/config/config.proto\x12\x07configs\x1a\x1cgoogle/api/an\
    notations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xfd\
    \x01\n\x0fLightningConfig\x12\x0e\n\x02ip\x18\x01\x20\x01(\tR\x02ip\x12\
    \x12\n\x04port\x18\x02\x20\x01(\tR\x04port\x12\x16\n\x06pubkey\x18\x03\
    \x20\x01(\tR\x06pubkey\x12\x19\n\x08tls_cert\x18\x04\x20\x01(\tR\x07tlsC\
    ert\x12%\n\x0eadmin_macaroon\x18\x05\x20\x01(\tR\radminMacaroon\x12\x1c\
    \n\tlistening\x18\x06\x20\x01(\x08R\tlistening\x12\x20\n\x0ctls_cert_hex\
    \x18\x07\x20\x01(\tR\ntlsCertHex\x12,\n\x12admin_macaroon_hex\x18\x08\
    \x20\x01(\tR\x10adminMacaroonHex\"\x1b\n\x19GetLightningConfigRequest\"a\
    \n\x1aGetLightningConfigResponse\x12C\n\x10lightning_config\x18\x01\x20\
    \x01(\x0b2\x18.configs.LightningConfigR\x0flightningConfig\"a\n\x1aSaveL\
    ightningConfigRequest\x12C\n\x10lightning_config\x18\x01\x20\x01(\x0b2\
    \x18.configs.LightningConfigR\x0flightningConfig\"\x1d\n\x1bSaveLightnin\
    gConfigResponse\"5\n\tIONConfig\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03\
    url\x12\x16\n\x06active\x18\x02\x20\x01(\x08R\x06active\"\x15\n\x13GetIO\
    NConfigRequest\"I\n\x14GetIONConfigResponse\x121\n\nion_config\x18\x01\
    \x20\x01(\x0b2\x12.configs.IONConfigR\tionConfig\"I\n\x14SaveIONConfigRe\
    quest\x121\n\nion_config\x18\x01\x20\x01(\x0b2\x12.configs.IONConfigR\ti\
    onConfig\"\x17\n\x15SaveIONConfigResponse2\xd9\x03\n\x06Config\x12{\n\
    \x12GetLightningConfig\x12\".configs.GetLightningConfigRequest\x1a#.conf\
    igs.GetLightningConfigResponse\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/v1/\
    config/lightning\x12\x81\x01\n\x13SaveLightningConfig\x12#.configs.SaveL\
    ightningConfigRequest\x1a$.configs.SaveLightningConfigResponse\"\x1f\x82\
    \xd3\xe4\x93\x02\x19\"\x14/v1/config/lightning:\x01*\x12c\n\x0cGetIONCon\
    fig\x12\x1c.configs.GetIONConfigRequest\x1a\x1d.configs.GetIONConfigResp\
    onse\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/v1/config/ion\x12i\n\rSaveION\
    Config\x12\x1d.configs.SaveIONConfigRequest\x1a\x1e.configs.SaveIONConfi\
    gResponse\"\x19\x82\xd3\xe4\x93\x02\x13\"\x0e/v1/config/ion:\x01*B\xbb\
    \x02Z&github.com/imperviousai/imp-daemon/gen\x92A\x8f\x02\x12>\n\x0fConf\
    ig\x20Services\"&\n\rImpervious\x20AI\x12\x15https://impervious.ai2\x031\
    .0*\x03\x01\x02\x042\x10application/json:\x10application/jsonZa\n_\n\x07\
    api_key\x12T\x08\x02\x125An\x20API\x20key\x20generated\x20by\x20the\x20d\
    aemon\x20for\x20authentication\x1a\x17Grpc-Metadata-X-API-KEY\x20\x03b\r\
    \n\x0b\n\x07api_key\x12\0r2\n\x14Documentation\x20on\x20IMP\x12\x1ahttps\
    ://docs.impervious.aiJ\xe2\x15\n\x07\x12\x05\x01\0\x9c\x01\x01\n;\n\x01\
    \x0c\x12\x03\x01\0\x12\x1a1/\x20Allows\x20for\x20Config\x20actions\x20fo\
    r\x20Impervious\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\0\x10\n\x08\n\x01\
    \x08\x12\x03\x05\0=\n\t\n\x02\x08\x0b\x12\x03\x05\0=\n\t\n\x02\x03\0\x12\
    \x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x01\x08\x12\x04\n\0,\
    \x02\n\x0b\n\x03\x08\x92\x08\x12\x04\n\0,\x02\nN\n\x02\x06\0\x12\x041\0W\
    \x01\x1aB*\n\x20Config\x20service\x20allows\x20Config\x20actions\x20from\
    \x20the\x20Impervious\x20node.\n\n\n\n\x03\x06\0\x01\x12\x031\x08\x0e\nO\
    \n\x04\x06\0\x02\0\x12\x045\x089\t\x1aA*\n\x20GetLightningConfig\x20gets\
    \x20the\x20lightning\x20configs\x20for\x20the\x20daemon.\n\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x035\x0c\x1e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x035\
    \x1f8\n\x0c\n\x05\x06\0\x02\0\x03\x12\x035C]\n\r\n\x05\x06\0\x02\0\x04\
    \x12\x046\x108\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x046\x108\
    \x12\nW\n\x04\x06\0\x02\x01\x12\x04>\x08C\t\x1aI*\n\x20SaveLightningConf\
    ig\x20save\x20the\x20lightning\x20config\x20and\x20restart\x20the\x20dae\
    mon.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03>\x0c\x1f\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03>\x20:\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03>E`\n\r\
    \n\x05\x06\0\x02\x01\x04\x12\x04?\x10B\x12\n\x11\n\t\x06\0\x02\x01\x04\
    \xb0\xca\xbc\"\x12\x04?\x10B\x12\nC\n\x04\x06\0\x02\x02\x12\x04H\x08L\t\
    \x1a5*\n\x20GetIONConfig\x20gets\x20the\x20ion\x20configs\x20for\x20the\
    \x20daemon.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03H\x0c\x18\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03H\x19,\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03H7\
    K\n\r\n\x05\x06\0\x02\x02\x04\x12\x04I\x10K\x12\n\x11\n\t\x06\0\x02\x02\
    \x04\xb0\xca\xbc\"\x12\x04I\x10K\x12\nP\n\x04\x06\0\x02\x03\x12\x04Q\x08\
    V\t\x1aB*\n\x20SaveIONConfig\x20will\x20save\x20the\x20ion\x20config\x20\
    and\x20restart\x20the\x20daemon.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    Q\x0c\x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03Q\x1a.\n\x0c\n\x05\x06\0\
    \x02\x03\x03\x12\x03Q9N\n\r\n\x05\x06\0\x02\x03\x04\x12\x04R\x10U\x12\n\
    \x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04R\x10U\x12\n\n\n\x02\x04\
    \0\x12\x04Z\0c\x01\n\n\n\x03\x04\0\x01\x12\x03Z\x08\x17\n'\n\x04\x04\0\
    \x02\0\x12\x03[\x08\x16\"\x1a\x20the\x20lightning\x20IP\x20address\n\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03[\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03[\x0f\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03[\x14\x15\n$\n\x04\
    \x04\0\x02\x01\x12\x03\\\x08\x18\"\x17\x20the\x20lightning\x20IP\x20port\
    \n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\\\x08\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\\\x0f\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\\\x16\
    \x17\n#\n\x04\x04\0\x02\x02\x12\x03]\x08\x1a\"\x16\x20the\x20lightning\
    \x20pubkey\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03]\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03]\x0f\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03]\x18\x19\n%\n\x04\x04\0\x02\x03\x12\x03^\x08\x1c\"\x18\x20the\x20li\
    ghtning\x20tls\x20cert\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03^\x08\x0e\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03^\x0f\x17\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03^\x1a\x1b\n0\n\x04\x04\0\x02\x04\x12\x03_\x08\"\"#\x20th\
    e\x20lightning\x20admin\x20macaroon\x20file\n\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03_\x08\x0e\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03_\x0f\x1d\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03_\x20!\n0\n\x04\x04\0\x02\x05\x12\
    \x03`\x08\x1b\"#\x20the\x20lightning\x20admin\x20macaroon\x20file\n\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03`\x08\x0c\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x03`\r\x16\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03`\x19\x1a\n9\n\
    \x04\x04\0\x02\x06\x12\x03a\x08\x20\",\x20the\x20lightning\x20tls\x20cer\
    t\x20hex\x20instead\x20of\x20file\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\
    \x03a\x08\x0e\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03a\x0f\x1b\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03a\x1e\x1f\n?\n\x04\x04\0\x02\x07\x12\x03b\x08&\
    \"2\x20the\x20lightning\x20admin\x20macaroon\x20hex\x20instead\x20of\x20\
    file\n\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03b\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x07\x01\x12\x03b\x0f!\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03b$%\nA\n\
    \x02\x04\x01\x12\x04h\0i\x01\x1a5*\n\x20Represents\x20a\x20request\x20to\
    \x20get\x20the\x20lightning\x20config.\n\n\n\n\x03\x04\x01\x01\x12\x03h\
    \x08!\nF\n\x02\x04\x02\x12\x04n\0p\x01\x1a:*\n\x20Represents\x20a\x20res\
    ponse\x20containing\x20the\x20lightning\x20config.\n\n\n\n\x03\x04\x02\
    \x01\x12\x03n\x08\"\n#\n\x04\x04\x02\x02\0\x12\x03o\x08-\"\x16\x20The\
    \x20lightning\x20config\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03o\x08\x17\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03o\x18(\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03o+,\nB\n\x02\x04\x03\x12\x04u\0w\x01\x1a6*\n\x20Represents\
    \x20a\x20request\x20to\x20save\x20the\x20lightning\x20config.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03u\x08\"\n#\n\x04\x04\x03\x02\0\x12\x03v\x08-\"\
    \x16\x20The\x20lightning\x20config\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\
    \x03v\x08\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03v\x18(\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03v+,\nS\n\x02\x04\x04\x12\x04|\0}\x01\x1aG*\n\
    \x20Represents\x20a\x20response\x20containing\x20the\x20lightning\x20sav\
    e\x20config\x20results.\n\n\n\n\x03\x04\x04\x01\x12\x03|\x08#\n\x0b\n\
    \x02\x04\x05\x12\x05\x7f\0\x82\x01\x01\n\n\n\x03\x04\x05\x01\x12\x03\x7f\
    \x08\x11\n(\n\x04\x04\x05\x02\0\x12\x04\x80\x01\x08\x17\"\x1a\x20the\x20\
    lightning\x20IP\x20address\n\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x80\x01\
    \x08\x0e\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x80\x01\x0f\x12\n\r\n\x05\
    \x04\x05\x02\0\x03\x12\x04\x80\x01\x15\x16\n,\n\x04\x04\x05\x02\x01\x12\
    \x04\x81\x01\x08\x18\"\x1e\x20the\x20lightning\x20admin\x20macaroon\n\n\
    \r\n\x05\x04\x05\x02\x01\x05\x12\x04\x81\x01\x08\x0c\n\r\n\x05\x04\x05\
    \x02\x01\x01\x12\x04\x81\x01\r\x13\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\
    \x81\x01\x16\x17\n=\n\x02\x04\x06\x12\x06\x87\x01\0\x88\x01\x01\x1a/*\n\
    \x20Represents\x20a\x20request\x20to\x20get\x20the\x20ion\x20config.\n\n\
    \x0b\n\x03\x04\x06\x01\x12\x04\x87\x01\x08\x1b\nB\n\x02\x04\x07\x12\x06\
    \x8d\x01\0\x8f\x01\x01\x1a4*\n\x20Represents\x20a\x20response\x20contain\
    ing\x20the\x20ion\x20config.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x8d\x01\
    \x08\x1c\n\x1e\n\x04\x04\x07\x02\0\x12\x04\x8e\x01\x08!\"\x10\x20The\x20\
    ion\x20config\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\x8e\x01\x08\x11\n\r\
    \n\x05\x04\x07\x02\0\x01\x12\x04\x8e\x01\x12\x1c\n\r\n\x05\x04\x07\x02\0\
    \x03\x12\x04\x8e\x01\x1f\x20\n>\n\x02\x04\x08\x12\x06\x94\x01\0\x96\x01\
    \x01\x1a0*\n\x20Represents\x20a\x20request\x20to\x20save\x20the\x20ion\
    \x20config.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x94\x01\x08\x1c\n\x1e\n\
    \x04\x04\x08\x02\0\x12\x04\x95\x01\x08!\"\x10\x20The\x20ion\x20config\n\
    \n\r\n\x05\x04\x08\x02\0\x06\x12\x04\x95\x01\x08\x11\n\r\n\x05\x04\x08\
    \x02\0\x01\x12\x04\x95\x01\x12\x1c\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\
    \x95\x01\x1f\x20\nO\n\x02\x04\t\x12\x06\x9b\x01\0\x9c\x01\x01\x1aA*\n\
    \x20Represents\x20a\x20response\x20containing\x20the\x20ion\x20save\x20c\
    onfig\x20results.\n\n\x0b\n\x03\x04\t\x01\x12\x04\x9b\x01\x08\x1db\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(LightningConfig::generated_message_descriptor_data());
            messages.push(GetLightningConfigRequest::generated_message_descriptor_data());
            messages.push(GetLightningConfigResponse::generated_message_descriptor_data());
            messages.push(SaveLightningConfigRequest::generated_message_descriptor_data());
            messages.push(SaveLightningConfigResponse::generated_message_descriptor_data());
            messages.push(IONConfig::generated_message_descriptor_data());
            messages.push(GetIONConfigRequest::generated_message_descriptor_data());
            messages.push(GetIONConfigResponse::generated_message_descriptor_data());
            messages.push(SaveIONConfigRequest::generated_message_descriptor_data());
            messages.push(SaveIONConfigResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
