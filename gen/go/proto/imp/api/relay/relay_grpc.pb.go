// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayClient interface {
	//*
	// RequestRelay requests a relay to a specific node.
	RequestRelay(ctx context.Context, in *RequestRelayRequest, opts ...grpc.CallOption) (*RequestRelayResponse, error)
	//*
	// RequestMailbox requests a relay to send over stored mailbox messages.
	RequestMailbox(ctx context.Context, in *RequestMailboxRequest, opts ...grpc.CallOption) (*RequestMailboxResponse, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) RequestRelay(ctx context.Context, in *RequestRelayRequest, opts ...grpc.CallOption) (*RequestRelayResponse, error) {
	out := new(RequestRelayResponse)
	err := c.cc.Invoke(ctx, "/relay.Relay/RequestRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) RequestMailbox(ctx context.Context, in *RequestMailboxRequest, opts ...grpc.CallOption) (*RequestMailboxResponse, error) {
	out := new(RequestMailboxResponse)
	err := c.cc.Invoke(ctx, "/relay.Relay/RequestMailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServer is the server API for Relay service.
// All implementations must embed UnimplementedRelayServer
// for forward compatibility
type RelayServer interface {
	//*
	// RequestRelay requests a relay to a specific node.
	RequestRelay(context.Context, *RequestRelayRequest) (*RequestRelayResponse, error)
	//*
	// RequestMailbox requests a relay to send over stored mailbox messages.
	RequestMailbox(context.Context, *RequestMailboxRequest) (*RequestMailboxResponse, error)
	mustEmbedUnimplementedRelayServer()
}

// UnimplementedRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (UnimplementedRelayServer) RequestRelay(context.Context, *RequestRelayRequest) (*RequestRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRelay not implemented")
}
func (UnimplementedRelayServer) RequestMailbox(context.Context, *RequestMailboxRequest) (*RequestMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMailbox not implemented")
}
func (UnimplementedRelayServer) mustEmbedUnimplementedRelayServer() {}

// UnsafeRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServer will
// result in compilation errors.
type UnsafeRelayServer interface {
	mustEmbedUnimplementedRelayServer()
}

func RegisterRelayServer(s grpc.ServiceRegistrar, srv RelayServer) {
	s.RegisterService(&Relay_ServiceDesc, srv)
}

func _Relay_RequestRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).RequestRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.Relay/RequestRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).RequestRelay(ctx, req.(*RequestRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_RequestMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).RequestMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.Relay/RequestMailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).RequestMailbox(ctx, req.(*RequestMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relay_ServiceDesc is the grpc.ServiceDesc for Relay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRelay",
			Handler:    _Relay_RequestRelay_Handler,
		},
		{
			MethodName: "RequestMailbox",
			Handler:    _Relay_RequestMailbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imp/api/relay/relay.proto",
}
