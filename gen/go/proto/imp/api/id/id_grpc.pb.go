// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/imp/api/id/id.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDClient is the client API for ID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDClient interface {
	// *
	// ResolveDID resolves a DID URI and returns a DID document representing the identity.
	ResolveDID(ctx context.Context, in *ResolveDIDRequest, opts ...grpc.CallOption) (*ResolveDIDResponse, error)
	// *
	// ListDID lists all of the DIDs stored locally.
	ListDID(ctx context.Context, in *ListDIDRequest, opts ...grpc.CallOption) (*ListDIDResponse, error)
	// *
	// CreateDID creates a DID for the user with the given information.
	CreateDID(ctx context.Context, in *CreateDIDRequest, opts ...grpc.CallOption) (*CreateDIDResponse, error)
	// *
	// ImportDID imports a DID document which belongs to the user.
	ImportDID(ctx context.Context, in *ImportDIDRequest, opts ...grpc.CallOption) (*ImportDIDResponse, error)
	// *
	// UpdateDID updates a DID document with a patch document.
	UpdateDID(ctx context.Context, in *UpdateDIDRequest, opts ...grpc.CallOption) (*UpdateDIDResponse, error)
	// *
	// DeleteDID will delete a specific did.
	DeleteDID(ctx context.Context, in *DeleteDIDRequest, opts ...grpc.CallOption) (*DeleteDIDResponse, error)
	BackupDID(ctx context.Context, in *BackupDIDRequest, opts ...grpc.CallOption) (*BackupDIDResponse, error)
	RecoverDID(ctx context.Context, in *RecoverDIDRequest, opts ...grpc.CallOption) (*RecoverDIDResponse, error)
}

type iDClient struct {
	cc grpc.ClientConnInterface
}

func NewIDClient(cc grpc.ClientConnInterface) IDClient {
	return &iDClient{cc}
}

func (c *iDClient) ResolveDID(ctx context.Context, in *ResolveDIDRequest, opts ...grpc.CallOption) (*ResolveDIDResponse, error) {
	out := new(ResolveDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/ResolveDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) ListDID(ctx context.Context, in *ListDIDRequest, opts ...grpc.CallOption) (*ListDIDResponse, error) {
	out := new(ListDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/ListDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) CreateDID(ctx context.Context, in *CreateDIDRequest, opts ...grpc.CallOption) (*CreateDIDResponse, error) {
	out := new(CreateDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/CreateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) ImportDID(ctx context.Context, in *ImportDIDRequest, opts ...grpc.CallOption) (*ImportDIDResponse, error) {
	out := new(ImportDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/ImportDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) UpdateDID(ctx context.Context, in *UpdateDIDRequest, opts ...grpc.CallOption) (*UpdateDIDResponse, error) {
	out := new(UpdateDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/UpdateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) DeleteDID(ctx context.Context, in *DeleteDIDRequest, opts ...grpc.CallOption) (*DeleteDIDResponse, error) {
	out := new(DeleteDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/DeleteDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) BackupDID(ctx context.Context, in *BackupDIDRequest, opts ...grpc.CallOption) (*BackupDIDResponse, error) {
	out := new(BackupDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/BackupDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) RecoverDID(ctx context.Context, in *RecoverDIDRequest, opts ...grpc.CallOption) (*RecoverDIDResponse, error) {
	out := new(RecoverDIDResponse)
	err := c.cc.Invoke(ctx, "/id.ID/RecoverDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDServer is the server API for ID service.
// All implementations must embed UnimplementedIDServer
// for forward compatibility
type IDServer interface {
	// *
	// ResolveDID resolves a DID URI and returns a DID document representing the identity.
	ResolveDID(context.Context, *ResolveDIDRequest) (*ResolveDIDResponse, error)
	// *
	// ListDID lists all of the DIDs stored locally.
	ListDID(context.Context, *ListDIDRequest) (*ListDIDResponse, error)
	// *
	// CreateDID creates a DID for the user with the given information.
	CreateDID(context.Context, *CreateDIDRequest) (*CreateDIDResponse, error)
	// *
	// ImportDID imports a DID document which belongs to the user.
	ImportDID(context.Context, *ImportDIDRequest) (*ImportDIDResponse, error)
	// *
	// UpdateDID updates a DID document with a patch document.
	UpdateDID(context.Context, *UpdateDIDRequest) (*UpdateDIDResponse, error)
	// *
	// DeleteDID will delete a specific did.
	DeleteDID(context.Context, *DeleteDIDRequest) (*DeleteDIDResponse, error)
	BackupDID(context.Context, *BackupDIDRequest) (*BackupDIDResponse, error)
	RecoverDID(context.Context, *RecoverDIDRequest) (*RecoverDIDResponse, error)
	mustEmbedUnimplementedIDServer()
}

// UnimplementedIDServer must be embedded to have forward compatible implementations.
type UnimplementedIDServer struct {
}

func (UnimplementedIDServer) ResolveDID(context.Context, *ResolveDIDRequest) (*ResolveDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDID not implemented")
}
func (UnimplementedIDServer) ListDID(context.Context, *ListDIDRequest) (*ListDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDID not implemented")
}
func (UnimplementedIDServer) CreateDID(context.Context, *CreateDIDRequest) (*CreateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDID not implemented")
}
func (UnimplementedIDServer) ImportDID(context.Context, *ImportDIDRequest) (*ImportDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDID not implemented")
}
func (UnimplementedIDServer) UpdateDID(context.Context, *UpdateDIDRequest) (*UpdateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDID not implemented")
}
func (UnimplementedIDServer) DeleteDID(context.Context, *DeleteDIDRequest) (*DeleteDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDID not implemented")
}
func (UnimplementedIDServer) BackupDID(context.Context, *BackupDIDRequest) (*BackupDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupDID not implemented")
}
func (UnimplementedIDServer) RecoverDID(context.Context, *RecoverDIDRequest) (*RecoverDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverDID not implemented")
}
func (UnimplementedIDServer) mustEmbedUnimplementedIDServer() {}

// UnsafeIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDServer will
// result in compilation errors.
type UnsafeIDServer interface {
	mustEmbedUnimplementedIDServer()
}

func RegisterIDServer(s grpc.ServiceRegistrar, srv IDServer) {
	s.RegisterService(&ID_ServiceDesc, srv)
}

func _ID_ResolveDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).ResolveDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/ResolveDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).ResolveDID(ctx, req.(*ResolveDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_ListDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).ListDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/ListDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).ListDID(ctx, req.(*ListDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_CreateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).CreateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/CreateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).CreateDID(ctx, req.(*CreateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_ImportDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).ImportDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/ImportDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).ImportDID(ctx, req.(*ImportDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_UpdateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).UpdateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/UpdateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).UpdateDID(ctx, req.(*UpdateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_DeleteDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).DeleteDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/DeleteDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).DeleteDID(ctx, req.(*DeleteDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_BackupDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).BackupDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/BackupDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).BackupDID(ctx, req.(*BackupDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_RecoverDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).RecoverDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/RecoverDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).RecoverDID(ctx, req.(*RecoverDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ID_ServiceDesc is the grpc.ServiceDesc for ID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "id.ID",
	HandlerType: (*IDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveDID",
			Handler:    _ID_ResolveDID_Handler,
		},
		{
			MethodName: "ListDID",
			Handler:    _ID_ListDID_Handler,
		},
		{
			MethodName: "CreateDID",
			Handler:    _ID_CreateDID_Handler,
		},
		{
			MethodName: "ImportDID",
			Handler:    _ID_ImportDID_Handler,
		},
		{
			MethodName: "UpdateDID",
			Handler:    _ID_UpdateDID_Handler,
		},
		{
			MethodName: "DeleteDID",
			Handler:    _ID_DeleteDID_Handler,
		},
		{
			MethodName: "BackupDID",
			Handler:    _ID_BackupDID_Handler,
		},
		{
			MethodName: "RecoverDID",
			Handler:    _ID_RecoverDID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imp/api/id/id.proto",
}
