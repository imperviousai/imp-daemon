// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyClient is the client API for Key service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyClient interface {
	//*
	// InitSeed initializes the master seed for the daemon, and encrypts using the passphrase.
	InitSeed(ctx context.Context, in *InitSeedRequest, opts ...grpc.CallOption) (*InitSeedResponse, error)
	//*
	// UnlockSeed unlocks the master seed for the daemon, and decrypts using the passphrase.
	UnlockSeed(ctx context.Context, in *UnlockSeedRequest, opts ...grpc.CallOption) (*UnlockSeedResponse, error)
	//*
	// Status gives the status of the daemon db/key.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type keyClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyClient(cc grpc.ClientConnInterface) KeyClient {
	return &keyClient{cc}
}

func (c *keyClient) InitSeed(ctx context.Context, in *InitSeedRequest, opts ...grpc.CallOption) (*InitSeedResponse, error) {
	out := new(InitSeedResponse)
	err := c.cc.Invoke(ctx, "/key.Key/InitSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) UnlockSeed(ctx context.Context, in *UnlockSeedRequest, opts ...grpc.CallOption) (*UnlockSeedResponse, error) {
	out := new(UnlockSeedResponse)
	err := c.cc.Invoke(ctx, "/key.Key/UnlockSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/key.Key/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServer is the server API for Key service.
// All implementations must embed UnimplementedKeyServer
// for forward compatibility
type KeyServer interface {
	//*
	// InitSeed initializes the master seed for the daemon, and encrypts using the passphrase.
	InitSeed(context.Context, *InitSeedRequest) (*InitSeedResponse, error)
	//*
	// UnlockSeed unlocks the master seed for the daemon, and decrypts using the passphrase.
	UnlockSeed(context.Context, *UnlockSeedRequest) (*UnlockSeedResponse, error)
	//*
	// Status gives the status of the daemon db/key.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedKeyServer()
}

// UnimplementedKeyServer must be embedded to have forward compatible implementations.
type UnimplementedKeyServer struct {
}

func (UnimplementedKeyServer) InitSeed(context.Context, *InitSeedRequest) (*InitSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSeed not implemented")
}
func (UnimplementedKeyServer) UnlockSeed(context.Context, *UnlockSeedRequest) (*UnlockSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockSeed not implemented")
}
func (UnimplementedKeyServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedKeyServer) mustEmbedUnimplementedKeyServer() {}

// UnsafeKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServer will
// result in compilation errors.
type UnsafeKeyServer interface {
	mustEmbedUnimplementedKeyServer()
}

func RegisterKeyServer(s grpc.ServiceRegistrar, srv KeyServer) {
	s.RegisterService(&Key_ServiceDesc, srv)
}

func _Key_InitSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).InitSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.Key/InitSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).InitSeed(ctx, req.(*InitSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_UnlockSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).UnlockSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.Key/UnlockSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).UnlockSeed(ctx, req.(*UnlockSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.Key/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Key_ServiceDesc is the grpc.ServiceDesc for Key service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Key_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "key.Key",
	HandlerType: (*KeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitSeed",
			Handler:    _Key_InitSeed_Handler,
		},
		{
			MethodName: "UnlockSeed",
			Handler:    _Key_UnlockSeed_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Key_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imp/api/key/key.proto",
}
