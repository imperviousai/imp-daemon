/// Allows for Config actions for Impervious nodes

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: proto/imp/api/config/config.proto

package gen

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LightningConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip               string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                                                       // the lightning IP address
	Port             string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`                                                   // the lightning IP port
	Pubkey           string `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`                                               // the lightning pubkey
	TlsCert          string `protobuf:"bytes,4,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`                              // the lightning tls cert
	AdminMacaroon    string `protobuf:"bytes,5,opt,name=admin_macaroon,json=adminMacaroon,proto3" json:"admin_macaroon,omitempty"`            // the lightning admin macaroon file
	Listening        bool   `protobuf:"varint,6,opt,name=listening,proto3" json:"listening,omitempty"`                                        // the lightning admin macaroon file
	TlsCertHex       string `protobuf:"bytes,7,opt,name=tls_cert_hex,json=tlsCertHex,proto3" json:"tls_cert_hex,omitempty"`                   // the lightning tls cert hex instead of file
	AdminMacaroonHex string `protobuf:"bytes,8,opt,name=admin_macaroon_hex,json=adminMacaroonHex,proto3" json:"admin_macaroon_hex,omitempty"` // the lightning admin macaroon hex instead of file
}

func (x *LightningConfig) Reset() {
	*x = LightningConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightningConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightningConfig) ProtoMessage() {}

func (x *LightningConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightningConfig.ProtoReflect.Descriptor instead.
func (*LightningConfig) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *LightningConfig) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LightningConfig) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *LightningConfig) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *LightningConfig) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *LightningConfig) GetAdminMacaroon() string {
	if x != nil {
		return x.AdminMacaroon
	}
	return ""
}

func (x *LightningConfig) GetListening() bool {
	if x != nil {
		return x.Listening
	}
	return false
}

func (x *LightningConfig) GetTlsCertHex() string {
	if x != nil {
		return x.TlsCertHex
	}
	return ""
}

func (x *LightningConfig) GetAdminMacaroonHex() string {
	if x != nil {
		return x.AdminMacaroonHex
	}
	return ""
}

//*
// Represents a request to get the lightning config.
type GetLightningConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLightningConfigRequest) Reset() {
	*x = GetLightningConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLightningConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLightningConfigRequest) ProtoMessage() {}

func (x *GetLightningConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLightningConfigRequest.ProtoReflect.Descriptor instead.
func (*GetLightningConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{1}
}

//*
// Represents a response containing the lightning config.
type GetLightningConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LightningConfig *LightningConfig `protobuf:"bytes,1,opt,name=lightning_config,json=lightningConfig,proto3" json:"lightning_config,omitempty"` // The lightning config
}

func (x *GetLightningConfigResponse) Reset() {
	*x = GetLightningConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLightningConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLightningConfigResponse) ProtoMessage() {}

func (x *GetLightningConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLightningConfigResponse.ProtoReflect.Descriptor instead.
func (*GetLightningConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *GetLightningConfigResponse) GetLightningConfig() *LightningConfig {
	if x != nil {
		return x.LightningConfig
	}
	return nil
}

//*
// Represents a request to save the lightning config.
type SaveLightningConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LightningConfig *LightningConfig `protobuf:"bytes,1,opt,name=lightning_config,json=lightningConfig,proto3" json:"lightning_config,omitempty"` // The lightning config
}

func (x *SaveLightningConfigRequest) Reset() {
	*x = SaveLightningConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLightningConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLightningConfigRequest) ProtoMessage() {}

func (x *SaveLightningConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLightningConfigRequest.ProtoReflect.Descriptor instead.
func (*SaveLightningConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *SaveLightningConfigRequest) GetLightningConfig() *LightningConfig {
	if x != nil {
		return x.LightningConfig
	}
	return nil
}

//*
// Represents a response containing the lightning save config results.
type SaveLightningConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveLightningConfigResponse) Reset() {
	*x = SaveLightningConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLightningConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLightningConfigResponse) ProtoMessage() {}

func (x *SaveLightningConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLightningConfigResponse.ProtoReflect.Descriptor instead.
func (*SaveLightningConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{4}
}

type IONConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // the lightning IP address
	Active bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"` // the lightning admin macaroon
}

func (x *IONConfig) Reset() {
	*x = IONConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IONConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IONConfig) ProtoMessage() {}

func (x *IONConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IONConfig.ProtoReflect.Descriptor instead.
func (*IONConfig) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *IONConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IONConfig) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

//*
// Represents a request to get the ion config.
type GetIONConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIONConfigRequest) Reset() {
	*x = GetIONConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIONConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIONConfigRequest) ProtoMessage() {}

func (x *GetIONConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIONConfigRequest.ProtoReflect.Descriptor instead.
func (*GetIONConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{6}
}

//*
// Represents a response containing the ion config.
type GetIONConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IonConfig *IONConfig `protobuf:"bytes,1,opt,name=ion_config,json=ionConfig,proto3" json:"ion_config,omitempty"` // The ion config
}

func (x *GetIONConfigResponse) Reset() {
	*x = GetIONConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIONConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIONConfigResponse) ProtoMessage() {}

func (x *GetIONConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIONConfigResponse.ProtoReflect.Descriptor instead.
func (*GetIONConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *GetIONConfigResponse) GetIonConfig() *IONConfig {
	if x != nil {
		return x.IonConfig
	}
	return nil
}

//*
// Represents a request to save the ion config.
type SaveIONConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IonConfig *IONConfig `protobuf:"bytes,1,opt,name=ion_config,json=ionConfig,proto3" json:"ion_config,omitempty"` // The ion config
}

func (x *SaveIONConfigRequest) Reset() {
	*x = SaveIONConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveIONConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveIONConfigRequest) ProtoMessage() {}

func (x *SaveIONConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveIONConfigRequest.ProtoReflect.Descriptor instead.
func (*SaveIONConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *SaveIONConfigRequest) GetIonConfig() *IONConfig {
	if x != nil {
		return x.IonConfig
	}
	return nil
}

//*
// Represents a response containing the ion save config results.
type SaveIONConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveIONConfigResponse) Reset() {
	*x = SaveIONConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveIONConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveIONConfigResponse) ProtoMessage() {}

func (x *SaveIONConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveIONConfigResponse.ProtoReflect.Descriptor instead.
func (*SaveIONConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_config_config_proto_rawDescGZIP(), []int{9}
}

var File_proto_imp_api_config_config_proto protoreflect.FileDescriptor

var file_proto_imp_api_config_config_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x61, 0x72, 0x6f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x61, 0x72, 0x6f, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x48, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x61, 0x72, 0x6f, 0x6f, 0x6e, 0x5f, 0x68,
	0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d,
	0x61, 0x63, 0x61, 0x72, 0x6f, 0x6f, 0x6e, 0x48, 0x65, 0x78, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x61, 0x0a, 0x1a, 0x53, 0x61,
	0x76, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1d, 0x0a,
	0x1b, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x09,
	0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x49, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x49, 0x4f, 0x4e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x0a, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x49, 0x4f, 0x4e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x17, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd9, 0x03, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x4f, 0x4e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0d, 0x53, 0x61,
	0x76, 0x65, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x49, 0x4f, 0x4e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x42, 0xb8, 0x02, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x61,
	0x69, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x69, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x92, 0x41, 0x8f,
	0x02, 0x12, 0x3e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x20, 0x41, 0x49, 0x12, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x69,
	0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x2e, 0x61, 0x69, 0x32, 0x03, 0x31, 0x2e,
	0x30, 0x2a, 0x03, 0x01, 0x02, 0x04, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x61, 0x0a, 0x5f, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x08, 0x02, 0x12, 0x35, 0x41, 0x6e, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x17, 0x47, 0x72, 0x70, 0x63, 0x2d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x58, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x45, 0x59, 0x20, 0x03, 0x62, 0x0d, 0x0a,
	0x0b, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x00, 0x72, 0x32, 0x0a, 0x14,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e,
	0x20, 0x49, 0x4d, 0x50, 0x12, 0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x2e, 0x61, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_imp_api_config_config_proto_rawDescOnce sync.Once
	file_proto_imp_api_config_config_proto_rawDescData = file_proto_imp_api_config_config_proto_rawDesc
)

func file_proto_imp_api_config_config_proto_rawDescGZIP() []byte {
	file_proto_imp_api_config_config_proto_rawDescOnce.Do(func() {
		file_proto_imp_api_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_imp_api_config_config_proto_rawDescData)
	})
	return file_proto_imp_api_config_config_proto_rawDescData
}

var file_proto_imp_api_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_imp_api_config_config_proto_goTypes = []interface{}{
	(*LightningConfig)(nil),             // 0: configs.LightningConfig
	(*GetLightningConfigRequest)(nil),   // 1: configs.GetLightningConfigRequest
	(*GetLightningConfigResponse)(nil),  // 2: configs.GetLightningConfigResponse
	(*SaveLightningConfigRequest)(nil),  // 3: configs.SaveLightningConfigRequest
	(*SaveLightningConfigResponse)(nil), // 4: configs.SaveLightningConfigResponse
	(*IONConfig)(nil),                   // 5: configs.IONConfig
	(*GetIONConfigRequest)(nil),         // 6: configs.GetIONConfigRequest
	(*GetIONConfigResponse)(nil),        // 7: configs.GetIONConfigResponse
	(*SaveIONConfigRequest)(nil),        // 8: configs.SaveIONConfigRequest
	(*SaveIONConfigResponse)(nil),       // 9: configs.SaveIONConfigResponse
}
var file_proto_imp_api_config_config_proto_depIdxs = []int32{
	0, // 0: configs.GetLightningConfigResponse.lightning_config:type_name -> configs.LightningConfig
	0, // 1: configs.SaveLightningConfigRequest.lightning_config:type_name -> configs.LightningConfig
	5, // 2: configs.GetIONConfigResponse.ion_config:type_name -> configs.IONConfig
	5, // 3: configs.SaveIONConfigRequest.ion_config:type_name -> configs.IONConfig
	1, // 4: configs.Config.GetLightningConfig:input_type -> configs.GetLightningConfigRequest
	3, // 5: configs.Config.SaveLightningConfig:input_type -> configs.SaveLightningConfigRequest
	6, // 6: configs.Config.GetIONConfig:input_type -> configs.GetIONConfigRequest
	8, // 7: configs.Config.SaveIONConfig:input_type -> configs.SaveIONConfigRequest
	2, // 8: configs.Config.GetLightningConfig:output_type -> configs.GetLightningConfigResponse
	4, // 9: configs.Config.SaveLightningConfig:output_type -> configs.SaveLightningConfigResponse
	7, // 10: configs.Config.GetIONConfig:output_type -> configs.GetIONConfigResponse
	9, // 11: configs.Config.SaveIONConfig:output_type -> configs.SaveIONConfigResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_imp_api_config_config_proto_init() }
func file_proto_imp_api_config_config_proto_init() {
	if File_proto_imp_api_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_imp_api_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightningConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLightningConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLightningConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLightningConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLightningConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IONConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIONConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIONConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveIONConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveIONConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_imp_api_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_imp_api_config_config_proto_goTypes,
		DependencyIndexes: file_proto_imp_api_config_config_proto_depIdxs,
		MessageInfos:      file_proto_imp_api_config_config_proto_msgTypes,
	}.Build()
	File_proto_imp_api_config_config_proto = out.File
	file_proto_imp_api_config_config_proto_rawDesc = nil
	file_proto_imp_api_config_config_proto_goTypes = nil
	file_proto_imp_api_config_config_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	//*
	// GetLightningConfig gets the lightning configs for the daemon.
	GetLightningConfig(ctx context.Context, in *GetLightningConfigRequest, opts ...grpc.CallOption) (*GetLightningConfigResponse, error)
	//*
	// SaveLightningConfig save the lightning config and restart the daemon.
	SaveLightningConfig(ctx context.Context, in *SaveLightningConfigRequest, opts ...grpc.CallOption) (*SaveLightningConfigResponse, error)
	//*
	// GetIONConfig gets the ion configs for the daemon.
	GetIONConfig(ctx context.Context, in *GetIONConfigRequest, opts ...grpc.CallOption) (*GetIONConfigResponse, error)
	//*
	// SaveIONConfig will save the ion config and restart the daemon.
	SaveIONConfig(ctx context.Context, in *SaveIONConfigRequest, opts ...grpc.CallOption) (*SaveIONConfigResponse, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetLightningConfig(ctx context.Context, in *GetLightningConfigRequest, opts ...grpc.CallOption) (*GetLightningConfigResponse, error) {
	out := new(GetLightningConfigResponse)
	err := c.cc.Invoke(ctx, "/configs.Config/GetLightningConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SaveLightningConfig(ctx context.Context, in *SaveLightningConfigRequest, opts ...grpc.CallOption) (*SaveLightningConfigResponse, error) {
	out := new(SaveLightningConfigResponse)
	err := c.cc.Invoke(ctx, "/configs.Config/SaveLightningConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetIONConfig(ctx context.Context, in *GetIONConfigRequest, opts ...grpc.CallOption) (*GetIONConfigResponse, error) {
	out := new(GetIONConfigResponse)
	err := c.cc.Invoke(ctx, "/configs.Config/GetIONConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SaveIONConfig(ctx context.Context, in *SaveIONConfigRequest, opts ...grpc.CallOption) (*SaveIONConfigResponse, error) {
	out := new(SaveIONConfigResponse)
	err := c.cc.Invoke(ctx, "/configs.Config/SaveIONConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	//*
	// GetLightningConfig gets the lightning configs for the daemon.
	GetLightningConfig(context.Context, *GetLightningConfigRequest) (*GetLightningConfigResponse, error)
	//*
	// SaveLightningConfig save the lightning config and restart the daemon.
	SaveLightningConfig(context.Context, *SaveLightningConfigRequest) (*SaveLightningConfigResponse, error)
	//*
	// GetIONConfig gets the ion configs for the daemon.
	GetIONConfig(context.Context, *GetIONConfigRequest) (*GetIONConfigResponse, error)
	//*
	// SaveIONConfig will save the ion config and restart the daemon.
	SaveIONConfig(context.Context, *SaveIONConfigRequest) (*SaveIONConfigResponse, error)
}

// UnimplementedConfigServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (*UnimplementedConfigServer) GetLightningConfig(context.Context, *GetLightningConfigRequest) (*GetLightningConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLightningConfig not implemented")
}
func (*UnimplementedConfigServer) SaveLightningConfig(context.Context, *SaveLightningConfigRequest) (*SaveLightningConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLightningConfig not implemented")
}
func (*UnimplementedConfigServer) GetIONConfig(context.Context, *GetIONConfigRequest) (*GetIONConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIONConfig not implemented")
}
func (*UnimplementedConfigServer) SaveIONConfig(context.Context, *SaveIONConfigRequest) (*SaveIONConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIONConfig not implemented")
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_GetLightningConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLightningConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetLightningConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/GetLightningConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetLightningConfig(ctx, req.(*GetLightningConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_SaveLightningConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLightningConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).SaveLightningConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/SaveLightningConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).SaveLightningConfig(ctx, req.(*SaveLightningConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetIONConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIONConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetIONConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/GetIONConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetIONConfig(ctx, req.(*GetIONConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_SaveIONConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveIONConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).SaveIONConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/SaveIONConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).SaveIONConfig(ctx, req.(*SaveIONConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configs.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLightningConfig",
			Handler:    _Config_GetLightningConfig_Handler,
		},
		{
			MethodName: "SaveLightningConfig",
			Handler:    _Config_SaveLightningConfig_Handler,
		},
		{
			MethodName: "GetIONConfig",
			Handler:    _Config_GetIONConfig_Handler,
		},
		{
			MethodName: "SaveIONConfig",
			Handler:    _Config_SaveIONConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imp/api/config/config.proto",
}
