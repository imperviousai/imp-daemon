// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/state (interfaces: DBManager)

// Package mock is a generated GoMock package.
package mock

import (
	"github.com/boltdb/bolt"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/imperviousai/imp-daemon/state"
)

// MockDBManager is a mock of DBManager interface.
type MockDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockDBManagerMockRecorder
}

func (m *MockDBManager) GetKey(key []byte) (string, error) {
	//TODO implement me
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (m *MockDBManager) SetKey(key []byte, value []byte) error {
	//TODO implement me
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey")
	ret0, _ := ret[0].(error)
	return ret0
}

func (m *MockDBManager) DelKey(key []byte) error {
	//TODO implement me
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelKey")
	ret0, _ := ret[0].(error)
	return ret0
}

func (m *MockDBManager) KVDB() *bolt.DB {
	//TODO implement me
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDB")
	ret0, _ := ret[0].(*bolt.DB)
	return ret0
}

// MockDBManagerMockRecorder is the mock recorder for MockDBManager.
type MockDBManagerMockRecorder struct {
	mock *MockDBManager
}

// NewMockDBManager creates a new mock instance.
func NewMockDBManager(ctrl *gomock.Controller) *MockDBManager {
	mock := &MockDBManager{ctrl: ctrl}
	mock.recorder = &MockDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBManager) EXPECT() *MockDBManagerMockRecorder {
	return m.recorder
}

// IsInitialized mocks base method.
func (m *MockDBManager) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockDBManagerMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockDBManager)(nil).IsInitialized))
}

// IsLocked mocks base method.
func (m *MockDBManager) IsLocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocked indicates an expected call of IsLocked.
func (mr *MockDBManagerMockRecorder) IsLocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocked", reflect.TypeOf((*MockDBManager)(nil).IsLocked))
}

// IsReady mocks base method.
func (m *MockDBManager) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockDBManagerMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockDBManager)(nil).IsReady))
}

// RegisterInitScript mocks base method.
func (m *MockDBManager) RegisterInitScript(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterInitScript", arg0)
}

// RegisterInitScript indicates an expected call of RegisterInitScript.
func (mr *MockDBManagerMockRecorder) RegisterInitScript(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInitScript", reflect.TypeOf((*MockDBManager)(nil).RegisterInitScript), arg0)
}

// SafeExec mocks base method.
func (m *MockDBManager) SafeExec(arg0 string, arg1 ...interface{}) (state.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SafeExec", varargs...)
	ret0, _ := ret[0].(state.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeExec indicates an expected call of SafeExec.
func (mr *MockDBManagerMockRecorder) SafeExec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeExec", reflect.TypeOf((*MockDBManager)(nil).SafeExec), varargs...)
}

// SafeQuery mocks base method.
func (m *MockDBManager) SafeQuery(arg0 string, arg1 ...interface{}) (state.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SafeQuery", varargs...)
	ret0, _ := ret[0].(state.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeQuery indicates an expected call of SafeQuery.
func (mr *MockDBManagerMockRecorder) SafeQuery(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeQuery", reflect.TypeOf((*MockDBManager)(nil).SafeQuery), varargs...)
}

// Type mocks base method.
func (m *MockDBManager) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDBManagerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDBManager)(nil).Type))
}

// Unlock mocks base method.
func (m *MockDBManager) Unlock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockDBManagerMockRecorder) Unlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockDBManager)(nil).Unlock), arg0)
}
