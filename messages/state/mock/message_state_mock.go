// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/messages/state (interfaces: MessagesState)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/imperviousai/freeimp/messages/state"
)

// MockMessagesState is a mock of MessagesState interface.
type MockMessagesState struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesStateMockRecorder
}

// MockMessagesStateMockRecorder is the mock recorder for MockMessagesState.
type MockMessagesStateMockRecorder struct {
	mock *MockMessagesState
}

// NewMockMessagesState creates a new mock instance.
func NewMockMessagesState(ctrl *gomock.Controller) *MockMessagesState {
	mock := &MockMessagesState{ctrl: ctrl}
	mock.recorder = &MockMessagesStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagesState) EXPECT() *MockMessagesStateMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessagesState) DeleteMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessagesStateMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessagesState)(nil).DeleteMessage), arg0)
}

// DeleteMessages mocks base method.
func (m *MockMessagesState) DeleteMessages(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessages", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessages indicates an expected call of DeleteMessages.
func (mr *MockMessagesStateMockRecorder) DeleteMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessages", reflect.TypeOf((*MockMessagesState)(nil).DeleteMessages), arg0)
}

// FindMessage mocks base method.
func (m *MockMessagesState) FindMessage(arg0 string) (*state.MessageState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMessage", arg0)
	ret0, _ := ret[0].(*state.MessageState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMessage indicates an expected call of FindMessage.
func (mr *MockMessagesStateMockRecorder) FindMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMessage", reflect.TypeOf((*MockMessagesState)(nil).FindMessage), arg0)
}

// ListMessages mocks base method.
func (m *MockMessagesState) ListMessages(arg0 *state.MessageState) ([]*state.MessageState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", arg0)
	ret0, _ := ret[0].([]*state.MessageState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockMessagesStateMockRecorder) ListMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockMessagesState)(nil).ListMessages), arg0)
}

// SaveMessage mocks base method.
func (m *MockMessagesState) SaveMessage(arg0 *state.MessageState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockMessagesStateMockRecorder) SaveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockMessagesState)(nil).SaveMessage), arg0)
}

// SaveMessageEvent mocks base method.
func (m *MockMessagesState) SaveMessageEvent(arg0 *state.MessageEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessageEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessageEvent indicates an expected call of SaveMessageEvent.
func (mr *MockMessagesStateMockRecorder) SaveMessageEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessageEvent", reflect.TypeOf((*MockMessagesState)(nil).SaveMessageEvent), arg0)
}
