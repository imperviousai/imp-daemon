// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/freeimp/messages (interfaces: MessageManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "github.com/imperviousai/freeimp/messages"
)

// MockMessageManager is a mock of MessageManager interface.
type MockMessageManager struct {
	ctrl     *gomock.Controller
	recorder *MockMessageManagerMockRecorder
}

// MockMessageManagerMockRecorder is the mock recorder for MockMessageManager.
type MockMessageManagerMockRecorder struct {
	mock *MockMessageManager
}

// NewMockMessageManager creates a new mock instance.
func NewMockMessageManager(ctrl *gomock.Controller) *MockMessageManager {
	mock := &MockMessageManager{ctrl: ctrl}
	mock.recorder = &MockMessageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageManager) EXPECT() *MockMessageManagerMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageManager) DeleteMessage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageManagerMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageManager)(nil).DeleteMessage), arg0, arg1)
}

// GetMessages mocks base method.
func (m *MockMessageManager) GetMessages() ([]*messages.MessageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].([]*messages.MessageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockMessageManagerMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessageManager)(nil).GetMessages))
}

// SaveMessage mocks base method.
func (m *MockMessageManager) SaveMessage(arg0 *messages.MessageInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockMessageManagerMockRecorder) SaveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockMessageManager)(nil).SaveMessage), arg0)
}

// SaveMessageEvent mocks base method.
func (m *MockMessageManager) SaveMessageEvent(arg0 *messages.MessageEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessageEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessageEvent indicates an expected call of SaveMessageEvent.
func (mr *MockMessageManagerMockRecorder) SaveMessageEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessageEvent", reflect.TypeOf((*MockMessageManager)(nil).SaveMessageEvent), arg0)
}
