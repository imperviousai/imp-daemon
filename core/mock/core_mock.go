// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imperviousai/imp-daemon/core (interfaces: Core)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	did "github.com/hyperledger/aries-framework-go/pkg/doc/did"
	state "github.com/imperviousai/imp-daemon/auth/state"
	comm "github.com/imperviousai/imp-daemon/comm"
	config "github.com/imperviousai/imp-daemon/config"
	contacts "github.com/imperviousai/imp-daemon/contacts"
	id "github.com/imperviousai/imp-daemon/id"
	lightning "github.com/imperviousai/imp-daemon/lightning"
	messages "github.com/imperviousai/imp-daemon/messages"
	relay "github.com/imperviousai/imp-daemon/service/relay"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockCore) AddFile(arg0 []byte, arg1 string, arg2 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockCoreMockRecorder) AddFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockCore)(nil).AddFile), arg0, arg1, arg2)
}

// BackupDID mocks base method.
func (m *MockCore) BackupDID(arg0 string) (*id.DIDUpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupDID", arg0)
	ret0, _ := ret[0].(*id.DIDUpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupDID indicates an expected call of BackupDID.
func (mr *MockCoreMockRecorder) BackupDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupDID", reflect.TypeOf((*MockCore)(nil).BackupDID), arg0)
}

// CheckInvoice mocks base method.
func (m *MockCore) CheckInvoice(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInvoice", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInvoice indicates an expected call of CheckInvoice.
func (mr *MockCoreMockRecorder) CheckInvoice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInvoice", reflect.TypeOf((*MockCore)(nil).CheckInvoice), arg0)
}

// CheckLightningStatus mocks base method.
func (m *MockCore) CheckLightningStatus() ([]lightning.NodeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLightningStatus")
	ret0, _ := ret[0].([]lightning.NodeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLightningStatus indicates an expected call of CheckLightningStatus.
func (mr *MockCoreMockRecorder) CheckLightningStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLightningStatus", reflect.TypeOf((*MockCore)(nil).CheckLightningStatus))
}

// CreateContact mocks base method.
func (m *MockCore) CreateContact(arg0 *contacts.ContactInfo) (*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0)
	ret0, _ := ret[0].(*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockCoreMockRecorder) CreateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockCore)(nil).CreateContact), arg0)
}

// CreateContacts mocks base method.
func (m *MockCore) CreateContacts(arg0 []*contacts.ContactInfo) ([]*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContacts", arg0)
	ret0, _ := ret[0].([]*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContacts indicates an expected call of CreateContacts.
func (mr *MockCoreMockRecorder) CreateContacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContacts", reflect.TypeOf((*MockCore)(nil).CreateContacts), arg0)
}

// CreateDID mocks base method.
func (m *MockCore) CreateDID(arg0 string, arg1 []id.Service) (*id.DIDUpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDID", arg0, arg1)
	ret0, _ := ret[0].(*id.DIDUpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDID indicates an expected call of CreateDID.
func (mr *MockCoreMockRecorder) CreateDID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDID", reflect.TypeOf((*MockCore)(nil).CreateDID), arg0, arg1)
}

// DeleteContact mocks base method.
func (m *MockCore) DeleteContact(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockCoreMockRecorder) DeleteContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockCore)(nil).DeleteContact), arg0)
}

// DeleteDID mocks base method.
func (m *MockCore) DeleteDID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDID indicates an expected call of DeleteDID.
func (mr *MockCoreMockRecorder) DeleteDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDID", reflect.TypeOf((*MockCore)(nil).DeleteDID), arg0)
}

// DeleteKey mocks base method.
func (m *MockCore) DeleteKey(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockCoreMockRecorder) DeleteKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockCore)(nil).DeleteKey), arg0)
}

// DeleteMessage mocks base method.
func (m *MockCore) DeleteMessage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockCoreMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockCore)(nil).DeleteMessage), arg0, arg1)
}

// GenerateInvoice mocks base method.
func (m *MockCore) GenerateInvoice(arg0 int64, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvoice", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateInvoice indicates an expected call of GenerateInvoice.
func (mr *MockCoreMockRecorder) GenerateInvoice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvoice", reflect.TypeOf((*MockCore)(nil).GenerateInvoice), arg0, arg1)
}

// GenerateNewKey mocks base method.
func (m *MockCore) GenerateNewKey(arg0, arg1 string) (*state.AuthStateModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewKey", arg0, arg1)
	ret0, _ := ret[0].(*state.AuthStateModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewKey indicates an expected call of GenerateNewKey.
func (mr *MockCoreMockRecorder) GenerateNewKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewKey", reflect.TypeOf((*MockCore)(nil).GenerateNewKey), arg0, arg1)
}

// GetContact mocks base method.
func (m *MockCore) GetContact(arg0 int64) (*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockCoreMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockCore)(nil).GetContact), arg0)
}

// GetContacts mocks base method.
func (m *MockCore) GetContacts() ([]*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts")
	ret0, _ := ret[0].([]*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockCoreMockRecorder) GetContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockCore)(nil).GetContacts))
}

// GetIONConfig mocks base method.
func (m *MockCore) GetIONConfig() (config.ION, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIONConfig")
	ret0, _ := ret[0].(config.ION)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIONConfig indicates an expected call of GetIONConfig.
func (mr *MockCoreMockRecorder) GetIONConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIONConfig", reflect.TypeOf((*MockCore)(nil).GetIONConfig))
}

// GetLightningNodeConfig mocks base method.
func (m *MockCore) GetLightningNodeConfig() (config.Lnd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightningNodeConfig")
	ret0, _ := ret[0].(config.Lnd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLightningNodeConfig indicates an expected call of GetLightningNodeConfig.
func (mr *MockCoreMockRecorder) GetLightningNodeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightningNodeConfig", reflect.TypeOf((*MockCore)(nil).GetLightningNodeConfig))
}

// GetMessages mocks base method.
func (m *MockCore) GetMessages() ([]*messages.MessageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].([]*messages.MessageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockCoreMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockCore)(nil).GetMessages))
}

// GetSeed mocks base method.
func (m *MockCore) GetSeed() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeed")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeed indicates an expected call of GetSeed.
func (mr *MockCoreMockRecorder) GetSeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeed", reflect.TypeOf((*MockCore)(nil).GetSeed))
}

// ImportDID mocks base method.
func (m *MockCore) ImportDID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportDID indicates an expected call of ImportDID.
func (mr *MockCoreMockRecorder) ImportDID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDID", reflect.TypeOf((*MockCore)(nil).ImportDID), arg0, arg1)
}

// InitSeed mocks base method.
func (m *MockCore) InitSeed(arg0, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSeed", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InitSeed indicates an expected call of InitSeed.
func (mr *MockCoreMockRecorder) InitSeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSeed", reflect.TypeOf((*MockCore)(nil).InitSeed), arg0, arg1)
}

// KeyStatus mocks base method.
func (m *MockCore) KeyStatus() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyStatus indicates an expected call of KeyStatus.
func (mr *MockCoreMockRecorder) KeyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyStatus", reflect.TypeOf((*MockCore)(nil).KeyStatus))
}

// ListDID mocks base method.
func (m *MockCore) ListDID() ([]*did.Doc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDID")
	ret0, _ := ret[0].([]*did.Doc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDID indicates an expected call of ListDID.
func (mr *MockCoreMockRecorder) ListDID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDID", reflect.TypeOf((*MockCore)(nil).ListDID))
}

// ListFiles mocks base method.
func (m *MockCore) ListFiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockCoreMockRecorder) ListFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockCore)(nil).ListFiles))
}

// ListKeys mocks base method.
func (m *MockCore) ListKeys() ([]*state.AuthStateModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys")
	ret0, _ := ret[0].([]*state.AuthStateModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockCoreMockRecorder) ListKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockCore)(nil).ListKeys))
}

// PayInvoice mocks base method.
func (m *MockCore) PayInvoice(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayInvoice", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayInvoice indicates an expected call of PayInvoice.
func (mr *MockCoreMockRecorder) PayInvoice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayInvoice", reflect.TypeOf((*MockCore)(nil).PayInvoice), arg0)
}

// RecoverDID mocks base method.
func (m *MockCore) RecoverDID(arg0 *id.DIDUpdateInfo, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverDID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverDID indicates an expected call of RecoverDID.
func (mr *MockCoreMockRecorder) RecoverDID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverDID", reflect.TypeOf((*MockCore)(nil).RecoverDID), arg0, arg1, arg2)
}

// ResolveDID mocks base method.
func (m *MockCore) ResolveDID(arg0 string) (*did.Doc, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDID", arg0)
	ret0, _ := ret[0].(*did.Doc)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveDID indicates an expected call of ResolveDID.
func (mr *MockCoreMockRecorder) ResolveDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDID", reflect.TypeOf((*MockCore)(nil).ResolveDID), arg0)
}

// RetrieveFile mocks base method.
func (m *MockCore) RetrieveFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFile indicates an expected call of RetrieveFile.
func (mr *MockCoreMockRecorder) RetrieveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFile", reflect.TypeOf((*MockCore)(nil).RetrieveFile), arg0)
}

// SaveIONConfig mocks base method.
func (m *MockCore) SaveIONConfig(arg0 config.ION) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIONConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIONConfig indicates an expected call of SaveIONConfig.
func (mr *MockCoreMockRecorder) SaveIONConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIONConfig", reflect.TypeOf((*MockCore)(nil).SaveIONConfig), arg0)
}

// SaveLightningNodeConfig mocks base method.
func (m *MockCore) SaveLightningNodeConfig(arg0 config.Lnd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLightningNodeConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLightningNodeConfig indicates an expected call of SaveLightningNodeConfig.
func (mr *MockCoreMockRecorder) SaveLightningNodeConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLightningNodeConfig", reflect.TypeOf((*MockCore)(nil).SaveLightningNodeConfig), arg0)
}

// SaveMessage mocks base method.
func (m *MockCore) SaveMessage(arg0, arg1 string, arg2 []string, arg3, arg4, arg5 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockCoreMockRecorder) SaveMessage(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockCore)(nil).SaveMessage), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendMailboxRequest mocks base method.
func (m *MockCore) SendMailboxRequest(arg0 string, arg1 int64, arg2 *relay.RelayMailboxRequestData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMailboxRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMailboxRequest indicates an expected call of SendMailboxRequest.
func (mr *MockCoreMockRecorder) SendMailboxRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMailboxRequest", reflect.TypeOf((*MockCore)(nil).SendMailboxRequest), arg0, arg1, arg2)
}

// SendMessage mocks base method.
func (m *MockCore) SendMessage(arg0, arg1 string, arg2 int64, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockCoreMockRecorder) SendMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockCore)(nil).SendMessage), arg0, arg1, arg2, arg3)
}

// SendMessageV2 mocks base method.
func (m *MockCore) SendMessageV2(arg0, arg1 string, arg2 []string, arg3 int64, arg4, arg5 string, arg6 *comm.MessageSettings) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageV2", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageV2 indicates an expected call of SendMessageV2.
func (mr *MockCoreMockRecorder) SendMessageV2(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageV2", reflect.TypeOf((*MockCore)(nil).SendMessageV2), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SendRegistrationRequest mocks base method.
func (m *MockCore) SendRegistrationRequest(arg0 string, arg1 int64, arg2 *relay.RelayRegistrationRequestData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegistrationRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegistrationRequest indicates an expected call of SendRegistrationRequest.
func (mr *MockCoreMockRecorder) SendRegistrationRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegistrationRequest", reflect.TypeOf((*MockCore)(nil).SendRegistrationRequest), arg0, arg1, arg2)
}

// SignMessage mocks base method.
func (m *MockCore) SignMessage(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMessage", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMessage indicates an expected call of SignMessage.
func (mr *MockCoreMockRecorder) SignMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockCore)(nil).SignMessage), arg0)
}

// Start mocks base method.
func (m *MockCore) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCore)(nil).Start))
}

// Stop mocks base method.
func (m *MockCore) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockCoreMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCore)(nil).Stop))
}

// UnlockSeed mocks base method.
func (m *MockCore) UnlockSeed(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockSeed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockSeed indicates an expected call of UnlockSeed.
func (mr *MockCoreMockRecorder) UnlockSeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockSeed", reflect.TypeOf((*MockCore)(nil).UnlockSeed), arg0)
}

// UpdateContact mocks base method.
func (m *MockCore) UpdateContact(arg0 *contacts.ContactUpdate) (*contacts.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0)
	ret0, _ := ret[0].(*contacts.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockCoreMockRecorder) UpdateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockCore)(nil).UpdateContact), arg0)
}

// UpdateDID mocks base method.
func (m *MockCore) UpdateDID(arg0 string) (*id.DIDUpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDID", arg0)
	ret0, _ := ret[0].(*id.DIDUpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDID indicates an expected call of UpdateDID.
func (mr *MockCoreMockRecorder) UpdateDID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDID", reflect.TypeOf((*MockCore)(nil).UpdateDID), arg0)
}

// UpdateKey mocks base method.
func (m *MockCore) UpdateKey(arg0 int64, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKey indicates an expected call of UpdateKey.
func (mr *MockCoreMockRecorder) UpdateKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKey", reflect.TypeOf((*MockCore)(nil).UpdateKey), arg0, arg1, arg2)
}
